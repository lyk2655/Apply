/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.linyk3.thrift.apply.params;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-4-12")
public class ListCompanyInfoParams implements org.apache.thrift.TBase<ListCompanyInfoParams, ListCompanyInfoParams._Fields>, java.io.Serializable, Cloneable, Comparable<ListCompanyInfoParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ListCompanyInfoParams");

  private static final org.apache.thrift.protocol.TField COMPANY_NAME_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("companyNameList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("companyIdList", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ListCompanyInfoParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ListCompanyInfoParamsTupleSchemeFactory());
  }

  /**
   * 公司名字列表和公司Id列表 二选一 选填，不填选择全部
   */
  public List<String> companyNameList; // required
  public List<String> companyIdList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 公司名字列表和公司Id列表 二选一 选填，不填选择全部
     */
    COMPANY_NAME_LIST((short)1, "companyNameList"),
    COMPANY_ID_LIST((short)2, "companyIdList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMPANY_NAME_LIST
          return COMPANY_NAME_LIST;
        case 2: // COMPANY_ID_LIST
          return COMPANY_ID_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMPANY_NAME_LIST, new org.apache.thrift.meta_data.FieldMetaData("companyNameList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COMPANY_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("companyIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ListCompanyInfoParams.class, metaDataMap);
  }

  public ListCompanyInfoParams() {
  }

  public ListCompanyInfoParams(
    List<String> companyNameList,
    List<String> companyIdList)
  {
    this();
    this.companyNameList = companyNameList;
    this.companyIdList = companyIdList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ListCompanyInfoParams(ListCompanyInfoParams other) {
    if (other.isSetCompanyNameList()) {
      List<String> __this__companyNameList = new ArrayList<String>(other.companyNameList);
      this.companyNameList = __this__companyNameList;
    }
    if (other.isSetCompanyIdList()) {
      List<String> __this__companyIdList = new ArrayList<String>(other.companyIdList);
      this.companyIdList = __this__companyIdList;
    }
  }

  public ListCompanyInfoParams deepCopy() {
    return new ListCompanyInfoParams(this);
  }

  @Override
  public void clear() {
    this.companyNameList = null;
    this.companyIdList = null;
  }

  public int getCompanyNameListSize() {
    return (this.companyNameList == null) ? 0 : this.companyNameList.size();
  }

  public java.util.Iterator<String> getCompanyNameListIterator() {
    return (this.companyNameList == null) ? null : this.companyNameList.iterator();
  }

  public void addToCompanyNameList(String elem) {
    if (this.companyNameList == null) {
      this.companyNameList = new ArrayList<String>();
    }
    this.companyNameList.add(elem);
  }

  /**
   * 公司名字列表和公司Id列表 二选一 选填，不填选择全部
   */
  public List<String> getCompanyNameList() {
    return this.companyNameList;
  }

  /**
   * 公司名字列表和公司Id列表 二选一 选填，不填选择全部
   */
  public ListCompanyInfoParams setCompanyNameList(List<String> companyNameList) {
    this.companyNameList = companyNameList;
    return this;
  }

  public void unsetCompanyNameList() {
    this.companyNameList = null;
  }

  /** Returns true if field companyNameList is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyNameList() {
    return this.companyNameList != null;
  }

  public void setCompanyNameListIsSet(boolean value) {
    if (!value) {
      this.companyNameList = null;
    }
  }

  public int getCompanyIdListSize() {
    return (this.companyIdList == null) ? 0 : this.companyIdList.size();
  }

  public java.util.Iterator<String> getCompanyIdListIterator() {
    return (this.companyIdList == null) ? null : this.companyIdList.iterator();
  }

  public void addToCompanyIdList(String elem) {
    if (this.companyIdList == null) {
      this.companyIdList = new ArrayList<String>();
    }
    this.companyIdList.add(elem);
  }

  public List<String> getCompanyIdList() {
    return this.companyIdList;
  }

  public ListCompanyInfoParams setCompanyIdList(List<String> companyIdList) {
    this.companyIdList = companyIdList;
    return this;
  }

  public void unsetCompanyIdList() {
    this.companyIdList = null;
  }

  /** Returns true if field companyIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyIdList() {
    return this.companyIdList != null;
  }

  public void setCompanyIdListIsSet(boolean value) {
    if (!value) {
      this.companyIdList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMPANY_NAME_LIST:
      if (value == null) {
        unsetCompanyNameList();
      } else {
        setCompanyNameList((List<String>)value);
      }
      break;

    case COMPANY_ID_LIST:
      if (value == null) {
        unsetCompanyIdList();
      } else {
        setCompanyIdList((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMPANY_NAME_LIST:
      return getCompanyNameList();

    case COMPANY_ID_LIST:
      return getCompanyIdList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMPANY_NAME_LIST:
      return isSetCompanyNameList();
    case COMPANY_ID_LIST:
      return isSetCompanyIdList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ListCompanyInfoParams)
      return this.equals((ListCompanyInfoParams)that);
    return false;
  }

  public boolean equals(ListCompanyInfoParams that) {
    if (that == null)
      return false;

    boolean this_present_companyNameList = true && this.isSetCompanyNameList();
    boolean that_present_companyNameList = true && that.isSetCompanyNameList();
    if (this_present_companyNameList || that_present_companyNameList) {
      if (!(this_present_companyNameList && that_present_companyNameList))
        return false;
      if (!this.companyNameList.equals(that.companyNameList))
        return false;
    }

    boolean this_present_companyIdList = true && this.isSetCompanyIdList();
    boolean that_present_companyIdList = true && that.isSetCompanyIdList();
    if (this_present_companyIdList || that_present_companyIdList) {
      if (!(this_present_companyIdList && that_present_companyIdList))
        return false;
      if (!this.companyIdList.equals(that.companyIdList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_companyNameList = true && (isSetCompanyNameList());
    list.add(present_companyNameList);
    if (present_companyNameList)
      list.add(companyNameList);

    boolean present_companyIdList = true && (isSetCompanyIdList());
    list.add(present_companyIdList);
    if (present_companyIdList)
      list.add(companyIdList);

    return list.hashCode();
  }

  @Override
  public int compareTo(ListCompanyInfoParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCompanyNameList()).compareTo(other.isSetCompanyNameList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyNameList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyNameList, other.companyNameList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyIdList()).compareTo(other.isSetCompanyIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyIdList, other.companyIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ListCompanyInfoParams(");
    boolean first = true;

    sb.append("companyNameList:");
    if (this.companyNameList == null) {
      sb.append("null");
    } else {
      sb.append(this.companyNameList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("companyIdList:");
    if (this.companyIdList == null) {
      sb.append("null");
    } else {
      sb.append(this.companyIdList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ListCompanyInfoParamsStandardSchemeFactory implements SchemeFactory {
    public ListCompanyInfoParamsStandardScheme getScheme() {
      return new ListCompanyInfoParamsStandardScheme();
    }
  }

  private static class ListCompanyInfoParamsStandardScheme extends StandardScheme<ListCompanyInfoParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ListCompanyInfoParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMPANY_NAME_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.companyNameList = new ArrayList<String>(_list32.size);
                String _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = iprot.readString();
                  struct.companyNameList.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setCompanyNameListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPANY_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.companyIdList = new ArrayList<String>(_list35.size);
                String _elem36;
                for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                {
                  _elem36 = iprot.readString();
                  struct.companyIdList.add(_elem36);
                }
                iprot.readListEnd();
              }
              struct.setCompanyIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ListCompanyInfoParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.companyNameList != null) {
        oprot.writeFieldBegin(COMPANY_NAME_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.companyNameList.size()));
          for (String _iter38 : struct.companyNameList)
          {
            oprot.writeString(_iter38);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.companyIdList != null) {
        oprot.writeFieldBegin(COMPANY_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.companyIdList.size()));
          for (String _iter39 : struct.companyIdList)
          {
            oprot.writeString(_iter39);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ListCompanyInfoParamsTupleSchemeFactory implements SchemeFactory {
    public ListCompanyInfoParamsTupleScheme getScheme() {
      return new ListCompanyInfoParamsTupleScheme();
    }
  }

  private static class ListCompanyInfoParamsTupleScheme extends TupleScheme<ListCompanyInfoParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ListCompanyInfoParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCompanyNameList()) {
        optionals.set(0);
      }
      if (struct.isSetCompanyIdList()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetCompanyNameList()) {
        {
          oprot.writeI32(struct.companyNameList.size());
          for (String _iter40 : struct.companyNameList)
          {
            oprot.writeString(_iter40);
          }
        }
      }
      if (struct.isSetCompanyIdList()) {
        {
          oprot.writeI32(struct.companyIdList.size());
          for (String _iter41 : struct.companyIdList)
          {
            oprot.writeString(_iter41);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ListCompanyInfoParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.companyNameList = new ArrayList<String>(_list42.size);
          String _elem43;
          for (int _i44 = 0; _i44 < _list42.size; ++_i44)
          {
            _elem43 = iprot.readString();
            struct.companyNameList.add(_elem43);
          }
        }
        struct.setCompanyNameListIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.companyIdList = new ArrayList<String>(_list45.size);
          String _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = iprot.readString();
            struct.companyIdList.add(_elem46);
          }
        }
        struct.setCompanyIdListIsSet(true);
      }
    }
  }

}

