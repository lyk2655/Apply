/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.linyk3.thrift.apply;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-4-12")
public class EmployInfo implements org.apache.thrift.TBase<EmployInfo, EmployInfo._Fields>, java.io.Serializable, Cloneable, Comparable<EmployInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EmployInfo");

  private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COMPANY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("companyName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField POSITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("positions", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField EMPLOY_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("employCondition", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField SALARY_MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("salaryMin", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField SALARY_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("salaryMax", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField BENEFITS_FIELD_DESC = new org.apache.thrift.protocol.TField("benefits", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MARKS_FIELD_DESC = new org.apache.thrift.protocol.TField("marks", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EmployInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EmployInfoTupleSchemeFactory());
  }

  public String _id; // required
  public String companyId; // required
  public String companyName; // required
  public String positions; // required
  public int number; // required
  public EmployConditionInfo employCondition; // required
  public int salaryMin; // required
  public int salaryMax; // required
  public String benefits; // required
  public String marks; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _ID((short)1, "_id"),
    COMPANY_ID((short)2, "companyId"),
    COMPANY_NAME((short)3, "companyName"),
    POSITIONS((short)4, "positions"),
    NUMBER((short)5, "number"),
    EMPLOY_CONDITION((short)6, "employCondition"),
    SALARY_MIN((short)7, "salaryMin"),
    SALARY_MAX((short)8, "salaryMax"),
    BENEFITS((short)9, "benefits"),
    MARKS((short)10, "marks");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _ID
          return _ID;
        case 2: // COMPANY_ID
          return COMPANY_ID;
        case 3: // COMPANY_NAME
          return COMPANY_NAME;
        case 4: // POSITIONS
          return POSITIONS;
        case 5: // NUMBER
          return NUMBER;
        case 6: // EMPLOY_CONDITION
          return EMPLOY_CONDITION;
        case 7: // SALARY_MIN
          return SALARY_MIN;
        case 8: // SALARY_MAX
          return SALARY_MAX;
        case 9: // BENEFITS
          return BENEFITS;
        case 10: // MARKS
          return MARKS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMBER_ISSET_ID = 0;
  private static final int __SALARYMIN_ISSET_ID = 1;
  private static final int __SALARYMAX_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_NAME, new org.apache.thrift.meta_data.FieldMetaData("companyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSITIONS, new org.apache.thrift.meta_data.FieldMetaData("positions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EMPLOY_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("employCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EmployConditionInfo.class)));
    tmpMap.put(_Fields.SALARY_MIN, new org.apache.thrift.meta_data.FieldMetaData("salaryMin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SALARY_MAX, new org.apache.thrift.meta_data.FieldMetaData("salaryMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BENEFITS, new org.apache.thrift.meta_data.FieldMetaData("benefits", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MARKS, new org.apache.thrift.meta_data.FieldMetaData("marks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EmployInfo.class, metaDataMap);
  }

  public EmployInfo() {
  }

  public EmployInfo(
    String _id,
    String companyId,
    String companyName,
    String positions,
    int number,
    EmployConditionInfo employCondition,
    int salaryMin,
    int salaryMax,
    String benefits,
    String marks)
  {
    this();
    this._id = _id;
    this.companyId = companyId;
    this.companyName = companyName;
    this.positions = positions;
    this.number = number;
    setNumberIsSet(true);
    this.employCondition = employCondition;
    this.salaryMin = salaryMin;
    setSalaryMinIsSet(true);
    this.salaryMax = salaryMax;
    setSalaryMaxIsSet(true);
    this.benefits = benefits;
    this.marks = marks;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EmployInfo(EmployInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSet_id()) {
      this._id = other._id;
    }
    if (other.isSetCompanyId()) {
      this.companyId = other.companyId;
    }
    if (other.isSetCompanyName()) {
      this.companyName = other.companyName;
    }
    if (other.isSetPositions()) {
      this.positions = other.positions;
    }
    this.number = other.number;
    if (other.isSetEmployCondition()) {
      this.employCondition = new EmployConditionInfo(other.employCondition);
    }
    this.salaryMin = other.salaryMin;
    this.salaryMax = other.salaryMax;
    if (other.isSetBenefits()) {
      this.benefits = other.benefits;
    }
    if (other.isSetMarks()) {
      this.marks = other.marks;
    }
  }

  public EmployInfo deepCopy() {
    return new EmployInfo(this);
  }

  @Override
  public void clear() {
    this._id = null;
    this.companyId = null;
    this.companyName = null;
    this.positions = null;
    setNumberIsSet(false);
    this.number = 0;
    this.employCondition = null;
    setSalaryMinIsSet(false);
    this.salaryMin = 0;
    setSalaryMaxIsSet(false);
    this.salaryMax = 0;
    this.benefits = null;
    this.marks = null;
  }

  public String get_id() {
    return this._id;
  }

  public EmployInfo set_id(String _id) {
    this._id = _id;
    return this;
  }

  public void unset_id() {
    this._id = null;
  }

  /** Returns true if field _id is set (has been assigned a value) and false otherwise */
  public boolean isSet_id() {
    return this._id != null;
  }

  public void set_idIsSet(boolean value) {
    if (!value) {
      this._id = null;
    }
  }

  public String getCompanyId() {
    return this.companyId;
  }

  public EmployInfo setCompanyId(String companyId) {
    this.companyId = companyId;
    return this;
  }

  public void unsetCompanyId() {
    this.companyId = null;
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return this.companyId != null;
  }

  public void setCompanyIdIsSet(boolean value) {
    if (!value) {
      this.companyId = null;
    }
  }

  public String getCompanyName() {
    return this.companyName;
  }

  public EmployInfo setCompanyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  public void unsetCompanyName() {
    this.companyName = null;
  }

  /** Returns true if field companyName is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyName() {
    return this.companyName != null;
  }

  public void setCompanyNameIsSet(boolean value) {
    if (!value) {
      this.companyName = null;
    }
  }

  public String getPositions() {
    return this.positions;
  }

  public EmployInfo setPositions(String positions) {
    this.positions = positions;
    return this;
  }

  public void unsetPositions() {
    this.positions = null;
  }

  /** Returns true if field positions is set (has been assigned a value) and false otherwise */
  public boolean isSetPositions() {
    return this.positions != null;
  }

  public void setPositionsIsSet(boolean value) {
    if (!value) {
      this.positions = null;
    }
  }

  public int getNumber() {
    return this.number;
  }

  public EmployInfo setNumber(int number) {
    this.number = number;
    setNumberIsSet(true);
    return this;
  }

  public void unsetNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
  }

  /** Returns true if field number is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
  }

  public void setNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
  }

  public EmployConditionInfo getEmployCondition() {
    return this.employCondition;
  }

  public EmployInfo setEmployCondition(EmployConditionInfo employCondition) {
    this.employCondition = employCondition;
    return this;
  }

  public void unsetEmployCondition() {
    this.employCondition = null;
  }

  /** Returns true if field employCondition is set (has been assigned a value) and false otherwise */
  public boolean isSetEmployCondition() {
    return this.employCondition != null;
  }

  public void setEmployConditionIsSet(boolean value) {
    if (!value) {
      this.employCondition = null;
    }
  }

  public int getSalaryMin() {
    return this.salaryMin;
  }

  public EmployInfo setSalaryMin(int salaryMin) {
    this.salaryMin = salaryMin;
    setSalaryMinIsSet(true);
    return this;
  }

  public void unsetSalaryMin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SALARYMIN_ISSET_ID);
  }

  /** Returns true if field salaryMin is set (has been assigned a value) and false otherwise */
  public boolean isSetSalaryMin() {
    return EncodingUtils.testBit(__isset_bitfield, __SALARYMIN_ISSET_ID);
  }

  public void setSalaryMinIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SALARYMIN_ISSET_ID, value);
  }

  public int getSalaryMax() {
    return this.salaryMax;
  }

  public EmployInfo setSalaryMax(int salaryMax) {
    this.salaryMax = salaryMax;
    setSalaryMaxIsSet(true);
    return this;
  }

  public void unsetSalaryMax() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SALARYMAX_ISSET_ID);
  }

  /** Returns true if field salaryMax is set (has been assigned a value) and false otherwise */
  public boolean isSetSalaryMax() {
    return EncodingUtils.testBit(__isset_bitfield, __SALARYMAX_ISSET_ID);
  }

  public void setSalaryMaxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SALARYMAX_ISSET_ID, value);
  }

  public String getBenefits() {
    return this.benefits;
  }

  public EmployInfo setBenefits(String benefits) {
    this.benefits = benefits;
    return this;
  }

  public void unsetBenefits() {
    this.benefits = null;
  }

  /** Returns true if field benefits is set (has been assigned a value) and false otherwise */
  public boolean isSetBenefits() {
    return this.benefits != null;
  }

  public void setBenefitsIsSet(boolean value) {
    if (!value) {
      this.benefits = null;
    }
  }

  public String getMarks() {
    return this.marks;
  }

  public EmployInfo setMarks(String marks) {
    this.marks = marks;
    return this;
  }

  public void unsetMarks() {
    this.marks = null;
  }

  /** Returns true if field marks is set (has been assigned a value) and false otherwise */
  public boolean isSetMarks() {
    return this.marks != null;
  }

  public void setMarksIsSet(boolean value) {
    if (!value) {
      this.marks = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case _ID:
      if (value == null) {
        unset_id();
      } else {
        set_id((String)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((String)value);
      }
      break;

    case COMPANY_NAME:
      if (value == null) {
        unsetCompanyName();
      } else {
        setCompanyName((String)value);
      }
      break;

    case POSITIONS:
      if (value == null) {
        unsetPositions();
      } else {
        setPositions((String)value);
      }
      break;

    case NUMBER:
      if (value == null) {
        unsetNumber();
      } else {
        setNumber((Integer)value);
      }
      break;

    case EMPLOY_CONDITION:
      if (value == null) {
        unsetEmployCondition();
      } else {
        setEmployCondition((EmployConditionInfo)value);
      }
      break;

    case SALARY_MIN:
      if (value == null) {
        unsetSalaryMin();
      } else {
        setSalaryMin((Integer)value);
      }
      break;

    case SALARY_MAX:
      if (value == null) {
        unsetSalaryMax();
      } else {
        setSalaryMax((Integer)value);
      }
      break;

    case BENEFITS:
      if (value == null) {
        unsetBenefits();
      } else {
        setBenefits((String)value);
      }
      break;

    case MARKS:
      if (value == null) {
        unsetMarks();
      } else {
        setMarks((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case _ID:
      return get_id();

    case COMPANY_ID:
      return getCompanyId();

    case COMPANY_NAME:
      return getCompanyName();

    case POSITIONS:
      return getPositions();

    case NUMBER:
      return Integer.valueOf(getNumber());

    case EMPLOY_CONDITION:
      return getEmployCondition();

    case SALARY_MIN:
      return Integer.valueOf(getSalaryMin());

    case SALARY_MAX:
      return Integer.valueOf(getSalaryMax());

    case BENEFITS:
      return getBenefits();

    case MARKS:
      return getMarks();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case _ID:
      return isSet_id();
    case COMPANY_ID:
      return isSetCompanyId();
    case COMPANY_NAME:
      return isSetCompanyName();
    case POSITIONS:
      return isSetPositions();
    case NUMBER:
      return isSetNumber();
    case EMPLOY_CONDITION:
      return isSetEmployCondition();
    case SALARY_MIN:
      return isSetSalaryMin();
    case SALARY_MAX:
      return isSetSalaryMax();
    case BENEFITS:
      return isSetBenefits();
    case MARKS:
      return isSetMarks();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EmployInfo)
      return this.equals((EmployInfo)that);
    return false;
  }

  public boolean equals(EmployInfo that) {
    if (that == null)
      return false;

    boolean this_present__id = true && this.isSet_id();
    boolean that_present__id = true && that.isSet_id();
    if (this_present__id || that_present__id) {
      if (!(this_present__id && that_present__id))
        return false;
      if (!this._id.equals(that._id))
        return false;
    }

    boolean this_present_companyId = true && this.isSetCompanyId();
    boolean that_present_companyId = true && that.isSetCompanyId();
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (!this.companyId.equals(that.companyId))
        return false;
    }

    boolean this_present_companyName = true && this.isSetCompanyName();
    boolean that_present_companyName = true && that.isSetCompanyName();
    if (this_present_companyName || that_present_companyName) {
      if (!(this_present_companyName && that_present_companyName))
        return false;
      if (!this.companyName.equals(that.companyName))
        return false;
    }

    boolean this_present_positions = true && this.isSetPositions();
    boolean that_present_positions = true && that.isSetPositions();
    if (this_present_positions || that_present_positions) {
      if (!(this_present_positions && that_present_positions))
        return false;
      if (!this.positions.equals(that.positions))
        return false;
    }

    boolean this_present_number = true;
    boolean that_present_number = true;
    if (this_present_number || that_present_number) {
      if (!(this_present_number && that_present_number))
        return false;
      if (this.number != that.number)
        return false;
    }

    boolean this_present_employCondition = true && this.isSetEmployCondition();
    boolean that_present_employCondition = true && that.isSetEmployCondition();
    if (this_present_employCondition || that_present_employCondition) {
      if (!(this_present_employCondition && that_present_employCondition))
        return false;
      if (!this.employCondition.equals(that.employCondition))
        return false;
    }

    boolean this_present_salaryMin = true;
    boolean that_present_salaryMin = true;
    if (this_present_salaryMin || that_present_salaryMin) {
      if (!(this_present_salaryMin && that_present_salaryMin))
        return false;
      if (this.salaryMin != that.salaryMin)
        return false;
    }

    boolean this_present_salaryMax = true;
    boolean that_present_salaryMax = true;
    if (this_present_salaryMax || that_present_salaryMax) {
      if (!(this_present_salaryMax && that_present_salaryMax))
        return false;
      if (this.salaryMax != that.salaryMax)
        return false;
    }

    boolean this_present_benefits = true && this.isSetBenefits();
    boolean that_present_benefits = true && that.isSetBenefits();
    if (this_present_benefits || that_present_benefits) {
      if (!(this_present_benefits && that_present_benefits))
        return false;
      if (!this.benefits.equals(that.benefits))
        return false;
    }

    boolean this_present_marks = true && this.isSetMarks();
    boolean that_present_marks = true && that.isSetMarks();
    if (this_present_marks || that_present_marks) {
      if (!(this_present_marks && that_present_marks))
        return false;
      if (!this.marks.equals(that.marks))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present__id = true && (isSet_id());
    list.add(present__id);
    if (present__id)
      list.add(_id);

    boolean present_companyId = true && (isSetCompanyId());
    list.add(present_companyId);
    if (present_companyId)
      list.add(companyId);

    boolean present_companyName = true && (isSetCompanyName());
    list.add(present_companyName);
    if (present_companyName)
      list.add(companyName);

    boolean present_positions = true && (isSetPositions());
    list.add(present_positions);
    if (present_positions)
      list.add(positions);

    boolean present_number = true;
    list.add(present_number);
    if (present_number)
      list.add(number);

    boolean present_employCondition = true && (isSetEmployCondition());
    list.add(present_employCondition);
    if (present_employCondition)
      list.add(employCondition);

    boolean present_salaryMin = true;
    list.add(present_salaryMin);
    if (present_salaryMin)
      list.add(salaryMin);

    boolean present_salaryMax = true;
    list.add(present_salaryMax);
    if (present_salaryMax)
      list.add(salaryMax);

    boolean present_benefits = true && (isSetBenefits());
    list.add(present_benefits);
    if (present_benefits)
      list.add(benefits);

    boolean present_marks = true && (isSetMarks());
    list.add(present_marks);
    if (present_marks)
      list.add(marks);

    return list.hashCode();
  }

  @Override
  public int compareTo(EmployInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSet_id()).compareTo(other.isSet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, other._id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyName()).compareTo(other.isSetCompanyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyName, other.companyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositions()).compareTo(other.isSetPositions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positions, other.positions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmployCondition()).compareTo(other.isSetEmployCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmployCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employCondition, other.employCondition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalaryMin()).compareTo(other.isSetSalaryMin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalaryMin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salaryMin, other.salaryMin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalaryMax()).compareTo(other.isSetSalaryMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalaryMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salaryMax, other.salaryMax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBenefits()).compareTo(other.isSetBenefits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBenefits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.benefits, other.benefits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarks()).compareTo(other.isSetMarks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marks, other.marks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EmployInfo(");
    boolean first = true;

    sb.append("_id:");
    if (this._id == null) {
      sb.append("null");
    } else {
      sb.append(this._id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("companyId:");
    if (this.companyId == null) {
      sb.append("null");
    } else {
      sb.append(this.companyId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("companyName:");
    if (this.companyName == null) {
      sb.append("null");
    } else {
      sb.append(this.companyName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("positions:");
    if (this.positions == null) {
      sb.append("null");
    } else {
      sb.append(this.positions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("number:");
    sb.append(this.number);
    first = false;
    if (!first) sb.append(", ");
    sb.append("employCondition:");
    if (this.employCondition == null) {
      sb.append("null");
    } else {
      sb.append(this.employCondition);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("salaryMin:");
    sb.append(this.salaryMin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("salaryMax:");
    sb.append(this.salaryMax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("benefits:");
    if (this.benefits == null) {
      sb.append("null");
    } else {
      sb.append(this.benefits);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("marks:");
    if (this.marks == null) {
      sb.append("null");
    } else {
      sb.append(this.marks);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (employCondition != null) {
      employCondition.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EmployInfoStandardSchemeFactory implements SchemeFactory {
    public EmployInfoStandardScheme getScheme() {
      return new EmployInfoStandardScheme();
    }
  }

  private static class EmployInfoStandardScheme extends StandardScheme<EmployInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EmployInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._id = iprot.readString();
              struct.set_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.companyId = iprot.readString();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPANY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.companyName = iprot.readString();
              struct.setCompanyNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // POSITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.positions = iprot.readString();
              struct.setPositionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.number = iprot.readI32();
              struct.setNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EMPLOY_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.employCondition = new EmployConditionInfo();
              struct.employCondition.read(iprot);
              struct.setEmployConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SALARY_MIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.salaryMin = iprot.readI32();
              struct.setSalaryMinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SALARY_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.salaryMax = iprot.readI32();
              struct.setSalaryMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BENEFITS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.benefits = iprot.readString();
              struct.setBenefitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MARKS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.marks = iprot.readString();
              struct.setMarksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EmployInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct._id != null) {
        oprot.writeFieldBegin(_ID_FIELD_DESC);
        oprot.writeString(struct._id);
        oprot.writeFieldEnd();
      }
      if (struct.companyId != null) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeString(struct.companyId);
        oprot.writeFieldEnd();
      }
      if (struct.companyName != null) {
        oprot.writeFieldBegin(COMPANY_NAME_FIELD_DESC);
        oprot.writeString(struct.companyName);
        oprot.writeFieldEnd();
      }
      if (struct.positions != null) {
        oprot.writeFieldBegin(POSITIONS_FIELD_DESC);
        oprot.writeString(struct.positions);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUMBER_FIELD_DESC);
      oprot.writeI32(struct.number);
      oprot.writeFieldEnd();
      if (struct.employCondition != null) {
        oprot.writeFieldBegin(EMPLOY_CONDITION_FIELD_DESC);
        struct.employCondition.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SALARY_MIN_FIELD_DESC);
      oprot.writeI32(struct.salaryMin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SALARY_MAX_FIELD_DESC);
      oprot.writeI32(struct.salaryMax);
      oprot.writeFieldEnd();
      if (struct.benefits != null) {
        oprot.writeFieldBegin(BENEFITS_FIELD_DESC);
        oprot.writeString(struct.benefits);
        oprot.writeFieldEnd();
      }
      if (struct.marks != null) {
        oprot.writeFieldBegin(MARKS_FIELD_DESC);
        oprot.writeString(struct.marks);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EmployInfoTupleSchemeFactory implements SchemeFactory {
    public EmployInfoTupleScheme getScheme() {
      return new EmployInfoTupleScheme();
    }
  }

  private static class EmployInfoTupleScheme extends TupleScheme<EmployInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EmployInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSet_id()) {
        optionals.set(0);
      }
      if (struct.isSetCompanyId()) {
        optionals.set(1);
      }
      if (struct.isSetCompanyName()) {
        optionals.set(2);
      }
      if (struct.isSetPositions()) {
        optionals.set(3);
      }
      if (struct.isSetNumber()) {
        optionals.set(4);
      }
      if (struct.isSetEmployCondition()) {
        optionals.set(5);
      }
      if (struct.isSetSalaryMin()) {
        optionals.set(6);
      }
      if (struct.isSetSalaryMax()) {
        optionals.set(7);
      }
      if (struct.isSetBenefits()) {
        optionals.set(8);
      }
      if (struct.isSetMarks()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSet_id()) {
        oprot.writeString(struct._id);
      }
      if (struct.isSetCompanyId()) {
        oprot.writeString(struct.companyId);
      }
      if (struct.isSetCompanyName()) {
        oprot.writeString(struct.companyName);
      }
      if (struct.isSetPositions()) {
        oprot.writeString(struct.positions);
      }
      if (struct.isSetNumber()) {
        oprot.writeI32(struct.number);
      }
      if (struct.isSetEmployCondition()) {
        struct.employCondition.write(oprot);
      }
      if (struct.isSetSalaryMin()) {
        oprot.writeI32(struct.salaryMin);
      }
      if (struct.isSetSalaryMax()) {
        oprot.writeI32(struct.salaryMax);
      }
      if (struct.isSetBenefits()) {
        oprot.writeString(struct.benefits);
      }
      if (struct.isSetMarks()) {
        oprot.writeString(struct.marks);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EmployInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct._id = iprot.readString();
        struct.set_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.companyId = iprot.readString();
        struct.setCompanyIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.companyName = iprot.readString();
        struct.setCompanyNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.positions = iprot.readString();
        struct.setPositionsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.number = iprot.readI32();
        struct.setNumberIsSet(true);
      }
      if (incoming.get(5)) {
        struct.employCondition = new EmployConditionInfo();
        struct.employCondition.read(iprot);
        struct.setEmployConditionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.salaryMin = iprot.readI32();
        struct.setSalaryMinIsSet(true);
      }
      if (incoming.get(7)) {
        struct.salaryMax = iprot.readI32();
        struct.setSalaryMaxIsSet(true);
      }
      if (incoming.get(8)) {
        struct.benefits = iprot.readString();
        struct.setBenefitsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.marks = iprot.readString();
        struct.setMarksIsSet(true);
      }
    }
  }

}

