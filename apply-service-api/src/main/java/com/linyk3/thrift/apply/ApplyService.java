/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.linyk3.thrift.apply;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-4-12")
public class ApplyService {

  public interface Iface {

    public UserInfo findUserInfo(com.linyk3.thrift.apply.params.FindUserInfoParams findUserInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException;

    public List<UserInfo> listUserInfo(com.linyk3.thrift.apply.params.ListUserInfoParams listUserInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException;

    public PersonalInfo findPersonalInfo(com.linyk3.thrift.apply.params.FindPersonalInfoParams findPersonalInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException;

    public List<PersonalInfo> listPersonalInfo(com.linyk3.thrift.apply.params.ListPersonalInfoParams listPersonalInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException;

    public PersonalInfo updatePersonalInfo(PersonalInfo personalInfo) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException;

    public PersonalInfo deletePersonalInfo(String _id) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException;

    public CompanyInfo findCompanyInfo(com.linyk3.thrift.apply.params.FindCompanyInfoParams findCompanyInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException;

    public List<CompanyInfo> listCompanyInfo(com.linyk3.thrift.apply.params.ListCompanyInfoParams listCompanyInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException;

    public CompanyInfo updateCompanyInfo(CompanyInfo companyInfo) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException;

    public CompanyInfo deleteCompanyInfo(String _id) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException;

    public EmployInfo findEmployInfo(com.linyk3.thrift.apply.params.FindEmployInfoParams findEmployInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException;

    public List<EmployInfo> listEmployInfo(com.linyk3.thrift.apply.params.ListEmployInfoParams listEmployInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException;

    public EmployInfo updateEmployInfo(EmployInfo employInfo) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException;

    public EmployInfo deleteEmployInfo(String _id) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException;

    public ApplicationInfo findApplicationInfo(com.linyk3.thrift.apply.params.FindApplicationInfoParams findApplicationInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException;

    public List<ApplicationInfo> listApplicationInfo(com.linyk3.thrift.apply.params.ListApplicationInfoParams listApplicationInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException;

    public ApplicationInfo updateApplicationInfo(ApplicationInfo applicationInfo) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException;

    public ApplicationInfo deleteApplicationInfo(String _id) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException;

    public TeachinInfo findTeachinInfo(com.linyk3.thrift.apply.params.FindTeachinInfoParams findTeachinInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException;

    public List<TeachinInfo> listTeachinInfo(com.linyk3.thrift.apply.params.ListTeachinInfoParams listTeachinInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException;

    public TeachinInfo updateTeachinInfo(TeachinInfo teachinInfo) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException;

    public TeachinInfo deleteTeachinInfo(String _id) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException;

    public ExaminationInfo findExaminationInfo(com.linyk3.thrift.apply.params.FindExaminationInfoParams findExaminationInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException;

    public List<ExaminationInfo> listExaminationInfo(com.linyk3.thrift.apply.params.ListExaminationInfoParams listExaminationInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException;

    public ExaminationInfo updateExaminationInfo(ExaminationInfo examinationInfo) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException;

    public ExaminationInfo deleteExaminationInfo(String _id) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException;

    public InterviewInfo findInterviewInfo(com.linyk3.thrift.apply.params.FindInterviewInfoParams findInterviewInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException;

    public List<InterviewInfo> listInterviewInfo(com.linyk3.thrift.apply.params.ListInterviewInfoParams listInterviewInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException;

    public InterviewInfo updateInterviewInfo(InterviewInfo interviewInfo) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException;

    public InterviewInfo deleteInterviewInfo(String _id) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void findUserInfo(com.linyk3.thrift.apply.params.FindUserInfoParams findUserInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listUserInfo(com.linyk3.thrift.apply.params.ListUserInfoParams listUserInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findPersonalInfo(com.linyk3.thrift.apply.params.FindPersonalInfoParams findPersonalInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listPersonalInfo(com.linyk3.thrift.apply.params.ListPersonalInfoParams listPersonalInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updatePersonalInfo(PersonalInfo personalInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deletePersonalInfo(String _id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findCompanyInfo(com.linyk3.thrift.apply.params.FindCompanyInfoParams findCompanyInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listCompanyInfo(com.linyk3.thrift.apply.params.ListCompanyInfoParams listCompanyInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateCompanyInfo(CompanyInfo companyInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteCompanyInfo(String _id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findEmployInfo(com.linyk3.thrift.apply.params.FindEmployInfoParams findEmployInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listEmployInfo(com.linyk3.thrift.apply.params.ListEmployInfoParams listEmployInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateEmployInfo(EmployInfo employInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteEmployInfo(String _id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findApplicationInfo(com.linyk3.thrift.apply.params.FindApplicationInfoParams findApplicationInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listApplicationInfo(com.linyk3.thrift.apply.params.ListApplicationInfoParams listApplicationInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateApplicationInfo(ApplicationInfo applicationInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteApplicationInfo(String _id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findTeachinInfo(com.linyk3.thrift.apply.params.FindTeachinInfoParams findTeachinInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listTeachinInfo(com.linyk3.thrift.apply.params.ListTeachinInfoParams listTeachinInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateTeachinInfo(TeachinInfo teachinInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteTeachinInfo(String _id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findExaminationInfo(com.linyk3.thrift.apply.params.FindExaminationInfoParams findExaminationInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listExaminationInfo(com.linyk3.thrift.apply.params.ListExaminationInfoParams listExaminationInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateExaminationInfo(ExaminationInfo examinationInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteExaminationInfo(String _id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findInterviewInfo(com.linyk3.thrift.apply.params.FindInterviewInfoParams findInterviewInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listInterviewInfo(com.linyk3.thrift.apply.params.ListInterviewInfoParams listInterviewInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateInterviewInfo(InterviewInfo interviewInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteInterviewInfo(String _id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public UserInfo findUserInfo(com.linyk3.thrift.apply.params.FindUserInfoParams findUserInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      send_findUserInfo(findUserInfoParams);
      return recv_findUserInfo();
    }

    public void send_findUserInfo(com.linyk3.thrift.apply.params.FindUserInfoParams findUserInfoParams) throws org.apache.thrift.TException
    {
      findUserInfo_args args = new findUserInfo_args();
      args.setFindUserInfoParams(findUserInfoParams);
      sendBase("findUserInfo", args);
    }

    public UserInfo recv_findUserInfo() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      findUserInfo_result result = new findUserInfo_result();
      receiveBase(result, "findUserInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applyException != null) {
        throw result.applyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUserInfo failed: unknown result");
    }

    public List<UserInfo> listUserInfo(com.linyk3.thrift.apply.params.ListUserInfoParams listUserInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      send_listUserInfo(listUserInfoParams);
      return recv_listUserInfo();
    }

    public void send_listUserInfo(com.linyk3.thrift.apply.params.ListUserInfoParams listUserInfoParams) throws org.apache.thrift.TException
    {
      listUserInfo_args args = new listUserInfo_args();
      args.setListUserInfoParams(listUserInfoParams);
      sendBase("listUserInfo", args);
    }

    public List<UserInfo> recv_listUserInfo() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      listUserInfo_result result = new listUserInfo_result();
      receiveBase(result, "listUserInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applyException != null) {
        throw result.applyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listUserInfo failed: unknown result");
    }

    public PersonalInfo findPersonalInfo(com.linyk3.thrift.apply.params.FindPersonalInfoParams findPersonalInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      send_findPersonalInfo(findPersonalInfoParams);
      return recv_findPersonalInfo();
    }

    public void send_findPersonalInfo(com.linyk3.thrift.apply.params.FindPersonalInfoParams findPersonalInfoParams) throws org.apache.thrift.TException
    {
      findPersonalInfo_args args = new findPersonalInfo_args();
      args.setFindPersonalInfoParams(findPersonalInfoParams);
      sendBase("findPersonalInfo", args);
    }

    public PersonalInfo recv_findPersonalInfo() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      findPersonalInfo_result result = new findPersonalInfo_result();
      receiveBase(result, "findPersonalInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applyException != null) {
        throw result.applyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findPersonalInfo failed: unknown result");
    }

    public List<PersonalInfo> listPersonalInfo(com.linyk3.thrift.apply.params.ListPersonalInfoParams listPersonalInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      send_listPersonalInfo(listPersonalInfoParams);
      return recv_listPersonalInfo();
    }

    public void send_listPersonalInfo(com.linyk3.thrift.apply.params.ListPersonalInfoParams listPersonalInfoParams) throws org.apache.thrift.TException
    {
      listPersonalInfo_args args = new listPersonalInfo_args();
      args.setListPersonalInfoParams(listPersonalInfoParams);
      sendBase("listPersonalInfo", args);
    }

    public List<PersonalInfo> recv_listPersonalInfo() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      listPersonalInfo_result result = new listPersonalInfo_result();
      receiveBase(result, "listPersonalInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applyException != null) {
        throw result.applyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listPersonalInfo failed: unknown result");
    }

    public PersonalInfo updatePersonalInfo(PersonalInfo personalInfo) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      send_updatePersonalInfo(personalInfo);
      return recv_updatePersonalInfo();
    }

    public void send_updatePersonalInfo(PersonalInfo personalInfo) throws org.apache.thrift.TException
    {
      updatePersonalInfo_args args = new updatePersonalInfo_args();
      args.setPersonalInfo(personalInfo);
      sendBase("updatePersonalInfo", args);
    }

    public PersonalInfo recv_updatePersonalInfo() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      updatePersonalInfo_result result = new updatePersonalInfo_result();
      receiveBase(result, "updatePersonalInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applyException != null) {
        throw result.applyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updatePersonalInfo failed: unknown result");
    }

    public PersonalInfo deletePersonalInfo(String _id) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      send_deletePersonalInfo(_id);
      return recv_deletePersonalInfo();
    }

    public void send_deletePersonalInfo(String _id) throws org.apache.thrift.TException
    {
      deletePersonalInfo_args args = new deletePersonalInfo_args();
      args.set_id(_id);
      sendBase("deletePersonalInfo", args);
    }

    public PersonalInfo recv_deletePersonalInfo() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      deletePersonalInfo_result result = new deletePersonalInfo_result();
      receiveBase(result, "deletePersonalInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applyException != null) {
        throw result.applyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deletePersonalInfo failed: unknown result");
    }

    public CompanyInfo findCompanyInfo(com.linyk3.thrift.apply.params.FindCompanyInfoParams findCompanyInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      send_findCompanyInfo(findCompanyInfoParams);
      return recv_findCompanyInfo();
    }

    public void send_findCompanyInfo(com.linyk3.thrift.apply.params.FindCompanyInfoParams findCompanyInfoParams) throws org.apache.thrift.TException
    {
      findCompanyInfo_args args = new findCompanyInfo_args();
      args.setFindCompanyInfoParams(findCompanyInfoParams);
      sendBase("findCompanyInfo", args);
    }

    public CompanyInfo recv_findCompanyInfo() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      findCompanyInfo_result result = new findCompanyInfo_result();
      receiveBase(result, "findCompanyInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applyException != null) {
        throw result.applyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findCompanyInfo failed: unknown result");
    }

    public List<CompanyInfo> listCompanyInfo(com.linyk3.thrift.apply.params.ListCompanyInfoParams listCompanyInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      send_listCompanyInfo(listCompanyInfoParams);
      return recv_listCompanyInfo();
    }

    public void send_listCompanyInfo(com.linyk3.thrift.apply.params.ListCompanyInfoParams listCompanyInfoParams) throws org.apache.thrift.TException
    {
      listCompanyInfo_args args = new listCompanyInfo_args();
      args.setListCompanyInfoParams(listCompanyInfoParams);
      sendBase("listCompanyInfo", args);
    }

    public List<CompanyInfo> recv_listCompanyInfo() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      listCompanyInfo_result result = new listCompanyInfo_result();
      receiveBase(result, "listCompanyInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applyException != null) {
        throw result.applyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listCompanyInfo failed: unknown result");
    }

    public CompanyInfo updateCompanyInfo(CompanyInfo companyInfo) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      send_updateCompanyInfo(companyInfo);
      return recv_updateCompanyInfo();
    }

    public void send_updateCompanyInfo(CompanyInfo companyInfo) throws org.apache.thrift.TException
    {
      updateCompanyInfo_args args = new updateCompanyInfo_args();
      args.setCompanyInfo(companyInfo);
      sendBase("updateCompanyInfo", args);
    }

    public CompanyInfo recv_updateCompanyInfo() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      updateCompanyInfo_result result = new updateCompanyInfo_result();
      receiveBase(result, "updateCompanyInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applyException != null) {
        throw result.applyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateCompanyInfo failed: unknown result");
    }

    public CompanyInfo deleteCompanyInfo(String _id) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      send_deleteCompanyInfo(_id);
      return recv_deleteCompanyInfo();
    }

    public void send_deleteCompanyInfo(String _id) throws org.apache.thrift.TException
    {
      deleteCompanyInfo_args args = new deleteCompanyInfo_args();
      args.set_id(_id);
      sendBase("deleteCompanyInfo", args);
    }

    public CompanyInfo recv_deleteCompanyInfo() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      deleteCompanyInfo_result result = new deleteCompanyInfo_result();
      receiveBase(result, "deleteCompanyInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applyException != null) {
        throw result.applyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteCompanyInfo failed: unknown result");
    }

    public EmployInfo findEmployInfo(com.linyk3.thrift.apply.params.FindEmployInfoParams findEmployInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      send_findEmployInfo(findEmployInfoParams);
      return recv_findEmployInfo();
    }

    public void send_findEmployInfo(com.linyk3.thrift.apply.params.FindEmployInfoParams findEmployInfoParams) throws org.apache.thrift.TException
    {
      findEmployInfo_args args = new findEmployInfo_args();
      args.setFindEmployInfoParams(findEmployInfoParams);
      sendBase("findEmployInfo", args);
    }

    public EmployInfo recv_findEmployInfo() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      findEmployInfo_result result = new findEmployInfo_result();
      receiveBase(result, "findEmployInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applyException != null) {
        throw result.applyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findEmployInfo failed: unknown result");
    }

    public List<EmployInfo> listEmployInfo(com.linyk3.thrift.apply.params.ListEmployInfoParams listEmployInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      send_listEmployInfo(listEmployInfoParams);
      return recv_listEmployInfo();
    }

    public void send_listEmployInfo(com.linyk3.thrift.apply.params.ListEmployInfoParams listEmployInfoParams) throws org.apache.thrift.TException
    {
      listEmployInfo_args args = new listEmployInfo_args();
      args.setListEmployInfoParams(listEmployInfoParams);
      sendBase("listEmployInfo", args);
    }

    public List<EmployInfo> recv_listEmployInfo() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      listEmployInfo_result result = new listEmployInfo_result();
      receiveBase(result, "listEmployInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applyException != null) {
        throw result.applyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listEmployInfo failed: unknown result");
    }

    public EmployInfo updateEmployInfo(EmployInfo employInfo) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      send_updateEmployInfo(employInfo);
      return recv_updateEmployInfo();
    }

    public void send_updateEmployInfo(EmployInfo employInfo) throws org.apache.thrift.TException
    {
      updateEmployInfo_args args = new updateEmployInfo_args();
      args.setEmployInfo(employInfo);
      sendBase("updateEmployInfo", args);
    }

    public EmployInfo recv_updateEmployInfo() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      updateEmployInfo_result result = new updateEmployInfo_result();
      receiveBase(result, "updateEmployInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applyException != null) {
        throw result.applyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateEmployInfo failed: unknown result");
    }

    public EmployInfo deleteEmployInfo(String _id) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      send_deleteEmployInfo(_id);
      return recv_deleteEmployInfo();
    }

    public void send_deleteEmployInfo(String _id) throws org.apache.thrift.TException
    {
      deleteEmployInfo_args args = new deleteEmployInfo_args();
      args.set_id(_id);
      sendBase("deleteEmployInfo", args);
    }

    public EmployInfo recv_deleteEmployInfo() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      deleteEmployInfo_result result = new deleteEmployInfo_result();
      receiveBase(result, "deleteEmployInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applyException != null) {
        throw result.applyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteEmployInfo failed: unknown result");
    }

    public ApplicationInfo findApplicationInfo(com.linyk3.thrift.apply.params.FindApplicationInfoParams findApplicationInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      send_findApplicationInfo(findApplicationInfoParams);
      return recv_findApplicationInfo();
    }

    public void send_findApplicationInfo(com.linyk3.thrift.apply.params.FindApplicationInfoParams findApplicationInfoParams) throws org.apache.thrift.TException
    {
      findApplicationInfo_args args = new findApplicationInfo_args();
      args.setFindApplicationInfoParams(findApplicationInfoParams);
      sendBase("findApplicationInfo", args);
    }

    public ApplicationInfo recv_findApplicationInfo() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      findApplicationInfo_result result = new findApplicationInfo_result();
      receiveBase(result, "findApplicationInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applyException != null) {
        throw result.applyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findApplicationInfo failed: unknown result");
    }

    public List<ApplicationInfo> listApplicationInfo(com.linyk3.thrift.apply.params.ListApplicationInfoParams listApplicationInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      send_listApplicationInfo(listApplicationInfoParams);
      return recv_listApplicationInfo();
    }

    public void send_listApplicationInfo(com.linyk3.thrift.apply.params.ListApplicationInfoParams listApplicationInfoParams) throws org.apache.thrift.TException
    {
      listApplicationInfo_args args = new listApplicationInfo_args();
      args.setListApplicationInfoParams(listApplicationInfoParams);
      sendBase("listApplicationInfo", args);
    }

    public List<ApplicationInfo> recv_listApplicationInfo() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      listApplicationInfo_result result = new listApplicationInfo_result();
      receiveBase(result, "listApplicationInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applyException != null) {
        throw result.applyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listApplicationInfo failed: unknown result");
    }

    public ApplicationInfo updateApplicationInfo(ApplicationInfo applicationInfo) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      send_updateApplicationInfo(applicationInfo);
      return recv_updateApplicationInfo();
    }

    public void send_updateApplicationInfo(ApplicationInfo applicationInfo) throws org.apache.thrift.TException
    {
      updateApplicationInfo_args args = new updateApplicationInfo_args();
      args.setApplicationInfo(applicationInfo);
      sendBase("updateApplicationInfo", args);
    }

    public ApplicationInfo recv_updateApplicationInfo() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      updateApplicationInfo_result result = new updateApplicationInfo_result();
      receiveBase(result, "updateApplicationInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applyException != null) {
        throw result.applyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateApplicationInfo failed: unknown result");
    }

    public ApplicationInfo deleteApplicationInfo(String _id) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      send_deleteApplicationInfo(_id);
      return recv_deleteApplicationInfo();
    }

    public void send_deleteApplicationInfo(String _id) throws org.apache.thrift.TException
    {
      deleteApplicationInfo_args args = new deleteApplicationInfo_args();
      args.set_id(_id);
      sendBase("deleteApplicationInfo", args);
    }

    public ApplicationInfo recv_deleteApplicationInfo() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      deleteApplicationInfo_result result = new deleteApplicationInfo_result();
      receiveBase(result, "deleteApplicationInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applyException != null) {
        throw result.applyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteApplicationInfo failed: unknown result");
    }

    public TeachinInfo findTeachinInfo(com.linyk3.thrift.apply.params.FindTeachinInfoParams findTeachinInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      send_findTeachinInfo(findTeachinInfoParams);
      return recv_findTeachinInfo();
    }

    public void send_findTeachinInfo(com.linyk3.thrift.apply.params.FindTeachinInfoParams findTeachinInfoParams) throws org.apache.thrift.TException
    {
      findTeachinInfo_args args = new findTeachinInfo_args();
      args.setFindTeachinInfoParams(findTeachinInfoParams);
      sendBase("findTeachinInfo", args);
    }

    public TeachinInfo recv_findTeachinInfo() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      findTeachinInfo_result result = new findTeachinInfo_result();
      receiveBase(result, "findTeachinInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applyException != null) {
        throw result.applyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findTeachinInfo failed: unknown result");
    }

    public List<TeachinInfo> listTeachinInfo(com.linyk3.thrift.apply.params.ListTeachinInfoParams listTeachinInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      send_listTeachinInfo(listTeachinInfoParams);
      return recv_listTeachinInfo();
    }

    public void send_listTeachinInfo(com.linyk3.thrift.apply.params.ListTeachinInfoParams listTeachinInfoParams) throws org.apache.thrift.TException
    {
      listTeachinInfo_args args = new listTeachinInfo_args();
      args.setListTeachinInfoParams(listTeachinInfoParams);
      sendBase("listTeachinInfo", args);
    }

    public List<TeachinInfo> recv_listTeachinInfo() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      listTeachinInfo_result result = new listTeachinInfo_result();
      receiveBase(result, "listTeachinInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applyException != null) {
        throw result.applyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listTeachinInfo failed: unknown result");
    }

    public TeachinInfo updateTeachinInfo(TeachinInfo teachinInfo) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      send_updateTeachinInfo(teachinInfo);
      return recv_updateTeachinInfo();
    }

    public void send_updateTeachinInfo(TeachinInfo teachinInfo) throws org.apache.thrift.TException
    {
      updateTeachinInfo_args args = new updateTeachinInfo_args();
      args.setTeachinInfo(teachinInfo);
      sendBase("updateTeachinInfo", args);
    }

    public TeachinInfo recv_updateTeachinInfo() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      updateTeachinInfo_result result = new updateTeachinInfo_result();
      receiveBase(result, "updateTeachinInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applyException != null) {
        throw result.applyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateTeachinInfo failed: unknown result");
    }

    public TeachinInfo deleteTeachinInfo(String _id) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      send_deleteTeachinInfo(_id);
      return recv_deleteTeachinInfo();
    }

    public void send_deleteTeachinInfo(String _id) throws org.apache.thrift.TException
    {
      deleteTeachinInfo_args args = new deleteTeachinInfo_args();
      args.set_id(_id);
      sendBase("deleteTeachinInfo", args);
    }

    public TeachinInfo recv_deleteTeachinInfo() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      deleteTeachinInfo_result result = new deleteTeachinInfo_result();
      receiveBase(result, "deleteTeachinInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applyException != null) {
        throw result.applyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteTeachinInfo failed: unknown result");
    }

    public ExaminationInfo findExaminationInfo(com.linyk3.thrift.apply.params.FindExaminationInfoParams findExaminationInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      send_findExaminationInfo(findExaminationInfoParams);
      return recv_findExaminationInfo();
    }

    public void send_findExaminationInfo(com.linyk3.thrift.apply.params.FindExaminationInfoParams findExaminationInfoParams) throws org.apache.thrift.TException
    {
      findExaminationInfo_args args = new findExaminationInfo_args();
      args.setFindExaminationInfoParams(findExaminationInfoParams);
      sendBase("findExaminationInfo", args);
    }

    public ExaminationInfo recv_findExaminationInfo() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      findExaminationInfo_result result = new findExaminationInfo_result();
      receiveBase(result, "findExaminationInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applyException != null) {
        throw result.applyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findExaminationInfo failed: unknown result");
    }

    public List<ExaminationInfo> listExaminationInfo(com.linyk3.thrift.apply.params.ListExaminationInfoParams listExaminationInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      send_listExaminationInfo(listExaminationInfoParams);
      return recv_listExaminationInfo();
    }

    public void send_listExaminationInfo(com.linyk3.thrift.apply.params.ListExaminationInfoParams listExaminationInfoParams) throws org.apache.thrift.TException
    {
      listExaminationInfo_args args = new listExaminationInfo_args();
      args.setListExaminationInfoParams(listExaminationInfoParams);
      sendBase("listExaminationInfo", args);
    }

    public List<ExaminationInfo> recv_listExaminationInfo() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      listExaminationInfo_result result = new listExaminationInfo_result();
      receiveBase(result, "listExaminationInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applyException != null) {
        throw result.applyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listExaminationInfo failed: unknown result");
    }

    public ExaminationInfo updateExaminationInfo(ExaminationInfo examinationInfo) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      send_updateExaminationInfo(examinationInfo);
      return recv_updateExaminationInfo();
    }

    public void send_updateExaminationInfo(ExaminationInfo examinationInfo) throws org.apache.thrift.TException
    {
      updateExaminationInfo_args args = new updateExaminationInfo_args();
      args.setExaminationInfo(examinationInfo);
      sendBase("updateExaminationInfo", args);
    }

    public ExaminationInfo recv_updateExaminationInfo() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      updateExaminationInfo_result result = new updateExaminationInfo_result();
      receiveBase(result, "updateExaminationInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applyException != null) {
        throw result.applyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateExaminationInfo failed: unknown result");
    }

    public ExaminationInfo deleteExaminationInfo(String _id) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      send_deleteExaminationInfo(_id);
      return recv_deleteExaminationInfo();
    }

    public void send_deleteExaminationInfo(String _id) throws org.apache.thrift.TException
    {
      deleteExaminationInfo_args args = new deleteExaminationInfo_args();
      args.set_id(_id);
      sendBase("deleteExaminationInfo", args);
    }

    public ExaminationInfo recv_deleteExaminationInfo() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      deleteExaminationInfo_result result = new deleteExaminationInfo_result();
      receiveBase(result, "deleteExaminationInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applyException != null) {
        throw result.applyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteExaminationInfo failed: unknown result");
    }

    public InterviewInfo findInterviewInfo(com.linyk3.thrift.apply.params.FindInterviewInfoParams findInterviewInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      send_findInterviewInfo(findInterviewInfoParams);
      return recv_findInterviewInfo();
    }

    public void send_findInterviewInfo(com.linyk3.thrift.apply.params.FindInterviewInfoParams findInterviewInfoParams) throws org.apache.thrift.TException
    {
      findInterviewInfo_args args = new findInterviewInfo_args();
      args.setFindInterviewInfoParams(findInterviewInfoParams);
      sendBase("findInterviewInfo", args);
    }

    public InterviewInfo recv_findInterviewInfo() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      findInterviewInfo_result result = new findInterviewInfo_result();
      receiveBase(result, "findInterviewInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applyException != null) {
        throw result.applyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findInterviewInfo failed: unknown result");
    }

    public List<InterviewInfo> listInterviewInfo(com.linyk3.thrift.apply.params.ListInterviewInfoParams listInterviewInfoParams) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      send_listInterviewInfo(listInterviewInfoParams);
      return recv_listInterviewInfo();
    }

    public void send_listInterviewInfo(com.linyk3.thrift.apply.params.ListInterviewInfoParams listInterviewInfoParams) throws org.apache.thrift.TException
    {
      listInterviewInfo_args args = new listInterviewInfo_args();
      args.setListInterviewInfoParams(listInterviewInfoParams);
      sendBase("listInterviewInfo", args);
    }

    public List<InterviewInfo> recv_listInterviewInfo() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      listInterviewInfo_result result = new listInterviewInfo_result();
      receiveBase(result, "listInterviewInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applyException != null) {
        throw result.applyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listInterviewInfo failed: unknown result");
    }

    public InterviewInfo updateInterviewInfo(InterviewInfo interviewInfo) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      send_updateInterviewInfo(interviewInfo);
      return recv_updateInterviewInfo();
    }

    public void send_updateInterviewInfo(InterviewInfo interviewInfo) throws org.apache.thrift.TException
    {
      updateInterviewInfo_args args = new updateInterviewInfo_args();
      args.setInterviewInfo(interviewInfo);
      sendBase("updateInterviewInfo", args);
    }

    public InterviewInfo recv_updateInterviewInfo() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      updateInterviewInfo_result result = new updateInterviewInfo_result();
      receiveBase(result, "updateInterviewInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applyException != null) {
        throw result.applyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateInterviewInfo failed: unknown result");
    }

    public InterviewInfo deleteInterviewInfo(String _id) throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      send_deleteInterviewInfo(_id);
      return recv_deleteInterviewInfo();
    }

    public void send_deleteInterviewInfo(String _id) throws org.apache.thrift.TException
    {
      deleteInterviewInfo_args args = new deleteInterviewInfo_args();
      args.set_id(_id);
      sendBase("deleteInterviewInfo", args);
    }

    public InterviewInfo recv_deleteInterviewInfo() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException
    {
      deleteInterviewInfo_result result = new deleteInterviewInfo_result();
      receiveBase(result, "deleteInterviewInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.applyException != null) {
        throw result.applyException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteInterviewInfo failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void findUserInfo(com.linyk3.thrift.apply.params.FindUserInfoParams findUserInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUserInfo_call method_call = new findUserInfo_call(findUserInfoParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUserInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.linyk3.thrift.apply.params.FindUserInfoParams findUserInfoParams;
      public findUserInfo_call(com.linyk3.thrift.apply.params.FindUserInfoParams findUserInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.findUserInfoParams = findUserInfoParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUserInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUserInfo_args args = new findUserInfo_args();
        args.setFindUserInfoParams(findUserInfoParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UserInfo getResult() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUserInfo();
      }
    }

    public void listUserInfo(com.linyk3.thrift.apply.params.ListUserInfoParams listUserInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listUserInfo_call method_call = new listUserInfo_call(listUserInfoParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listUserInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.linyk3.thrift.apply.params.ListUserInfoParams listUserInfoParams;
      public listUserInfo_call(com.linyk3.thrift.apply.params.ListUserInfoParams listUserInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.listUserInfoParams = listUserInfoParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listUserInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listUserInfo_args args = new listUserInfo_args();
        args.setListUserInfoParams(listUserInfoParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<UserInfo> getResult() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listUserInfo();
      }
    }

    public void findPersonalInfo(com.linyk3.thrift.apply.params.FindPersonalInfoParams findPersonalInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findPersonalInfo_call method_call = new findPersonalInfo_call(findPersonalInfoParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findPersonalInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.linyk3.thrift.apply.params.FindPersonalInfoParams findPersonalInfoParams;
      public findPersonalInfo_call(com.linyk3.thrift.apply.params.FindPersonalInfoParams findPersonalInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.findPersonalInfoParams = findPersonalInfoParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findPersonalInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findPersonalInfo_args args = new findPersonalInfo_args();
        args.setFindPersonalInfoParams(findPersonalInfoParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PersonalInfo getResult() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findPersonalInfo();
      }
    }

    public void listPersonalInfo(com.linyk3.thrift.apply.params.ListPersonalInfoParams listPersonalInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listPersonalInfo_call method_call = new listPersonalInfo_call(listPersonalInfoParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listPersonalInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.linyk3.thrift.apply.params.ListPersonalInfoParams listPersonalInfoParams;
      public listPersonalInfo_call(com.linyk3.thrift.apply.params.ListPersonalInfoParams listPersonalInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.listPersonalInfoParams = listPersonalInfoParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listPersonalInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listPersonalInfo_args args = new listPersonalInfo_args();
        args.setListPersonalInfoParams(listPersonalInfoParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<PersonalInfo> getResult() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listPersonalInfo();
      }
    }

    public void updatePersonalInfo(PersonalInfo personalInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updatePersonalInfo_call method_call = new updatePersonalInfo_call(personalInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updatePersonalInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PersonalInfo personalInfo;
      public updatePersonalInfo_call(PersonalInfo personalInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.personalInfo = personalInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updatePersonalInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updatePersonalInfo_args args = new updatePersonalInfo_args();
        args.setPersonalInfo(personalInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PersonalInfo getResult() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updatePersonalInfo();
      }
    }

    public void deletePersonalInfo(String _id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deletePersonalInfo_call method_call = new deletePersonalInfo_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deletePersonalInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String _id;
      public deletePersonalInfo_call(String _id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deletePersonalInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deletePersonalInfo_args args = new deletePersonalInfo_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PersonalInfo getResult() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deletePersonalInfo();
      }
    }

    public void findCompanyInfo(com.linyk3.thrift.apply.params.FindCompanyInfoParams findCompanyInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findCompanyInfo_call method_call = new findCompanyInfo_call(findCompanyInfoParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findCompanyInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.linyk3.thrift.apply.params.FindCompanyInfoParams findCompanyInfoParams;
      public findCompanyInfo_call(com.linyk3.thrift.apply.params.FindCompanyInfoParams findCompanyInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.findCompanyInfoParams = findCompanyInfoParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findCompanyInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findCompanyInfo_args args = new findCompanyInfo_args();
        args.setFindCompanyInfoParams(findCompanyInfoParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CompanyInfo getResult() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findCompanyInfo();
      }
    }

    public void listCompanyInfo(com.linyk3.thrift.apply.params.ListCompanyInfoParams listCompanyInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listCompanyInfo_call method_call = new listCompanyInfo_call(listCompanyInfoParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listCompanyInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.linyk3.thrift.apply.params.ListCompanyInfoParams listCompanyInfoParams;
      public listCompanyInfo_call(com.linyk3.thrift.apply.params.ListCompanyInfoParams listCompanyInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.listCompanyInfoParams = listCompanyInfoParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listCompanyInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listCompanyInfo_args args = new listCompanyInfo_args();
        args.setListCompanyInfoParams(listCompanyInfoParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CompanyInfo> getResult() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listCompanyInfo();
      }
    }

    public void updateCompanyInfo(CompanyInfo companyInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateCompanyInfo_call method_call = new updateCompanyInfo_call(companyInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateCompanyInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CompanyInfo companyInfo;
      public updateCompanyInfo_call(CompanyInfo companyInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.companyInfo = companyInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCompanyInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateCompanyInfo_args args = new updateCompanyInfo_args();
        args.setCompanyInfo(companyInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CompanyInfo getResult() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateCompanyInfo();
      }
    }

    public void deleteCompanyInfo(String _id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteCompanyInfo_call method_call = new deleteCompanyInfo_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteCompanyInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String _id;
      public deleteCompanyInfo_call(String _id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteCompanyInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteCompanyInfo_args args = new deleteCompanyInfo_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CompanyInfo getResult() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteCompanyInfo();
      }
    }

    public void findEmployInfo(com.linyk3.thrift.apply.params.FindEmployInfoParams findEmployInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findEmployInfo_call method_call = new findEmployInfo_call(findEmployInfoParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findEmployInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.linyk3.thrift.apply.params.FindEmployInfoParams findEmployInfoParams;
      public findEmployInfo_call(com.linyk3.thrift.apply.params.FindEmployInfoParams findEmployInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.findEmployInfoParams = findEmployInfoParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findEmployInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findEmployInfo_args args = new findEmployInfo_args();
        args.setFindEmployInfoParams(findEmployInfoParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public EmployInfo getResult() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findEmployInfo();
      }
    }

    public void listEmployInfo(com.linyk3.thrift.apply.params.ListEmployInfoParams listEmployInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listEmployInfo_call method_call = new listEmployInfo_call(listEmployInfoParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listEmployInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.linyk3.thrift.apply.params.ListEmployInfoParams listEmployInfoParams;
      public listEmployInfo_call(com.linyk3.thrift.apply.params.ListEmployInfoParams listEmployInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.listEmployInfoParams = listEmployInfoParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listEmployInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listEmployInfo_args args = new listEmployInfo_args();
        args.setListEmployInfoParams(listEmployInfoParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<EmployInfo> getResult() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listEmployInfo();
      }
    }

    public void updateEmployInfo(EmployInfo employInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateEmployInfo_call method_call = new updateEmployInfo_call(employInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateEmployInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private EmployInfo employInfo;
      public updateEmployInfo_call(EmployInfo employInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.employInfo = employInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateEmployInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateEmployInfo_args args = new updateEmployInfo_args();
        args.setEmployInfo(employInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public EmployInfo getResult() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateEmployInfo();
      }
    }

    public void deleteEmployInfo(String _id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteEmployInfo_call method_call = new deleteEmployInfo_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteEmployInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String _id;
      public deleteEmployInfo_call(String _id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteEmployInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteEmployInfo_args args = new deleteEmployInfo_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public EmployInfo getResult() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteEmployInfo();
      }
    }

    public void findApplicationInfo(com.linyk3.thrift.apply.params.FindApplicationInfoParams findApplicationInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findApplicationInfo_call method_call = new findApplicationInfo_call(findApplicationInfoParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findApplicationInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.linyk3.thrift.apply.params.FindApplicationInfoParams findApplicationInfoParams;
      public findApplicationInfo_call(com.linyk3.thrift.apply.params.FindApplicationInfoParams findApplicationInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.findApplicationInfoParams = findApplicationInfoParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findApplicationInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findApplicationInfo_args args = new findApplicationInfo_args();
        args.setFindApplicationInfoParams(findApplicationInfoParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ApplicationInfo getResult() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findApplicationInfo();
      }
    }

    public void listApplicationInfo(com.linyk3.thrift.apply.params.ListApplicationInfoParams listApplicationInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listApplicationInfo_call method_call = new listApplicationInfo_call(listApplicationInfoParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listApplicationInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.linyk3.thrift.apply.params.ListApplicationInfoParams listApplicationInfoParams;
      public listApplicationInfo_call(com.linyk3.thrift.apply.params.ListApplicationInfoParams listApplicationInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.listApplicationInfoParams = listApplicationInfoParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listApplicationInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listApplicationInfo_args args = new listApplicationInfo_args();
        args.setListApplicationInfoParams(listApplicationInfoParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ApplicationInfo> getResult() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listApplicationInfo();
      }
    }

    public void updateApplicationInfo(ApplicationInfo applicationInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateApplicationInfo_call method_call = new updateApplicationInfo_call(applicationInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateApplicationInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ApplicationInfo applicationInfo;
      public updateApplicationInfo_call(ApplicationInfo applicationInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationInfo = applicationInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateApplicationInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateApplicationInfo_args args = new updateApplicationInfo_args();
        args.setApplicationInfo(applicationInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ApplicationInfo getResult() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateApplicationInfo();
      }
    }

    public void deleteApplicationInfo(String _id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteApplicationInfo_call method_call = new deleteApplicationInfo_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteApplicationInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String _id;
      public deleteApplicationInfo_call(String _id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteApplicationInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteApplicationInfo_args args = new deleteApplicationInfo_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ApplicationInfo getResult() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteApplicationInfo();
      }
    }

    public void findTeachinInfo(com.linyk3.thrift.apply.params.FindTeachinInfoParams findTeachinInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findTeachinInfo_call method_call = new findTeachinInfo_call(findTeachinInfoParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findTeachinInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.linyk3.thrift.apply.params.FindTeachinInfoParams findTeachinInfoParams;
      public findTeachinInfo_call(com.linyk3.thrift.apply.params.FindTeachinInfoParams findTeachinInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.findTeachinInfoParams = findTeachinInfoParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findTeachinInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findTeachinInfo_args args = new findTeachinInfo_args();
        args.setFindTeachinInfoParams(findTeachinInfoParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TeachinInfo getResult() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findTeachinInfo();
      }
    }

    public void listTeachinInfo(com.linyk3.thrift.apply.params.ListTeachinInfoParams listTeachinInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listTeachinInfo_call method_call = new listTeachinInfo_call(listTeachinInfoParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listTeachinInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.linyk3.thrift.apply.params.ListTeachinInfoParams listTeachinInfoParams;
      public listTeachinInfo_call(com.linyk3.thrift.apply.params.ListTeachinInfoParams listTeachinInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.listTeachinInfoParams = listTeachinInfoParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listTeachinInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listTeachinInfo_args args = new listTeachinInfo_args();
        args.setListTeachinInfoParams(listTeachinInfoParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TeachinInfo> getResult() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listTeachinInfo();
      }
    }

    public void updateTeachinInfo(TeachinInfo teachinInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateTeachinInfo_call method_call = new updateTeachinInfo_call(teachinInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateTeachinInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TeachinInfo teachinInfo;
      public updateTeachinInfo_call(TeachinInfo teachinInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.teachinInfo = teachinInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateTeachinInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateTeachinInfo_args args = new updateTeachinInfo_args();
        args.setTeachinInfo(teachinInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TeachinInfo getResult() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateTeachinInfo();
      }
    }

    public void deleteTeachinInfo(String _id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteTeachinInfo_call method_call = new deleteTeachinInfo_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteTeachinInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String _id;
      public deleteTeachinInfo_call(String _id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteTeachinInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteTeachinInfo_args args = new deleteTeachinInfo_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TeachinInfo getResult() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteTeachinInfo();
      }
    }

    public void findExaminationInfo(com.linyk3.thrift.apply.params.FindExaminationInfoParams findExaminationInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findExaminationInfo_call method_call = new findExaminationInfo_call(findExaminationInfoParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findExaminationInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.linyk3.thrift.apply.params.FindExaminationInfoParams findExaminationInfoParams;
      public findExaminationInfo_call(com.linyk3.thrift.apply.params.FindExaminationInfoParams findExaminationInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.findExaminationInfoParams = findExaminationInfoParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findExaminationInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findExaminationInfo_args args = new findExaminationInfo_args();
        args.setFindExaminationInfoParams(findExaminationInfoParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ExaminationInfo getResult() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findExaminationInfo();
      }
    }

    public void listExaminationInfo(com.linyk3.thrift.apply.params.ListExaminationInfoParams listExaminationInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listExaminationInfo_call method_call = new listExaminationInfo_call(listExaminationInfoParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listExaminationInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.linyk3.thrift.apply.params.ListExaminationInfoParams listExaminationInfoParams;
      public listExaminationInfo_call(com.linyk3.thrift.apply.params.ListExaminationInfoParams listExaminationInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.listExaminationInfoParams = listExaminationInfoParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listExaminationInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listExaminationInfo_args args = new listExaminationInfo_args();
        args.setListExaminationInfoParams(listExaminationInfoParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ExaminationInfo> getResult() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listExaminationInfo();
      }
    }

    public void updateExaminationInfo(ExaminationInfo examinationInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateExaminationInfo_call method_call = new updateExaminationInfo_call(examinationInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateExaminationInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ExaminationInfo examinationInfo;
      public updateExaminationInfo_call(ExaminationInfo examinationInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.examinationInfo = examinationInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateExaminationInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateExaminationInfo_args args = new updateExaminationInfo_args();
        args.setExaminationInfo(examinationInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ExaminationInfo getResult() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateExaminationInfo();
      }
    }

    public void deleteExaminationInfo(String _id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteExaminationInfo_call method_call = new deleteExaminationInfo_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteExaminationInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String _id;
      public deleteExaminationInfo_call(String _id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteExaminationInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteExaminationInfo_args args = new deleteExaminationInfo_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ExaminationInfo getResult() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteExaminationInfo();
      }
    }

    public void findInterviewInfo(com.linyk3.thrift.apply.params.FindInterviewInfoParams findInterviewInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findInterviewInfo_call method_call = new findInterviewInfo_call(findInterviewInfoParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findInterviewInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.linyk3.thrift.apply.params.FindInterviewInfoParams findInterviewInfoParams;
      public findInterviewInfo_call(com.linyk3.thrift.apply.params.FindInterviewInfoParams findInterviewInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.findInterviewInfoParams = findInterviewInfoParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findInterviewInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findInterviewInfo_args args = new findInterviewInfo_args();
        args.setFindInterviewInfoParams(findInterviewInfoParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public InterviewInfo getResult() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findInterviewInfo();
      }
    }

    public void listInterviewInfo(com.linyk3.thrift.apply.params.ListInterviewInfoParams listInterviewInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listInterviewInfo_call method_call = new listInterviewInfo_call(listInterviewInfoParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listInterviewInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.linyk3.thrift.apply.params.ListInterviewInfoParams listInterviewInfoParams;
      public listInterviewInfo_call(com.linyk3.thrift.apply.params.ListInterviewInfoParams listInterviewInfoParams, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.listInterviewInfoParams = listInterviewInfoParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listInterviewInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listInterviewInfo_args args = new listInterviewInfo_args();
        args.setListInterviewInfoParams(listInterviewInfoParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<InterviewInfo> getResult() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listInterviewInfo();
      }
    }

    public void updateInterviewInfo(InterviewInfo interviewInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateInterviewInfo_call method_call = new updateInterviewInfo_call(interviewInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateInterviewInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private InterviewInfo interviewInfo;
      public updateInterviewInfo_call(InterviewInfo interviewInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.interviewInfo = interviewInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateInterviewInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateInterviewInfo_args args = new updateInterviewInfo_args();
        args.setInterviewInfo(interviewInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public InterviewInfo getResult() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateInterviewInfo();
      }
    }

    public void deleteInterviewInfo(String _id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteInterviewInfo_call method_call = new deleteInterviewInfo_call(_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteInterviewInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String _id;
      public deleteInterviewInfo_call(String _id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this._id = _id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteInterviewInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteInterviewInfo_args args = new deleteInterviewInfo_args();
        args.set_id(_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public InterviewInfo getResult() throws com.linyk3.thrift.apply.exception.ApplyException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteInterviewInfo();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("findUserInfo", new findUserInfo());
      processMap.put("listUserInfo", new listUserInfo());
      processMap.put("findPersonalInfo", new findPersonalInfo());
      processMap.put("listPersonalInfo", new listPersonalInfo());
      processMap.put("updatePersonalInfo", new updatePersonalInfo());
      processMap.put("deletePersonalInfo", new deletePersonalInfo());
      processMap.put("findCompanyInfo", new findCompanyInfo());
      processMap.put("listCompanyInfo", new listCompanyInfo());
      processMap.put("updateCompanyInfo", new updateCompanyInfo());
      processMap.put("deleteCompanyInfo", new deleteCompanyInfo());
      processMap.put("findEmployInfo", new findEmployInfo());
      processMap.put("listEmployInfo", new listEmployInfo());
      processMap.put("updateEmployInfo", new updateEmployInfo());
      processMap.put("deleteEmployInfo", new deleteEmployInfo());
      processMap.put("findApplicationInfo", new findApplicationInfo());
      processMap.put("listApplicationInfo", new listApplicationInfo());
      processMap.put("updateApplicationInfo", new updateApplicationInfo());
      processMap.put("deleteApplicationInfo", new deleteApplicationInfo());
      processMap.put("findTeachinInfo", new findTeachinInfo());
      processMap.put("listTeachinInfo", new listTeachinInfo());
      processMap.put("updateTeachinInfo", new updateTeachinInfo());
      processMap.put("deleteTeachinInfo", new deleteTeachinInfo());
      processMap.put("findExaminationInfo", new findExaminationInfo());
      processMap.put("listExaminationInfo", new listExaminationInfo());
      processMap.put("updateExaminationInfo", new updateExaminationInfo());
      processMap.put("deleteExaminationInfo", new deleteExaminationInfo());
      processMap.put("findInterviewInfo", new findInterviewInfo());
      processMap.put("listInterviewInfo", new listInterviewInfo());
      processMap.put("updateInterviewInfo", new updateInterviewInfo());
      processMap.put("deleteInterviewInfo", new deleteInterviewInfo());
      return processMap;
    }

    public static class findUserInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUserInfo_args> {
      public findUserInfo() {
        super("findUserInfo");
      }

      public findUserInfo_args getEmptyArgsInstance() {
        return new findUserInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findUserInfo_result getResult(I iface, findUserInfo_args args) throws org.apache.thrift.TException {
        findUserInfo_result result = new findUserInfo_result();
        try {
          result.success = iface.findUserInfo(args.findUserInfoParams);
        } catch (com.linyk3.thrift.apply.exception.ApplyException applyException) {
          result.applyException = applyException;
        }
        return result;
      }
    }

    public static class listUserInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listUserInfo_args> {
      public listUserInfo() {
        super("listUserInfo");
      }

      public listUserInfo_args getEmptyArgsInstance() {
        return new listUserInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listUserInfo_result getResult(I iface, listUserInfo_args args) throws org.apache.thrift.TException {
        listUserInfo_result result = new listUserInfo_result();
        try {
          result.success = iface.listUserInfo(args.listUserInfoParams);
        } catch (com.linyk3.thrift.apply.exception.ApplyException applyException) {
          result.applyException = applyException;
        }
        return result;
      }
    }

    public static class findPersonalInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findPersonalInfo_args> {
      public findPersonalInfo() {
        super("findPersonalInfo");
      }

      public findPersonalInfo_args getEmptyArgsInstance() {
        return new findPersonalInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findPersonalInfo_result getResult(I iface, findPersonalInfo_args args) throws org.apache.thrift.TException {
        findPersonalInfo_result result = new findPersonalInfo_result();
        try {
          result.success = iface.findPersonalInfo(args.findPersonalInfoParams);
        } catch (com.linyk3.thrift.apply.exception.ApplyException applyException) {
          result.applyException = applyException;
        }
        return result;
      }
    }

    public static class listPersonalInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listPersonalInfo_args> {
      public listPersonalInfo() {
        super("listPersonalInfo");
      }

      public listPersonalInfo_args getEmptyArgsInstance() {
        return new listPersonalInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listPersonalInfo_result getResult(I iface, listPersonalInfo_args args) throws org.apache.thrift.TException {
        listPersonalInfo_result result = new listPersonalInfo_result();
        try {
          result.success = iface.listPersonalInfo(args.listPersonalInfoParams);
        } catch (com.linyk3.thrift.apply.exception.ApplyException applyException) {
          result.applyException = applyException;
        }
        return result;
      }
    }

    public static class updatePersonalInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updatePersonalInfo_args> {
      public updatePersonalInfo() {
        super("updatePersonalInfo");
      }

      public updatePersonalInfo_args getEmptyArgsInstance() {
        return new updatePersonalInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updatePersonalInfo_result getResult(I iface, updatePersonalInfo_args args) throws org.apache.thrift.TException {
        updatePersonalInfo_result result = new updatePersonalInfo_result();
        try {
          result.success = iface.updatePersonalInfo(args.personalInfo);
        } catch (com.linyk3.thrift.apply.exception.ApplyException applyException) {
          result.applyException = applyException;
        }
        return result;
      }
    }

    public static class deletePersonalInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deletePersonalInfo_args> {
      public deletePersonalInfo() {
        super("deletePersonalInfo");
      }

      public deletePersonalInfo_args getEmptyArgsInstance() {
        return new deletePersonalInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deletePersonalInfo_result getResult(I iface, deletePersonalInfo_args args) throws org.apache.thrift.TException {
        deletePersonalInfo_result result = new deletePersonalInfo_result();
        try {
          result.success = iface.deletePersonalInfo(args._id);
        } catch (com.linyk3.thrift.apply.exception.ApplyException applyException) {
          result.applyException = applyException;
        }
        return result;
      }
    }

    public static class findCompanyInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findCompanyInfo_args> {
      public findCompanyInfo() {
        super("findCompanyInfo");
      }

      public findCompanyInfo_args getEmptyArgsInstance() {
        return new findCompanyInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findCompanyInfo_result getResult(I iface, findCompanyInfo_args args) throws org.apache.thrift.TException {
        findCompanyInfo_result result = new findCompanyInfo_result();
        try {
          result.success = iface.findCompanyInfo(args.findCompanyInfoParams);
        } catch (com.linyk3.thrift.apply.exception.ApplyException applyException) {
          result.applyException = applyException;
        }
        return result;
      }
    }

    public static class listCompanyInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listCompanyInfo_args> {
      public listCompanyInfo() {
        super("listCompanyInfo");
      }

      public listCompanyInfo_args getEmptyArgsInstance() {
        return new listCompanyInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listCompanyInfo_result getResult(I iface, listCompanyInfo_args args) throws org.apache.thrift.TException {
        listCompanyInfo_result result = new listCompanyInfo_result();
        try {
          result.success = iface.listCompanyInfo(args.listCompanyInfoParams);
        } catch (com.linyk3.thrift.apply.exception.ApplyException applyException) {
          result.applyException = applyException;
        }
        return result;
      }
    }

    public static class updateCompanyInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCompanyInfo_args> {
      public updateCompanyInfo() {
        super("updateCompanyInfo");
      }

      public updateCompanyInfo_args getEmptyArgsInstance() {
        return new updateCompanyInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateCompanyInfo_result getResult(I iface, updateCompanyInfo_args args) throws org.apache.thrift.TException {
        updateCompanyInfo_result result = new updateCompanyInfo_result();
        try {
          result.success = iface.updateCompanyInfo(args.companyInfo);
        } catch (com.linyk3.thrift.apply.exception.ApplyException applyException) {
          result.applyException = applyException;
        }
        return result;
      }
    }

    public static class deleteCompanyInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteCompanyInfo_args> {
      public deleteCompanyInfo() {
        super("deleteCompanyInfo");
      }

      public deleteCompanyInfo_args getEmptyArgsInstance() {
        return new deleteCompanyInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteCompanyInfo_result getResult(I iface, deleteCompanyInfo_args args) throws org.apache.thrift.TException {
        deleteCompanyInfo_result result = new deleteCompanyInfo_result();
        try {
          result.success = iface.deleteCompanyInfo(args._id);
        } catch (com.linyk3.thrift.apply.exception.ApplyException applyException) {
          result.applyException = applyException;
        }
        return result;
      }
    }

    public static class findEmployInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findEmployInfo_args> {
      public findEmployInfo() {
        super("findEmployInfo");
      }

      public findEmployInfo_args getEmptyArgsInstance() {
        return new findEmployInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findEmployInfo_result getResult(I iface, findEmployInfo_args args) throws org.apache.thrift.TException {
        findEmployInfo_result result = new findEmployInfo_result();
        try {
          result.success = iface.findEmployInfo(args.findEmployInfoParams);
        } catch (com.linyk3.thrift.apply.exception.ApplyException applyException) {
          result.applyException = applyException;
        }
        return result;
      }
    }

    public static class listEmployInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listEmployInfo_args> {
      public listEmployInfo() {
        super("listEmployInfo");
      }

      public listEmployInfo_args getEmptyArgsInstance() {
        return new listEmployInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listEmployInfo_result getResult(I iface, listEmployInfo_args args) throws org.apache.thrift.TException {
        listEmployInfo_result result = new listEmployInfo_result();
        try {
          result.success = iface.listEmployInfo(args.listEmployInfoParams);
        } catch (com.linyk3.thrift.apply.exception.ApplyException applyException) {
          result.applyException = applyException;
        }
        return result;
      }
    }

    public static class updateEmployInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateEmployInfo_args> {
      public updateEmployInfo() {
        super("updateEmployInfo");
      }

      public updateEmployInfo_args getEmptyArgsInstance() {
        return new updateEmployInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateEmployInfo_result getResult(I iface, updateEmployInfo_args args) throws org.apache.thrift.TException {
        updateEmployInfo_result result = new updateEmployInfo_result();
        try {
          result.success = iface.updateEmployInfo(args.employInfo);
        } catch (com.linyk3.thrift.apply.exception.ApplyException applyException) {
          result.applyException = applyException;
        }
        return result;
      }
    }

    public static class deleteEmployInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteEmployInfo_args> {
      public deleteEmployInfo() {
        super("deleteEmployInfo");
      }

      public deleteEmployInfo_args getEmptyArgsInstance() {
        return new deleteEmployInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteEmployInfo_result getResult(I iface, deleteEmployInfo_args args) throws org.apache.thrift.TException {
        deleteEmployInfo_result result = new deleteEmployInfo_result();
        try {
          result.success = iface.deleteEmployInfo(args._id);
        } catch (com.linyk3.thrift.apply.exception.ApplyException applyException) {
          result.applyException = applyException;
        }
        return result;
      }
    }

    public static class findApplicationInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findApplicationInfo_args> {
      public findApplicationInfo() {
        super("findApplicationInfo");
      }

      public findApplicationInfo_args getEmptyArgsInstance() {
        return new findApplicationInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findApplicationInfo_result getResult(I iface, findApplicationInfo_args args) throws org.apache.thrift.TException {
        findApplicationInfo_result result = new findApplicationInfo_result();
        try {
          result.success = iface.findApplicationInfo(args.findApplicationInfoParams);
        } catch (com.linyk3.thrift.apply.exception.ApplyException applyException) {
          result.applyException = applyException;
        }
        return result;
      }
    }

    public static class listApplicationInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listApplicationInfo_args> {
      public listApplicationInfo() {
        super("listApplicationInfo");
      }

      public listApplicationInfo_args getEmptyArgsInstance() {
        return new listApplicationInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listApplicationInfo_result getResult(I iface, listApplicationInfo_args args) throws org.apache.thrift.TException {
        listApplicationInfo_result result = new listApplicationInfo_result();
        try {
          result.success = iface.listApplicationInfo(args.listApplicationInfoParams);
        } catch (com.linyk3.thrift.apply.exception.ApplyException applyException) {
          result.applyException = applyException;
        }
        return result;
      }
    }

    public static class updateApplicationInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateApplicationInfo_args> {
      public updateApplicationInfo() {
        super("updateApplicationInfo");
      }

      public updateApplicationInfo_args getEmptyArgsInstance() {
        return new updateApplicationInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateApplicationInfo_result getResult(I iface, updateApplicationInfo_args args) throws org.apache.thrift.TException {
        updateApplicationInfo_result result = new updateApplicationInfo_result();
        try {
          result.success = iface.updateApplicationInfo(args.applicationInfo);
        } catch (com.linyk3.thrift.apply.exception.ApplyException applyException) {
          result.applyException = applyException;
        }
        return result;
      }
    }

    public static class deleteApplicationInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteApplicationInfo_args> {
      public deleteApplicationInfo() {
        super("deleteApplicationInfo");
      }

      public deleteApplicationInfo_args getEmptyArgsInstance() {
        return new deleteApplicationInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteApplicationInfo_result getResult(I iface, deleteApplicationInfo_args args) throws org.apache.thrift.TException {
        deleteApplicationInfo_result result = new deleteApplicationInfo_result();
        try {
          result.success = iface.deleteApplicationInfo(args._id);
        } catch (com.linyk3.thrift.apply.exception.ApplyException applyException) {
          result.applyException = applyException;
        }
        return result;
      }
    }

    public static class findTeachinInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findTeachinInfo_args> {
      public findTeachinInfo() {
        super("findTeachinInfo");
      }

      public findTeachinInfo_args getEmptyArgsInstance() {
        return new findTeachinInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findTeachinInfo_result getResult(I iface, findTeachinInfo_args args) throws org.apache.thrift.TException {
        findTeachinInfo_result result = new findTeachinInfo_result();
        try {
          result.success = iface.findTeachinInfo(args.findTeachinInfoParams);
        } catch (com.linyk3.thrift.apply.exception.ApplyException applyException) {
          result.applyException = applyException;
        }
        return result;
      }
    }

    public static class listTeachinInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listTeachinInfo_args> {
      public listTeachinInfo() {
        super("listTeachinInfo");
      }

      public listTeachinInfo_args getEmptyArgsInstance() {
        return new listTeachinInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listTeachinInfo_result getResult(I iface, listTeachinInfo_args args) throws org.apache.thrift.TException {
        listTeachinInfo_result result = new listTeachinInfo_result();
        try {
          result.success = iface.listTeachinInfo(args.listTeachinInfoParams);
        } catch (com.linyk3.thrift.apply.exception.ApplyException applyException) {
          result.applyException = applyException;
        }
        return result;
      }
    }

    public static class updateTeachinInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateTeachinInfo_args> {
      public updateTeachinInfo() {
        super("updateTeachinInfo");
      }

      public updateTeachinInfo_args getEmptyArgsInstance() {
        return new updateTeachinInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateTeachinInfo_result getResult(I iface, updateTeachinInfo_args args) throws org.apache.thrift.TException {
        updateTeachinInfo_result result = new updateTeachinInfo_result();
        try {
          result.success = iface.updateTeachinInfo(args.teachinInfo);
        } catch (com.linyk3.thrift.apply.exception.ApplyException applyException) {
          result.applyException = applyException;
        }
        return result;
      }
    }

    public static class deleteTeachinInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteTeachinInfo_args> {
      public deleteTeachinInfo() {
        super("deleteTeachinInfo");
      }

      public deleteTeachinInfo_args getEmptyArgsInstance() {
        return new deleteTeachinInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteTeachinInfo_result getResult(I iface, deleteTeachinInfo_args args) throws org.apache.thrift.TException {
        deleteTeachinInfo_result result = new deleteTeachinInfo_result();
        try {
          result.success = iface.deleteTeachinInfo(args._id);
        } catch (com.linyk3.thrift.apply.exception.ApplyException applyException) {
          result.applyException = applyException;
        }
        return result;
      }
    }

    public static class findExaminationInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findExaminationInfo_args> {
      public findExaminationInfo() {
        super("findExaminationInfo");
      }

      public findExaminationInfo_args getEmptyArgsInstance() {
        return new findExaminationInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findExaminationInfo_result getResult(I iface, findExaminationInfo_args args) throws org.apache.thrift.TException {
        findExaminationInfo_result result = new findExaminationInfo_result();
        try {
          result.success = iface.findExaminationInfo(args.findExaminationInfoParams);
        } catch (com.linyk3.thrift.apply.exception.ApplyException applyException) {
          result.applyException = applyException;
        }
        return result;
      }
    }

    public static class listExaminationInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listExaminationInfo_args> {
      public listExaminationInfo() {
        super("listExaminationInfo");
      }

      public listExaminationInfo_args getEmptyArgsInstance() {
        return new listExaminationInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listExaminationInfo_result getResult(I iface, listExaminationInfo_args args) throws org.apache.thrift.TException {
        listExaminationInfo_result result = new listExaminationInfo_result();
        try {
          result.success = iface.listExaminationInfo(args.listExaminationInfoParams);
        } catch (com.linyk3.thrift.apply.exception.ApplyException applyException) {
          result.applyException = applyException;
        }
        return result;
      }
    }

    public static class updateExaminationInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateExaminationInfo_args> {
      public updateExaminationInfo() {
        super("updateExaminationInfo");
      }

      public updateExaminationInfo_args getEmptyArgsInstance() {
        return new updateExaminationInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateExaminationInfo_result getResult(I iface, updateExaminationInfo_args args) throws org.apache.thrift.TException {
        updateExaminationInfo_result result = new updateExaminationInfo_result();
        try {
          result.success = iface.updateExaminationInfo(args.examinationInfo);
        } catch (com.linyk3.thrift.apply.exception.ApplyException applyException) {
          result.applyException = applyException;
        }
        return result;
      }
    }

    public static class deleteExaminationInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteExaminationInfo_args> {
      public deleteExaminationInfo() {
        super("deleteExaminationInfo");
      }

      public deleteExaminationInfo_args getEmptyArgsInstance() {
        return new deleteExaminationInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteExaminationInfo_result getResult(I iface, deleteExaminationInfo_args args) throws org.apache.thrift.TException {
        deleteExaminationInfo_result result = new deleteExaminationInfo_result();
        try {
          result.success = iface.deleteExaminationInfo(args._id);
        } catch (com.linyk3.thrift.apply.exception.ApplyException applyException) {
          result.applyException = applyException;
        }
        return result;
      }
    }

    public static class findInterviewInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findInterviewInfo_args> {
      public findInterviewInfo() {
        super("findInterviewInfo");
      }

      public findInterviewInfo_args getEmptyArgsInstance() {
        return new findInterviewInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findInterviewInfo_result getResult(I iface, findInterviewInfo_args args) throws org.apache.thrift.TException {
        findInterviewInfo_result result = new findInterviewInfo_result();
        try {
          result.success = iface.findInterviewInfo(args.findInterviewInfoParams);
        } catch (com.linyk3.thrift.apply.exception.ApplyException applyException) {
          result.applyException = applyException;
        }
        return result;
      }
    }

    public static class listInterviewInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listInterviewInfo_args> {
      public listInterviewInfo() {
        super("listInterviewInfo");
      }

      public listInterviewInfo_args getEmptyArgsInstance() {
        return new listInterviewInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listInterviewInfo_result getResult(I iface, listInterviewInfo_args args) throws org.apache.thrift.TException {
        listInterviewInfo_result result = new listInterviewInfo_result();
        try {
          result.success = iface.listInterviewInfo(args.listInterviewInfoParams);
        } catch (com.linyk3.thrift.apply.exception.ApplyException applyException) {
          result.applyException = applyException;
        }
        return result;
      }
    }

    public static class updateInterviewInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateInterviewInfo_args> {
      public updateInterviewInfo() {
        super("updateInterviewInfo");
      }

      public updateInterviewInfo_args getEmptyArgsInstance() {
        return new updateInterviewInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateInterviewInfo_result getResult(I iface, updateInterviewInfo_args args) throws org.apache.thrift.TException {
        updateInterviewInfo_result result = new updateInterviewInfo_result();
        try {
          result.success = iface.updateInterviewInfo(args.interviewInfo);
        } catch (com.linyk3.thrift.apply.exception.ApplyException applyException) {
          result.applyException = applyException;
        }
        return result;
      }
    }

    public static class deleteInterviewInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteInterviewInfo_args> {
      public deleteInterviewInfo() {
        super("deleteInterviewInfo");
      }

      public deleteInterviewInfo_args getEmptyArgsInstance() {
        return new deleteInterviewInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteInterviewInfo_result getResult(I iface, deleteInterviewInfo_args args) throws org.apache.thrift.TException {
        deleteInterviewInfo_result result = new deleteInterviewInfo_result();
        try {
          result.success = iface.deleteInterviewInfo(args._id);
        } catch (com.linyk3.thrift.apply.exception.ApplyException applyException) {
          result.applyException = applyException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("findUserInfo", new findUserInfo());
      processMap.put("listUserInfo", new listUserInfo());
      processMap.put("findPersonalInfo", new findPersonalInfo());
      processMap.put("listPersonalInfo", new listPersonalInfo());
      processMap.put("updatePersonalInfo", new updatePersonalInfo());
      processMap.put("deletePersonalInfo", new deletePersonalInfo());
      processMap.put("findCompanyInfo", new findCompanyInfo());
      processMap.put("listCompanyInfo", new listCompanyInfo());
      processMap.put("updateCompanyInfo", new updateCompanyInfo());
      processMap.put("deleteCompanyInfo", new deleteCompanyInfo());
      processMap.put("findEmployInfo", new findEmployInfo());
      processMap.put("listEmployInfo", new listEmployInfo());
      processMap.put("updateEmployInfo", new updateEmployInfo());
      processMap.put("deleteEmployInfo", new deleteEmployInfo());
      processMap.put("findApplicationInfo", new findApplicationInfo());
      processMap.put("listApplicationInfo", new listApplicationInfo());
      processMap.put("updateApplicationInfo", new updateApplicationInfo());
      processMap.put("deleteApplicationInfo", new deleteApplicationInfo());
      processMap.put("findTeachinInfo", new findTeachinInfo());
      processMap.put("listTeachinInfo", new listTeachinInfo());
      processMap.put("updateTeachinInfo", new updateTeachinInfo());
      processMap.put("deleteTeachinInfo", new deleteTeachinInfo());
      processMap.put("findExaminationInfo", new findExaminationInfo());
      processMap.put("listExaminationInfo", new listExaminationInfo());
      processMap.put("updateExaminationInfo", new updateExaminationInfo());
      processMap.put("deleteExaminationInfo", new deleteExaminationInfo());
      processMap.put("findInterviewInfo", new findInterviewInfo());
      processMap.put("listInterviewInfo", new listInterviewInfo());
      processMap.put("updateInterviewInfo", new updateInterviewInfo());
      processMap.put("deleteInterviewInfo", new deleteInterviewInfo());
      return processMap;
    }

    public static class findUserInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findUserInfo_args, UserInfo> {
      public findUserInfo() {
        super("findUserInfo");
      }

      public findUserInfo_args getEmptyArgsInstance() {
        return new findUserInfo_args();
      }

      public AsyncMethodCallback<UserInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<UserInfo>() { 
          public void onComplete(UserInfo o) {
            findUserInfo_result result = new findUserInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findUserInfo_result result = new findUserInfo_result();
            if (e instanceof com.linyk3.thrift.apply.exception.ApplyException) {
                        result.applyException = (com.linyk3.thrift.apply.exception.ApplyException) e;
                        result.setApplyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findUserInfo_args args, org.apache.thrift.async.AsyncMethodCallback<UserInfo> resultHandler) throws TException {
        iface.findUserInfo(args.findUserInfoParams,resultHandler);
      }
    }

    public static class listUserInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listUserInfo_args, List<UserInfo>> {
      public listUserInfo() {
        super("listUserInfo");
      }

      public listUserInfo_args getEmptyArgsInstance() {
        return new listUserInfo_args();
      }

      public AsyncMethodCallback<List<UserInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<UserInfo>>() { 
          public void onComplete(List<UserInfo> o) {
            listUserInfo_result result = new listUserInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listUserInfo_result result = new listUserInfo_result();
            if (e instanceof com.linyk3.thrift.apply.exception.ApplyException) {
                        result.applyException = (com.linyk3.thrift.apply.exception.ApplyException) e;
                        result.setApplyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listUserInfo_args args, org.apache.thrift.async.AsyncMethodCallback<List<UserInfo>> resultHandler) throws TException {
        iface.listUserInfo(args.listUserInfoParams,resultHandler);
      }
    }

    public static class findPersonalInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findPersonalInfo_args, PersonalInfo> {
      public findPersonalInfo() {
        super("findPersonalInfo");
      }

      public findPersonalInfo_args getEmptyArgsInstance() {
        return new findPersonalInfo_args();
      }

      public AsyncMethodCallback<PersonalInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PersonalInfo>() { 
          public void onComplete(PersonalInfo o) {
            findPersonalInfo_result result = new findPersonalInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findPersonalInfo_result result = new findPersonalInfo_result();
            if (e instanceof com.linyk3.thrift.apply.exception.ApplyException) {
                        result.applyException = (com.linyk3.thrift.apply.exception.ApplyException) e;
                        result.setApplyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findPersonalInfo_args args, org.apache.thrift.async.AsyncMethodCallback<PersonalInfo> resultHandler) throws TException {
        iface.findPersonalInfo(args.findPersonalInfoParams,resultHandler);
      }
    }

    public static class listPersonalInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listPersonalInfo_args, List<PersonalInfo>> {
      public listPersonalInfo() {
        super("listPersonalInfo");
      }

      public listPersonalInfo_args getEmptyArgsInstance() {
        return new listPersonalInfo_args();
      }

      public AsyncMethodCallback<List<PersonalInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<PersonalInfo>>() { 
          public void onComplete(List<PersonalInfo> o) {
            listPersonalInfo_result result = new listPersonalInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listPersonalInfo_result result = new listPersonalInfo_result();
            if (e instanceof com.linyk3.thrift.apply.exception.ApplyException) {
                        result.applyException = (com.linyk3.thrift.apply.exception.ApplyException) e;
                        result.setApplyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listPersonalInfo_args args, org.apache.thrift.async.AsyncMethodCallback<List<PersonalInfo>> resultHandler) throws TException {
        iface.listPersonalInfo(args.listPersonalInfoParams,resultHandler);
      }
    }

    public static class updatePersonalInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updatePersonalInfo_args, PersonalInfo> {
      public updatePersonalInfo() {
        super("updatePersonalInfo");
      }

      public updatePersonalInfo_args getEmptyArgsInstance() {
        return new updatePersonalInfo_args();
      }

      public AsyncMethodCallback<PersonalInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PersonalInfo>() { 
          public void onComplete(PersonalInfo o) {
            updatePersonalInfo_result result = new updatePersonalInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updatePersonalInfo_result result = new updatePersonalInfo_result();
            if (e instanceof com.linyk3.thrift.apply.exception.ApplyException) {
                        result.applyException = (com.linyk3.thrift.apply.exception.ApplyException) e;
                        result.setApplyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updatePersonalInfo_args args, org.apache.thrift.async.AsyncMethodCallback<PersonalInfo> resultHandler) throws TException {
        iface.updatePersonalInfo(args.personalInfo,resultHandler);
      }
    }

    public static class deletePersonalInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deletePersonalInfo_args, PersonalInfo> {
      public deletePersonalInfo() {
        super("deletePersonalInfo");
      }

      public deletePersonalInfo_args getEmptyArgsInstance() {
        return new deletePersonalInfo_args();
      }

      public AsyncMethodCallback<PersonalInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PersonalInfo>() { 
          public void onComplete(PersonalInfo o) {
            deletePersonalInfo_result result = new deletePersonalInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deletePersonalInfo_result result = new deletePersonalInfo_result();
            if (e instanceof com.linyk3.thrift.apply.exception.ApplyException) {
                        result.applyException = (com.linyk3.thrift.apply.exception.ApplyException) e;
                        result.setApplyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deletePersonalInfo_args args, org.apache.thrift.async.AsyncMethodCallback<PersonalInfo> resultHandler) throws TException {
        iface.deletePersonalInfo(args._id,resultHandler);
      }
    }

    public static class findCompanyInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findCompanyInfo_args, CompanyInfo> {
      public findCompanyInfo() {
        super("findCompanyInfo");
      }

      public findCompanyInfo_args getEmptyArgsInstance() {
        return new findCompanyInfo_args();
      }

      public AsyncMethodCallback<CompanyInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CompanyInfo>() { 
          public void onComplete(CompanyInfo o) {
            findCompanyInfo_result result = new findCompanyInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findCompanyInfo_result result = new findCompanyInfo_result();
            if (e instanceof com.linyk3.thrift.apply.exception.ApplyException) {
                        result.applyException = (com.linyk3.thrift.apply.exception.ApplyException) e;
                        result.setApplyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findCompanyInfo_args args, org.apache.thrift.async.AsyncMethodCallback<CompanyInfo> resultHandler) throws TException {
        iface.findCompanyInfo(args.findCompanyInfoParams,resultHandler);
      }
    }

    public static class listCompanyInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listCompanyInfo_args, List<CompanyInfo>> {
      public listCompanyInfo() {
        super("listCompanyInfo");
      }

      public listCompanyInfo_args getEmptyArgsInstance() {
        return new listCompanyInfo_args();
      }

      public AsyncMethodCallback<List<CompanyInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<CompanyInfo>>() { 
          public void onComplete(List<CompanyInfo> o) {
            listCompanyInfo_result result = new listCompanyInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listCompanyInfo_result result = new listCompanyInfo_result();
            if (e instanceof com.linyk3.thrift.apply.exception.ApplyException) {
                        result.applyException = (com.linyk3.thrift.apply.exception.ApplyException) e;
                        result.setApplyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listCompanyInfo_args args, org.apache.thrift.async.AsyncMethodCallback<List<CompanyInfo>> resultHandler) throws TException {
        iface.listCompanyInfo(args.listCompanyInfoParams,resultHandler);
      }
    }

    public static class updateCompanyInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateCompanyInfo_args, CompanyInfo> {
      public updateCompanyInfo() {
        super("updateCompanyInfo");
      }

      public updateCompanyInfo_args getEmptyArgsInstance() {
        return new updateCompanyInfo_args();
      }

      public AsyncMethodCallback<CompanyInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CompanyInfo>() { 
          public void onComplete(CompanyInfo o) {
            updateCompanyInfo_result result = new updateCompanyInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateCompanyInfo_result result = new updateCompanyInfo_result();
            if (e instanceof com.linyk3.thrift.apply.exception.ApplyException) {
                        result.applyException = (com.linyk3.thrift.apply.exception.ApplyException) e;
                        result.setApplyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateCompanyInfo_args args, org.apache.thrift.async.AsyncMethodCallback<CompanyInfo> resultHandler) throws TException {
        iface.updateCompanyInfo(args.companyInfo,resultHandler);
      }
    }

    public static class deleteCompanyInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteCompanyInfo_args, CompanyInfo> {
      public deleteCompanyInfo() {
        super("deleteCompanyInfo");
      }

      public deleteCompanyInfo_args getEmptyArgsInstance() {
        return new deleteCompanyInfo_args();
      }

      public AsyncMethodCallback<CompanyInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CompanyInfo>() { 
          public void onComplete(CompanyInfo o) {
            deleteCompanyInfo_result result = new deleteCompanyInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteCompanyInfo_result result = new deleteCompanyInfo_result();
            if (e instanceof com.linyk3.thrift.apply.exception.ApplyException) {
                        result.applyException = (com.linyk3.thrift.apply.exception.ApplyException) e;
                        result.setApplyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteCompanyInfo_args args, org.apache.thrift.async.AsyncMethodCallback<CompanyInfo> resultHandler) throws TException {
        iface.deleteCompanyInfo(args._id,resultHandler);
      }
    }

    public static class findEmployInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findEmployInfo_args, EmployInfo> {
      public findEmployInfo() {
        super("findEmployInfo");
      }

      public findEmployInfo_args getEmptyArgsInstance() {
        return new findEmployInfo_args();
      }

      public AsyncMethodCallback<EmployInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<EmployInfo>() { 
          public void onComplete(EmployInfo o) {
            findEmployInfo_result result = new findEmployInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findEmployInfo_result result = new findEmployInfo_result();
            if (e instanceof com.linyk3.thrift.apply.exception.ApplyException) {
                        result.applyException = (com.linyk3.thrift.apply.exception.ApplyException) e;
                        result.setApplyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findEmployInfo_args args, org.apache.thrift.async.AsyncMethodCallback<EmployInfo> resultHandler) throws TException {
        iface.findEmployInfo(args.findEmployInfoParams,resultHandler);
      }
    }

    public static class listEmployInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listEmployInfo_args, List<EmployInfo>> {
      public listEmployInfo() {
        super("listEmployInfo");
      }

      public listEmployInfo_args getEmptyArgsInstance() {
        return new listEmployInfo_args();
      }

      public AsyncMethodCallback<List<EmployInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<EmployInfo>>() { 
          public void onComplete(List<EmployInfo> o) {
            listEmployInfo_result result = new listEmployInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listEmployInfo_result result = new listEmployInfo_result();
            if (e instanceof com.linyk3.thrift.apply.exception.ApplyException) {
                        result.applyException = (com.linyk3.thrift.apply.exception.ApplyException) e;
                        result.setApplyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listEmployInfo_args args, org.apache.thrift.async.AsyncMethodCallback<List<EmployInfo>> resultHandler) throws TException {
        iface.listEmployInfo(args.listEmployInfoParams,resultHandler);
      }
    }

    public static class updateEmployInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateEmployInfo_args, EmployInfo> {
      public updateEmployInfo() {
        super("updateEmployInfo");
      }

      public updateEmployInfo_args getEmptyArgsInstance() {
        return new updateEmployInfo_args();
      }

      public AsyncMethodCallback<EmployInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<EmployInfo>() { 
          public void onComplete(EmployInfo o) {
            updateEmployInfo_result result = new updateEmployInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateEmployInfo_result result = new updateEmployInfo_result();
            if (e instanceof com.linyk3.thrift.apply.exception.ApplyException) {
                        result.applyException = (com.linyk3.thrift.apply.exception.ApplyException) e;
                        result.setApplyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateEmployInfo_args args, org.apache.thrift.async.AsyncMethodCallback<EmployInfo> resultHandler) throws TException {
        iface.updateEmployInfo(args.employInfo,resultHandler);
      }
    }

    public static class deleteEmployInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteEmployInfo_args, EmployInfo> {
      public deleteEmployInfo() {
        super("deleteEmployInfo");
      }

      public deleteEmployInfo_args getEmptyArgsInstance() {
        return new deleteEmployInfo_args();
      }

      public AsyncMethodCallback<EmployInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<EmployInfo>() { 
          public void onComplete(EmployInfo o) {
            deleteEmployInfo_result result = new deleteEmployInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteEmployInfo_result result = new deleteEmployInfo_result();
            if (e instanceof com.linyk3.thrift.apply.exception.ApplyException) {
                        result.applyException = (com.linyk3.thrift.apply.exception.ApplyException) e;
                        result.setApplyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteEmployInfo_args args, org.apache.thrift.async.AsyncMethodCallback<EmployInfo> resultHandler) throws TException {
        iface.deleteEmployInfo(args._id,resultHandler);
      }
    }

    public static class findApplicationInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findApplicationInfo_args, ApplicationInfo> {
      public findApplicationInfo() {
        super("findApplicationInfo");
      }

      public findApplicationInfo_args getEmptyArgsInstance() {
        return new findApplicationInfo_args();
      }

      public AsyncMethodCallback<ApplicationInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ApplicationInfo>() { 
          public void onComplete(ApplicationInfo o) {
            findApplicationInfo_result result = new findApplicationInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findApplicationInfo_result result = new findApplicationInfo_result();
            if (e instanceof com.linyk3.thrift.apply.exception.ApplyException) {
                        result.applyException = (com.linyk3.thrift.apply.exception.ApplyException) e;
                        result.setApplyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findApplicationInfo_args args, org.apache.thrift.async.AsyncMethodCallback<ApplicationInfo> resultHandler) throws TException {
        iface.findApplicationInfo(args.findApplicationInfoParams,resultHandler);
      }
    }

    public static class listApplicationInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listApplicationInfo_args, List<ApplicationInfo>> {
      public listApplicationInfo() {
        super("listApplicationInfo");
      }

      public listApplicationInfo_args getEmptyArgsInstance() {
        return new listApplicationInfo_args();
      }

      public AsyncMethodCallback<List<ApplicationInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ApplicationInfo>>() { 
          public void onComplete(List<ApplicationInfo> o) {
            listApplicationInfo_result result = new listApplicationInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listApplicationInfo_result result = new listApplicationInfo_result();
            if (e instanceof com.linyk3.thrift.apply.exception.ApplyException) {
                        result.applyException = (com.linyk3.thrift.apply.exception.ApplyException) e;
                        result.setApplyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listApplicationInfo_args args, org.apache.thrift.async.AsyncMethodCallback<List<ApplicationInfo>> resultHandler) throws TException {
        iface.listApplicationInfo(args.listApplicationInfoParams,resultHandler);
      }
    }

    public static class updateApplicationInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateApplicationInfo_args, ApplicationInfo> {
      public updateApplicationInfo() {
        super("updateApplicationInfo");
      }

      public updateApplicationInfo_args getEmptyArgsInstance() {
        return new updateApplicationInfo_args();
      }

      public AsyncMethodCallback<ApplicationInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ApplicationInfo>() { 
          public void onComplete(ApplicationInfo o) {
            updateApplicationInfo_result result = new updateApplicationInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateApplicationInfo_result result = new updateApplicationInfo_result();
            if (e instanceof com.linyk3.thrift.apply.exception.ApplyException) {
                        result.applyException = (com.linyk3.thrift.apply.exception.ApplyException) e;
                        result.setApplyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateApplicationInfo_args args, org.apache.thrift.async.AsyncMethodCallback<ApplicationInfo> resultHandler) throws TException {
        iface.updateApplicationInfo(args.applicationInfo,resultHandler);
      }
    }

    public static class deleteApplicationInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteApplicationInfo_args, ApplicationInfo> {
      public deleteApplicationInfo() {
        super("deleteApplicationInfo");
      }

      public deleteApplicationInfo_args getEmptyArgsInstance() {
        return new deleteApplicationInfo_args();
      }

      public AsyncMethodCallback<ApplicationInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ApplicationInfo>() { 
          public void onComplete(ApplicationInfo o) {
            deleteApplicationInfo_result result = new deleteApplicationInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteApplicationInfo_result result = new deleteApplicationInfo_result();
            if (e instanceof com.linyk3.thrift.apply.exception.ApplyException) {
                        result.applyException = (com.linyk3.thrift.apply.exception.ApplyException) e;
                        result.setApplyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteApplicationInfo_args args, org.apache.thrift.async.AsyncMethodCallback<ApplicationInfo> resultHandler) throws TException {
        iface.deleteApplicationInfo(args._id,resultHandler);
      }
    }

    public static class findTeachinInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findTeachinInfo_args, TeachinInfo> {
      public findTeachinInfo() {
        super("findTeachinInfo");
      }

      public findTeachinInfo_args getEmptyArgsInstance() {
        return new findTeachinInfo_args();
      }

      public AsyncMethodCallback<TeachinInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TeachinInfo>() { 
          public void onComplete(TeachinInfo o) {
            findTeachinInfo_result result = new findTeachinInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findTeachinInfo_result result = new findTeachinInfo_result();
            if (e instanceof com.linyk3.thrift.apply.exception.ApplyException) {
                        result.applyException = (com.linyk3.thrift.apply.exception.ApplyException) e;
                        result.setApplyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findTeachinInfo_args args, org.apache.thrift.async.AsyncMethodCallback<TeachinInfo> resultHandler) throws TException {
        iface.findTeachinInfo(args.findTeachinInfoParams,resultHandler);
      }
    }

    public static class listTeachinInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listTeachinInfo_args, List<TeachinInfo>> {
      public listTeachinInfo() {
        super("listTeachinInfo");
      }

      public listTeachinInfo_args getEmptyArgsInstance() {
        return new listTeachinInfo_args();
      }

      public AsyncMethodCallback<List<TeachinInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TeachinInfo>>() { 
          public void onComplete(List<TeachinInfo> o) {
            listTeachinInfo_result result = new listTeachinInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listTeachinInfo_result result = new listTeachinInfo_result();
            if (e instanceof com.linyk3.thrift.apply.exception.ApplyException) {
                        result.applyException = (com.linyk3.thrift.apply.exception.ApplyException) e;
                        result.setApplyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listTeachinInfo_args args, org.apache.thrift.async.AsyncMethodCallback<List<TeachinInfo>> resultHandler) throws TException {
        iface.listTeachinInfo(args.listTeachinInfoParams,resultHandler);
      }
    }

    public static class updateTeachinInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateTeachinInfo_args, TeachinInfo> {
      public updateTeachinInfo() {
        super("updateTeachinInfo");
      }

      public updateTeachinInfo_args getEmptyArgsInstance() {
        return new updateTeachinInfo_args();
      }

      public AsyncMethodCallback<TeachinInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TeachinInfo>() { 
          public void onComplete(TeachinInfo o) {
            updateTeachinInfo_result result = new updateTeachinInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateTeachinInfo_result result = new updateTeachinInfo_result();
            if (e instanceof com.linyk3.thrift.apply.exception.ApplyException) {
                        result.applyException = (com.linyk3.thrift.apply.exception.ApplyException) e;
                        result.setApplyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateTeachinInfo_args args, org.apache.thrift.async.AsyncMethodCallback<TeachinInfo> resultHandler) throws TException {
        iface.updateTeachinInfo(args.teachinInfo,resultHandler);
      }
    }

    public static class deleteTeachinInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteTeachinInfo_args, TeachinInfo> {
      public deleteTeachinInfo() {
        super("deleteTeachinInfo");
      }

      public deleteTeachinInfo_args getEmptyArgsInstance() {
        return new deleteTeachinInfo_args();
      }

      public AsyncMethodCallback<TeachinInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TeachinInfo>() { 
          public void onComplete(TeachinInfo o) {
            deleteTeachinInfo_result result = new deleteTeachinInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteTeachinInfo_result result = new deleteTeachinInfo_result();
            if (e instanceof com.linyk3.thrift.apply.exception.ApplyException) {
                        result.applyException = (com.linyk3.thrift.apply.exception.ApplyException) e;
                        result.setApplyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteTeachinInfo_args args, org.apache.thrift.async.AsyncMethodCallback<TeachinInfo> resultHandler) throws TException {
        iface.deleteTeachinInfo(args._id,resultHandler);
      }
    }

    public static class findExaminationInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findExaminationInfo_args, ExaminationInfo> {
      public findExaminationInfo() {
        super("findExaminationInfo");
      }

      public findExaminationInfo_args getEmptyArgsInstance() {
        return new findExaminationInfo_args();
      }

      public AsyncMethodCallback<ExaminationInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ExaminationInfo>() { 
          public void onComplete(ExaminationInfo o) {
            findExaminationInfo_result result = new findExaminationInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findExaminationInfo_result result = new findExaminationInfo_result();
            if (e instanceof com.linyk3.thrift.apply.exception.ApplyException) {
                        result.applyException = (com.linyk3.thrift.apply.exception.ApplyException) e;
                        result.setApplyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findExaminationInfo_args args, org.apache.thrift.async.AsyncMethodCallback<ExaminationInfo> resultHandler) throws TException {
        iface.findExaminationInfo(args.findExaminationInfoParams,resultHandler);
      }
    }

    public static class listExaminationInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listExaminationInfo_args, List<ExaminationInfo>> {
      public listExaminationInfo() {
        super("listExaminationInfo");
      }

      public listExaminationInfo_args getEmptyArgsInstance() {
        return new listExaminationInfo_args();
      }

      public AsyncMethodCallback<List<ExaminationInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ExaminationInfo>>() { 
          public void onComplete(List<ExaminationInfo> o) {
            listExaminationInfo_result result = new listExaminationInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listExaminationInfo_result result = new listExaminationInfo_result();
            if (e instanceof com.linyk3.thrift.apply.exception.ApplyException) {
                        result.applyException = (com.linyk3.thrift.apply.exception.ApplyException) e;
                        result.setApplyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listExaminationInfo_args args, org.apache.thrift.async.AsyncMethodCallback<List<ExaminationInfo>> resultHandler) throws TException {
        iface.listExaminationInfo(args.listExaminationInfoParams,resultHandler);
      }
    }

    public static class updateExaminationInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateExaminationInfo_args, ExaminationInfo> {
      public updateExaminationInfo() {
        super("updateExaminationInfo");
      }

      public updateExaminationInfo_args getEmptyArgsInstance() {
        return new updateExaminationInfo_args();
      }

      public AsyncMethodCallback<ExaminationInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ExaminationInfo>() { 
          public void onComplete(ExaminationInfo o) {
            updateExaminationInfo_result result = new updateExaminationInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateExaminationInfo_result result = new updateExaminationInfo_result();
            if (e instanceof com.linyk3.thrift.apply.exception.ApplyException) {
                        result.applyException = (com.linyk3.thrift.apply.exception.ApplyException) e;
                        result.setApplyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateExaminationInfo_args args, org.apache.thrift.async.AsyncMethodCallback<ExaminationInfo> resultHandler) throws TException {
        iface.updateExaminationInfo(args.examinationInfo,resultHandler);
      }
    }

    public static class deleteExaminationInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteExaminationInfo_args, ExaminationInfo> {
      public deleteExaminationInfo() {
        super("deleteExaminationInfo");
      }

      public deleteExaminationInfo_args getEmptyArgsInstance() {
        return new deleteExaminationInfo_args();
      }

      public AsyncMethodCallback<ExaminationInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ExaminationInfo>() { 
          public void onComplete(ExaminationInfo o) {
            deleteExaminationInfo_result result = new deleteExaminationInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteExaminationInfo_result result = new deleteExaminationInfo_result();
            if (e instanceof com.linyk3.thrift.apply.exception.ApplyException) {
                        result.applyException = (com.linyk3.thrift.apply.exception.ApplyException) e;
                        result.setApplyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteExaminationInfo_args args, org.apache.thrift.async.AsyncMethodCallback<ExaminationInfo> resultHandler) throws TException {
        iface.deleteExaminationInfo(args._id,resultHandler);
      }
    }

    public static class findInterviewInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findInterviewInfo_args, InterviewInfo> {
      public findInterviewInfo() {
        super("findInterviewInfo");
      }

      public findInterviewInfo_args getEmptyArgsInstance() {
        return new findInterviewInfo_args();
      }

      public AsyncMethodCallback<InterviewInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<InterviewInfo>() { 
          public void onComplete(InterviewInfo o) {
            findInterviewInfo_result result = new findInterviewInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findInterviewInfo_result result = new findInterviewInfo_result();
            if (e instanceof com.linyk3.thrift.apply.exception.ApplyException) {
                        result.applyException = (com.linyk3.thrift.apply.exception.ApplyException) e;
                        result.setApplyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findInterviewInfo_args args, org.apache.thrift.async.AsyncMethodCallback<InterviewInfo> resultHandler) throws TException {
        iface.findInterviewInfo(args.findInterviewInfoParams,resultHandler);
      }
    }

    public static class listInterviewInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listInterviewInfo_args, List<InterviewInfo>> {
      public listInterviewInfo() {
        super("listInterviewInfo");
      }

      public listInterviewInfo_args getEmptyArgsInstance() {
        return new listInterviewInfo_args();
      }

      public AsyncMethodCallback<List<InterviewInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<InterviewInfo>>() { 
          public void onComplete(List<InterviewInfo> o) {
            listInterviewInfo_result result = new listInterviewInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listInterviewInfo_result result = new listInterviewInfo_result();
            if (e instanceof com.linyk3.thrift.apply.exception.ApplyException) {
                        result.applyException = (com.linyk3.thrift.apply.exception.ApplyException) e;
                        result.setApplyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listInterviewInfo_args args, org.apache.thrift.async.AsyncMethodCallback<List<InterviewInfo>> resultHandler) throws TException {
        iface.listInterviewInfo(args.listInterviewInfoParams,resultHandler);
      }
    }

    public static class updateInterviewInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateInterviewInfo_args, InterviewInfo> {
      public updateInterviewInfo() {
        super("updateInterviewInfo");
      }

      public updateInterviewInfo_args getEmptyArgsInstance() {
        return new updateInterviewInfo_args();
      }

      public AsyncMethodCallback<InterviewInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<InterviewInfo>() { 
          public void onComplete(InterviewInfo o) {
            updateInterviewInfo_result result = new updateInterviewInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateInterviewInfo_result result = new updateInterviewInfo_result();
            if (e instanceof com.linyk3.thrift.apply.exception.ApplyException) {
                        result.applyException = (com.linyk3.thrift.apply.exception.ApplyException) e;
                        result.setApplyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateInterviewInfo_args args, org.apache.thrift.async.AsyncMethodCallback<InterviewInfo> resultHandler) throws TException {
        iface.updateInterviewInfo(args.interviewInfo,resultHandler);
      }
    }

    public static class deleteInterviewInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteInterviewInfo_args, InterviewInfo> {
      public deleteInterviewInfo() {
        super("deleteInterviewInfo");
      }

      public deleteInterviewInfo_args getEmptyArgsInstance() {
        return new deleteInterviewInfo_args();
      }

      public AsyncMethodCallback<InterviewInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<InterviewInfo>() { 
          public void onComplete(InterviewInfo o) {
            deleteInterviewInfo_result result = new deleteInterviewInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteInterviewInfo_result result = new deleteInterviewInfo_result();
            if (e instanceof com.linyk3.thrift.apply.exception.ApplyException) {
                        result.applyException = (com.linyk3.thrift.apply.exception.ApplyException) e;
                        result.setApplyExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteInterviewInfo_args args, org.apache.thrift.async.AsyncMethodCallback<InterviewInfo> resultHandler) throws TException {
        iface.deleteInterviewInfo(args._id,resultHandler);
      }
    }

  }

  public static class findUserInfo_args implements org.apache.thrift.TBase<findUserInfo_args, findUserInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<findUserInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserInfo_args");

    private static final org.apache.thrift.protocol.TField FIND_USER_INFO_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("findUserInfoParams", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findUserInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findUserInfo_argsTupleSchemeFactory());
    }

    public com.linyk3.thrift.apply.params.FindUserInfoParams findUserInfoParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIND_USER_INFO_PARAMS((short)1, "findUserInfoParams");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIND_USER_INFO_PARAMS
            return FIND_USER_INFO_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIND_USER_INFO_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("findUserInfoParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.linyk3.thrift.apply.params.FindUserInfoParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserInfo_args.class, metaDataMap);
    }

    public findUserInfo_args() {
    }

    public findUserInfo_args(
      com.linyk3.thrift.apply.params.FindUserInfoParams findUserInfoParams)
    {
      this();
      this.findUserInfoParams = findUserInfoParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserInfo_args(findUserInfo_args other) {
      if (other.isSetFindUserInfoParams()) {
        this.findUserInfoParams = new com.linyk3.thrift.apply.params.FindUserInfoParams(other.findUserInfoParams);
      }
    }

    public findUserInfo_args deepCopy() {
      return new findUserInfo_args(this);
    }

    @Override
    public void clear() {
      this.findUserInfoParams = null;
    }

    public com.linyk3.thrift.apply.params.FindUserInfoParams getFindUserInfoParams() {
      return this.findUserInfoParams;
    }

    public findUserInfo_args setFindUserInfoParams(com.linyk3.thrift.apply.params.FindUserInfoParams findUserInfoParams) {
      this.findUserInfoParams = findUserInfoParams;
      return this;
    }

    public void unsetFindUserInfoParams() {
      this.findUserInfoParams = null;
    }

    /** Returns true if field findUserInfoParams is set (has been assigned a value) and false otherwise */
    public boolean isSetFindUserInfoParams() {
      return this.findUserInfoParams != null;
    }

    public void setFindUserInfoParamsIsSet(boolean value) {
      if (!value) {
        this.findUserInfoParams = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FIND_USER_INFO_PARAMS:
        if (value == null) {
          unsetFindUserInfoParams();
        } else {
          setFindUserInfoParams((com.linyk3.thrift.apply.params.FindUserInfoParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FIND_USER_INFO_PARAMS:
        return getFindUserInfoParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FIND_USER_INFO_PARAMS:
        return isSetFindUserInfoParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserInfo_args)
        return this.equals((findUserInfo_args)that);
      return false;
    }

    public boolean equals(findUserInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_findUserInfoParams = true && this.isSetFindUserInfoParams();
      boolean that_present_findUserInfoParams = true && that.isSetFindUserInfoParams();
      if (this_present_findUserInfoParams || that_present_findUserInfoParams) {
        if (!(this_present_findUserInfoParams && that_present_findUserInfoParams))
          return false;
        if (!this.findUserInfoParams.equals(that.findUserInfoParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_findUserInfoParams = true && (isSetFindUserInfoParams());
      list.add(present_findUserInfoParams);
      if (present_findUserInfoParams)
        list.add(findUserInfoParams);

      return list.hashCode();
    }

    @Override
    public int compareTo(findUserInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFindUserInfoParams()).compareTo(other.isSetFindUserInfoParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFindUserInfoParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.findUserInfoParams, other.findUserInfoParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findUserInfo_args(");
      boolean first = true;

      sb.append("findUserInfoParams:");
      if (this.findUserInfoParams == null) {
        sb.append("null");
      } else {
        sb.append(this.findUserInfoParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (findUserInfoParams != null) {
        findUserInfoParams.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserInfo_argsStandardSchemeFactory implements SchemeFactory {
      public findUserInfo_argsStandardScheme getScheme() {
        return new findUserInfo_argsStandardScheme();
      }
    }

    private static class findUserInfo_argsStandardScheme extends StandardScheme<findUserInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIND_USER_INFO_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.findUserInfoParams = new com.linyk3.thrift.apply.params.FindUserInfoParams();
                struct.findUserInfoParams.read(iprot);
                struct.setFindUserInfoParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.findUserInfoParams != null) {
          oprot.writeFieldBegin(FIND_USER_INFO_PARAMS_FIELD_DESC);
          struct.findUserInfoParams.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserInfo_argsTupleSchemeFactory implements SchemeFactory {
      public findUserInfo_argsTupleScheme getScheme() {
        return new findUserInfo_argsTupleScheme();
      }
    }

    private static class findUserInfo_argsTupleScheme extends TupleScheme<findUserInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFindUserInfoParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFindUserInfoParams()) {
          struct.findUserInfoParams.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.findUserInfoParams = new com.linyk3.thrift.apply.params.FindUserInfoParams();
          struct.findUserInfoParams.read(iprot);
          struct.setFindUserInfoParamsIsSet(true);
        }
      }
    }

  }

  public static class findUserInfo_result implements org.apache.thrift.TBase<findUserInfo_result, findUserInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<findUserInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUserInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField APPLY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findUserInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findUserInfo_resultTupleSchemeFactory());
    }

    public UserInfo success; // required
    public com.linyk3.thrift.apply.exception.ApplyException applyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLY_EXCEPTION((short)1, "applyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLY_EXCEPTION
            return APPLY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserInfo.class)));
      tmpMap.put(_Fields.APPLY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUserInfo_result.class, metaDataMap);
    }

    public findUserInfo_result() {
    }

    public findUserInfo_result(
      UserInfo success,
      com.linyk3.thrift.apply.exception.ApplyException applyException)
    {
      this();
      this.success = success;
      this.applyException = applyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUserInfo_result(findUserInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new UserInfo(other.success);
      }
      if (other.isSetApplyException()) {
        this.applyException = new com.linyk3.thrift.apply.exception.ApplyException(other.applyException);
      }
    }

    public findUserInfo_result deepCopy() {
      return new findUserInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applyException = null;
    }

    public UserInfo getSuccess() {
      return this.success;
    }

    public findUserInfo_result setSuccess(UserInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.linyk3.thrift.apply.exception.ApplyException getApplyException() {
      return this.applyException;
    }

    public findUserInfo_result setApplyException(com.linyk3.thrift.apply.exception.ApplyException applyException) {
      this.applyException = applyException;
      return this;
    }

    public void unsetApplyException() {
      this.applyException = null;
    }

    /** Returns true if field applyException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyException() {
      return this.applyException != null;
    }

    public void setApplyExceptionIsSet(boolean value) {
      if (!value) {
        this.applyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((UserInfo)value);
        }
        break;

      case APPLY_EXCEPTION:
        if (value == null) {
          unsetApplyException();
        } else {
          setApplyException((com.linyk3.thrift.apply.exception.ApplyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLY_EXCEPTION:
        return getApplyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLY_EXCEPTION:
        return isSetApplyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findUserInfo_result)
        return this.equals((findUserInfo_result)that);
      return false;
    }

    public boolean equals(findUserInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applyException = true && this.isSetApplyException();
      boolean that_present_applyException = true && that.isSetApplyException();
      if (this_present_applyException || that_present_applyException) {
        if (!(this_present_applyException && that_present_applyException))
          return false;
        if (!this.applyException.equals(that.applyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_applyException = true && (isSetApplyException());
      list.add(present_applyException);
      if (present_applyException)
        list.add(applyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(findUserInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyException()).compareTo(other.isSetApplyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyException, other.applyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findUserInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyException:");
      if (this.applyException == null) {
        sb.append("null");
      } else {
        sb.append(this.applyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUserInfo_resultStandardSchemeFactory implements SchemeFactory {
      public findUserInfo_resultStandardScheme getScheme() {
        return new findUserInfo_resultStandardScheme();
      }
    }

    private static class findUserInfo_resultStandardScheme extends StandardScheme<findUserInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUserInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new UserInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
                struct.applyException.read(iprot);
                struct.setApplyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUserInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.applyException != null) {
          oprot.writeFieldBegin(APPLY_EXCEPTION_FIELD_DESC);
          struct.applyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUserInfo_resultTupleSchemeFactory implements SchemeFactory {
      public findUserInfo_resultTupleScheme getScheme() {
        return new findUserInfo_resultTupleScheme();
      }
    }

    private static class findUserInfo_resultTupleScheme extends TupleScheme<findUserInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUserInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetApplyException()) {
          struct.applyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUserInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new UserInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
          struct.applyException.read(iprot);
          struct.setApplyExceptionIsSet(true);
        }
      }
    }

  }

  public static class listUserInfo_args implements org.apache.thrift.TBase<listUserInfo_args, listUserInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<listUserInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listUserInfo_args");

    private static final org.apache.thrift.protocol.TField LIST_USER_INFO_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("listUserInfoParams", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listUserInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listUserInfo_argsTupleSchemeFactory());
    }

    public com.linyk3.thrift.apply.params.ListUserInfoParams listUserInfoParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIST_USER_INFO_PARAMS((short)1, "listUserInfoParams");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIST_USER_INFO_PARAMS
            return LIST_USER_INFO_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIST_USER_INFO_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("listUserInfoParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.linyk3.thrift.apply.params.ListUserInfoParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listUserInfo_args.class, metaDataMap);
    }

    public listUserInfo_args() {
    }

    public listUserInfo_args(
      com.linyk3.thrift.apply.params.ListUserInfoParams listUserInfoParams)
    {
      this();
      this.listUserInfoParams = listUserInfoParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listUserInfo_args(listUserInfo_args other) {
      if (other.isSetListUserInfoParams()) {
        this.listUserInfoParams = new com.linyk3.thrift.apply.params.ListUserInfoParams(other.listUserInfoParams);
      }
    }

    public listUserInfo_args deepCopy() {
      return new listUserInfo_args(this);
    }

    @Override
    public void clear() {
      this.listUserInfoParams = null;
    }

    public com.linyk3.thrift.apply.params.ListUserInfoParams getListUserInfoParams() {
      return this.listUserInfoParams;
    }

    public listUserInfo_args setListUserInfoParams(com.linyk3.thrift.apply.params.ListUserInfoParams listUserInfoParams) {
      this.listUserInfoParams = listUserInfoParams;
      return this;
    }

    public void unsetListUserInfoParams() {
      this.listUserInfoParams = null;
    }

    /** Returns true if field listUserInfoParams is set (has been assigned a value) and false otherwise */
    public boolean isSetListUserInfoParams() {
      return this.listUserInfoParams != null;
    }

    public void setListUserInfoParamsIsSet(boolean value) {
      if (!value) {
        this.listUserInfoParams = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIST_USER_INFO_PARAMS:
        if (value == null) {
          unsetListUserInfoParams();
        } else {
          setListUserInfoParams((com.linyk3.thrift.apply.params.ListUserInfoParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIST_USER_INFO_PARAMS:
        return getListUserInfoParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIST_USER_INFO_PARAMS:
        return isSetListUserInfoParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listUserInfo_args)
        return this.equals((listUserInfo_args)that);
      return false;
    }

    public boolean equals(listUserInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_listUserInfoParams = true && this.isSetListUserInfoParams();
      boolean that_present_listUserInfoParams = true && that.isSetListUserInfoParams();
      if (this_present_listUserInfoParams || that_present_listUserInfoParams) {
        if (!(this_present_listUserInfoParams && that_present_listUserInfoParams))
          return false;
        if (!this.listUserInfoParams.equals(that.listUserInfoParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_listUserInfoParams = true && (isSetListUserInfoParams());
      list.add(present_listUserInfoParams);
      if (present_listUserInfoParams)
        list.add(listUserInfoParams);

      return list.hashCode();
    }

    @Override
    public int compareTo(listUserInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetListUserInfoParams()).compareTo(other.isSetListUserInfoParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListUserInfoParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listUserInfoParams, other.listUserInfoParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listUserInfo_args(");
      boolean first = true;

      sb.append("listUserInfoParams:");
      if (this.listUserInfoParams == null) {
        sb.append("null");
      } else {
        sb.append(this.listUserInfoParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (listUserInfoParams != null) {
        listUserInfoParams.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listUserInfo_argsStandardSchemeFactory implements SchemeFactory {
      public listUserInfo_argsStandardScheme getScheme() {
        return new listUserInfo_argsStandardScheme();
      }
    }

    private static class listUserInfo_argsStandardScheme extends StandardScheme<listUserInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listUserInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIST_USER_INFO_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.listUserInfoParams = new com.linyk3.thrift.apply.params.ListUserInfoParams();
                struct.listUserInfoParams.read(iprot);
                struct.setListUserInfoParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listUserInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.listUserInfoParams != null) {
          oprot.writeFieldBegin(LIST_USER_INFO_PARAMS_FIELD_DESC);
          struct.listUserInfoParams.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listUserInfo_argsTupleSchemeFactory implements SchemeFactory {
      public listUserInfo_argsTupleScheme getScheme() {
        return new listUserInfo_argsTupleScheme();
      }
    }

    private static class listUserInfo_argsTupleScheme extends TupleScheme<listUserInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listUserInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetListUserInfoParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetListUserInfoParams()) {
          struct.listUserInfoParams.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listUserInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.listUserInfoParams = new com.linyk3.thrift.apply.params.ListUserInfoParams();
          struct.listUserInfoParams.read(iprot);
          struct.setListUserInfoParamsIsSet(true);
        }
      }
    }

  }

  public static class listUserInfo_result implements org.apache.thrift.TBase<listUserInfo_result, listUserInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<listUserInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listUserInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField APPLY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listUserInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listUserInfo_resultTupleSchemeFactory());
    }

    public List<UserInfo> success; // required
    public com.linyk3.thrift.apply.exception.ApplyException applyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLY_EXCEPTION((short)1, "applyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLY_EXCEPTION
            return APPLY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserInfo.class))));
      tmpMap.put(_Fields.APPLY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listUserInfo_result.class, metaDataMap);
    }

    public listUserInfo_result() {
    }

    public listUserInfo_result(
      List<UserInfo> success,
      com.linyk3.thrift.apply.exception.ApplyException applyException)
    {
      this();
      this.success = success;
      this.applyException = applyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listUserInfo_result(listUserInfo_result other) {
      if (other.isSetSuccess()) {
        List<UserInfo> __this__success = new ArrayList<UserInfo>(other.success.size());
        for (UserInfo other_element : other.success) {
          __this__success.add(new UserInfo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetApplyException()) {
        this.applyException = new com.linyk3.thrift.apply.exception.ApplyException(other.applyException);
      }
    }

    public listUserInfo_result deepCopy() {
      return new listUserInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applyException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<UserInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(UserInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<UserInfo>();
      }
      this.success.add(elem);
    }

    public List<UserInfo> getSuccess() {
      return this.success;
    }

    public listUserInfo_result setSuccess(List<UserInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.linyk3.thrift.apply.exception.ApplyException getApplyException() {
      return this.applyException;
    }

    public listUserInfo_result setApplyException(com.linyk3.thrift.apply.exception.ApplyException applyException) {
      this.applyException = applyException;
      return this;
    }

    public void unsetApplyException() {
      this.applyException = null;
    }

    /** Returns true if field applyException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyException() {
      return this.applyException != null;
    }

    public void setApplyExceptionIsSet(boolean value) {
      if (!value) {
        this.applyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<UserInfo>)value);
        }
        break;

      case APPLY_EXCEPTION:
        if (value == null) {
          unsetApplyException();
        } else {
          setApplyException((com.linyk3.thrift.apply.exception.ApplyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLY_EXCEPTION:
        return getApplyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLY_EXCEPTION:
        return isSetApplyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listUserInfo_result)
        return this.equals((listUserInfo_result)that);
      return false;
    }

    public boolean equals(listUserInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applyException = true && this.isSetApplyException();
      boolean that_present_applyException = true && that.isSetApplyException();
      if (this_present_applyException || that_present_applyException) {
        if (!(this_present_applyException && that_present_applyException))
          return false;
        if (!this.applyException.equals(that.applyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_applyException = true && (isSetApplyException());
      list.add(present_applyException);
      if (present_applyException)
        list.add(applyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(listUserInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyException()).compareTo(other.isSetApplyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyException, other.applyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listUserInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyException:");
      if (this.applyException == null) {
        sb.append("null");
      } else {
        sb.append(this.applyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listUserInfo_resultStandardSchemeFactory implements SchemeFactory {
      public listUserInfo_resultStandardScheme getScheme() {
        return new listUserInfo_resultStandardScheme();
      }
    }

    private static class listUserInfo_resultStandardScheme extends StandardScheme<listUserInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listUserInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.success = new ArrayList<UserInfo>(_list112.size);
                  UserInfo _elem113;
                  for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                  {
                    _elem113 = new UserInfo();
                    _elem113.read(iprot);
                    struct.success.add(_elem113);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
                struct.applyException.read(iprot);
                struct.setApplyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listUserInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (UserInfo _iter115 : struct.success)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.applyException != null) {
          oprot.writeFieldBegin(APPLY_EXCEPTION_FIELD_DESC);
          struct.applyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listUserInfo_resultTupleSchemeFactory implements SchemeFactory {
      public listUserInfo_resultTupleScheme getScheme() {
        return new listUserInfo_resultTupleScheme();
      }
    }

    private static class listUserInfo_resultTupleScheme extends TupleScheme<listUserInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listUserInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (UserInfo _iter116 : struct.success)
            {
              _iter116.write(oprot);
            }
          }
        }
        if (struct.isSetApplyException()) {
          struct.applyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listUserInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<UserInfo>(_list117.size);
            UserInfo _elem118;
            for (int _i119 = 0; _i119 < _list117.size; ++_i119)
            {
              _elem118 = new UserInfo();
              _elem118.read(iprot);
              struct.success.add(_elem118);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
          struct.applyException.read(iprot);
          struct.setApplyExceptionIsSet(true);
        }
      }
    }

  }

  public static class findPersonalInfo_args implements org.apache.thrift.TBase<findPersonalInfo_args, findPersonalInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<findPersonalInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPersonalInfo_args");

    private static final org.apache.thrift.protocol.TField FIND_PERSONAL_INFO_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("findPersonalInfoParams", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPersonalInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPersonalInfo_argsTupleSchemeFactory());
    }

    public com.linyk3.thrift.apply.params.FindPersonalInfoParams findPersonalInfoParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIND_PERSONAL_INFO_PARAMS((short)1, "findPersonalInfoParams");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIND_PERSONAL_INFO_PARAMS
            return FIND_PERSONAL_INFO_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIND_PERSONAL_INFO_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("findPersonalInfoParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.linyk3.thrift.apply.params.FindPersonalInfoParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPersonalInfo_args.class, metaDataMap);
    }

    public findPersonalInfo_args() {
    }

    public findPersonalInfo_args(
      com.linyk3.thrift.apply.params.FindPersonalInfoParams findPersonalInfoParams)
    {
      this();
      this.findPersonalInfoParams = findPersonalInfoParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPersonalInfo_args(findPersonalInfo_args other) {
      if (other.isSetFindPersonalInfoParams()) {
        this.findPersonalInfoParams = new com.linyk3.thrift.apply.params.FindPersonalInfoParams(other.findPersonalInfoParams);
      }
    }

    public findPersonalInfo_args deepCopy() {
      return new findPersonalInfo_args(this);
    }

    @Override
    public void clear() {
      this.findPersonalInfoParams = null;
    }

    public com.linyk3.thrift.apply.params.FindPersonalInfoParams getFindPersonalInfoParams() {
      return this.findPersonalInfoParams;
    }

    public findPersonalInfo_args setFindPersonalInfoParams(com.linyk3.thrift.apply.params.FindPersonalInfoParams findPersonalInfoParams) {
      this.findPersonalInfoParams = findPersonalInfoParams;
      return this;
    }

    public void unsetFindPersonalInfoParams() {
      this.findPersonalInfoParams = null;
    }

    /** Returns true if field findPersonalInfoParams is set (has been assigned a value) and false otherwise */
    public boolean isSetFindPersonalInfoParams() {
      return this.findPersonalInfoParams != null;
    }

    public void setFindPersonalInfoParamsIsSet(boolean value) {
      if (!value) {
        this.findPersonalInfoParams = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FIND_PERSONAL_INFO_PARAMS:
        if (value == null) {
          unsetFindPersonalInfoParams();
        } else {
          setFindPersonalInfoParams((com.linyk3.thrift.apply.params.FindPersonalInfoParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FIND_PERSONAL_INFO_PARAMS:
        return getFindPersonalInfoParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FIND_PERSONAL_INFO_PARAMS:
        return isSetFindPersonalInfoParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPersonalInfo_args)
        return this.equals((findPersonalInfo_args)that);
      return false;
    }

    public boolean equals(findPersonalInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_findPersonalInfoParams = true && this.isSetFindPersonalInfoParams();
      boolean that_present_findPersonalInfoParams = true && that.isSetFindPersonalInfoParams();
      if (this_present_findPersonalInfoParams || that_present_findPersonalInfoParams) {
        if (!(this_present_findPersonalInfoParams && that_present_findPersonalInfoParams))
          return false;
        if (!this.findPersonalInfoParams.equals(that.findPersonalInfoParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_findPersonalInfoParams = true && (isSetFindPersonalInfoParams());
      list.add(present_findPersonalInfoParams);
      if (present_findPersonalInfoParams)
        list.add(findPersonalInfoParams);

      return list.hashCode();
    }

    @Override
    public int compareTo(findPersonalInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFindPersonalInfoParams()).compareTo(other.isSetFindPersonalInfoParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFindPersonalInfoParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.findPersonalInfoParams, other.findPersonalInfoParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPersonalInfo_args(");
      boolean first = true;

      sb.append("findPersonalInfoParams:");
      if (this.findPersonalInfoParams == null) {
        sb.append("null");
      } else {
        sb.append(this.findPersonalInfoParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (findPersonalInfoParams != null) {
        findPersonalInfoParams.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPersonalInfo_argsStandardSchemeFactory implements SchemeFactory {
      public findPersonalInfo_argsStandardScheme getScheme() {
        return new findPersonalInfo_argsStandardScheme();
      }
    }

    private static class findPersonalInfo_argsStandardScheme extends StandardScheme<findPersonalInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPersonalInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIND_PERSONAL_INFO_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.findPersonalInfoParams = new com.linyk3.thrift.apply.params.FindPersonalInfoParams();
                struct.findPersonalInfoParams.read(iprot);
                struct.setFindPersonalInfoParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPersonalInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.findPersonalInfoParams != null) {
          oprot.writeFieldBegin(FIND_PERSONAL_INFO_PARAMS_FIELD_DESC);
          struct.findPersonalInfoParams.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPersonalInfo_argsTupleSchemeFactory implements SchemeFactory {
      public findPersonalInfo_argsTupleScheme getScheme() {
        return new findPersonalInfo_argsTupleScheme();
      }
    }

    private static class findPersonalInfo_argsTupleScheme extends TupleScheme<findPersonalInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPersonalInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFindPersonalInfoParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFindPersonalInfoParams()) {
          struct.findPersonalInfoParams.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPersonalInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.findPersonalInfoParams = new com.linyk3.thrift.apply.params.FindPersonalInfoParams();
          struct.findPersonalInfoParams.read(iprot);
          struct.setFindPersonalInfoParamsIsSet(true);
        }
      }
    }

  }

  public static class findPersonalInfo_result implements org.apache.thrift.TBase<findPersonalInfo_result, findPersonalInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<findPersonalInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPersonalInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField APPLY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPersonalInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPersonalInfo_resultTupleSchemeFactory());
    }

    public PersonalInfo success; // required
    public com.linyk3.thrift.apply.exception.ApplyException applyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLY_EXCEPTION((short)1, "applyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLY_EXCEPTION
            return APPLY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PersonalInfo.class)));
      tmpMap.put(_Fields.APPLY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPersonalInfo_result.class, metaDataMap);
    }

    public findPersonalInfo_result() {
    }

    public findPersonalInfo_result(
      PersonalInfo success,
      com.linyk3.thrift.apply.exception.ApplyException applyException)
    {
      this();
      this.success = success;
      this.applyException = applyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPersonalInfo_result(findPersonalInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new PersonalInfo(other.success);
      }
      if (other.isSetApplyException()) {
        this.applyException = new com.linyk3.thrift.apply.exception.ApplyException(other.applyException);
      }
    }

    public findPersonalInfo_result deepCopy() {
      return new findPersonalInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applyException = null;
    }

    public PersonalInfo getSuccess() {
      return this.success;
    }

    public findPersonalInfo_result setSuccess(PersonalInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.linyk3.thrift.apply.exception.ApplyException getApplyException() {
      return this.applyException;
    }

    public findPersonalInfo_result setApplyException(com.linyk3.thrift.apply.exception.ApplyException applyException) {
      this.applyException = applyException;
      return this;
    }

    public void unsetApplyException() {
      this.applyException = null;
    }

    /** Returns true if field applyException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyException() {
      return this.applyException != null;
    }

    public void setApplyExceptionIsSet(boolean value) {
      if (!value) {
        this.applyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PersonalInfo)value);
        }
        break;

      case APPLY_EXCEPTION:
        if (value == null) {
          unsetApplyException();
        } else {
          setApplyException((com.linyk3.thrift.apply.exception.ApplyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLY_EXCEPTION:
        return getApplyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLY_EXCEPTION:
        return isSetApplyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPersonalInfo_result)
        return this.equals((findPersonalInfo_result)that);
      return false;
    }

    public boolean equals(findPersonalInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applyException = true && this.isSetApplyException();
      boolean that_present_applyException = true && that.isSetApplyException();
      if (this_present_applyException || that_present_applyException) {
        if (!(this_present_applyException && that_present_applyException))
          return false;
        if (!this.applyException.equals(that.applyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_applyException = true && (isSetApplyException());
      list.add(present_applyException);
      if (present_applyException)
        list.add(applyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(findPersonalInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyException()).compareTo(other.isSetApplyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyException, other.applyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPersonalInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyException:");
      if (this.applyException == null) {
        sb.append("null");
      } else {
        sb.append(this.applyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPersonalInfo_resultStandardSchemeFactory implements SchemeFactory {
      public findPersonalInfo_resultStandardScheme getScheme() {
        return new findPersonalInfo_resultStandardScheme();
      }
    }

    private static class findPersonalInfo_resultStandardScheme extends StandardScheme<findPersonalInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPersonalInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PersonalInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
                struct.applyException.read(iprot);
                struct.setApplyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPersonalInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.applyException != null) {
          oprot.writeFieldBegin(APPLY_EXCEPTION_FIELD_DESC);
          struct.applyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPersonalInfo_resultTupleSchemeFactory implements SchemeFactory {
      public findPersonalInfo_resultTupleScheme getScheme() {
        return new findPersonalInfo_resultTupleScheme();
      }
    }

    private static class findPersonalInfo_resultTupleScheme extends TupleScheme<findPersonalInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPersonalInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetApplyException()) {
          struct.applyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPersonalInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PersonalInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
          struct.applyException.read(iprot);
          struct.setApplyExceptionIsSet(true);
        }
      }
    }

  }

  public static class listPersonalInfo_args implements org.apache.thrift.TBase<listPersonalInfo_args, listPersonalInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<listPersonalInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listPersonalInfo_args");

    private static final org.apache.thrift.protocol.TField LIST_PERSONAL_INFO_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("listPersonalInfoParams", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listPersonalInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listPersonalInfo_argsTupleSchemeFactory());
    }

    public com.linyk3.thrift.apply.params.ListPersonalInfoParams listPersonalInfoParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIST_PERSONAL_INFO_PARAMS((short)1, "listPersonalInfoParams");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIST_PERSONAL_INFO_PARAMS
            return LIST_PERSONAL_INFO_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIST_PERSONAL_INFO_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("listPersonalInfoParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.linyk3.thrift.apply.params.ListPersonalInfoParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listPersonalInfo_args.class, metaDataMap);
    }

    public listPersonalInfo_args() {
    }

    public listPersonalInfo_args(
      com.linyk3.thrift.apply.params.ListPersonalInfoParams listPersonalInfoParams)
    {
      this();
      this.listPersonalInfoParams = listPersonalInfoParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listPersonalInfo_args(listPersonalInfo_args other) {
      if (other.isSetListPersonalInfoParams()) {
        this.listPersonalInfoParams = new com.linyk3.thrift.apply.params.ListPersonalInfoParams(other.listPersonalInfoParams);
      }
    }

    public listPersonalInfo_args deepCopy() {
      return new listPersonalInfo_args(this);
    }

    @Override
    public void clear() {
      this.listPersonalInfoParams = null;
    }

    public com.linyk3.thrift.apply.params.ListPersonalInfoParams getListPersonalInfoParams() {
      return this.listPersonalInfoParams;
    }

    public listPersonalInfo_args setListPersonalInfoParams(com.linyk3.thrift.apply.params.ListPersonalInfoParams listPersonalInfoParams) {
      this.listPersonalInfoParams = listPersonalInfoParams;
      return this;
    }

    public void unsetListPersonalInfoParams() {
      this.listPersonalInfoParams = null;
    }

    /** Returns true if field listPersonalInfoParams is set (has been assigned a value) and false otherwise */
    public boolean isSetListPersonalInfoParams() {
      return this.listPersonalInfoParams != null;
    }

    public void setListPersonalInfoParamsIsSet(boolean value) {
      if (!value) {
        this.listPersonalInfoParams = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIST_PERSONAL_INFO_PARAMS:
        if (value == null) {
          unsetListPersonalInfoParams();
        } else {
          setListPersonalInfoParams((com.linyk3.thrift.apply.params.ListPersonalInfoParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIST_PERSONAL_INFO_PARAMS:
        return getListPersonalInfoParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIST_PERSONAL_INFO_PARAMS:
        return isSetListPersonalInfoParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listPersonalInfo_args)
        return this.equals((listPersonalInfo_args)that);
      return false;
    }

    public boolean equals(listPersonalInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_listPersonalInfoParams = true && this.isSetListPersonalInfoParams();
      boolean that_present_listPersonalInfoParams = true && that.isSetListPersonalInfoParams();
      if (this_present_listPersonalInfoParams || that_present_listPersonalInfoParams) {
        if (!(this_present_listPersonalInfoParams && that_present_listPersonalInfoParams))
          return false;
        if (!this.listPersonalInfoParams.equals(that.listPersonalInfoParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_listPersonalInfoParams = true && (isSetListPersonalInfoParams());
      list.add(present_listPersonalInfoParams);
      if (present_listPersonalInfoParams)
        list.add(listPersonalInfoParams);

      return list.hashCode();
    }

    @Override
    public int compareTo(listPersonalInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetListPersonalInfoParams()).compareTo(other.isSetListPersonalInfoParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListPersonalInfoParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listPersonalInfoParams, other.listPersonalInfoParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listPersonalInfo_args(");
      boolean first = true;

      sb.append("listPersonalInfoParams:");
      if (this.listPersonalInfoParams == null) {
        sb.append("null");
      } else {
        sb.append(this.listPersonalInfoParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (listPersonalInfoParams != null) {
        listPersonalInfoParams.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listPersonalInfo_argsStandardSchemeFactory implements SchemeFactory {
      public listPersonalInfo_argsStandardScheme getScheme() {
        return new listPersonalInfo_argsStandardScheme();
      }
    }

    private static class listPersonalInfo_argsStandardScheme extends StandardScheme<listPersonalInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listPersonalInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIST_PERSONAL_INFO_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.listPersonalInfoParams = new com.linyk3.thrift.apply.params.ListPersonalInfoParams();
                struct.listPersonalInfoParams.read(iprot);
                struct.setListPersonalInfoParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listPersonalInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.listPersonalInfoParams != null) {
          oprot.writeFieldBegin(LIST_PERSONAL_INFO_PARAMS_FIELD_DESC);
          struct.listPersonalInfoParams.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listPersonalInfo_argsTupleSchemeFactory implements SchemeFactory {
      public listPersonalInfo_argsTupleScheme getScheme() {
        return new listPersonalInfo_argsTupleScheme();
      }
    }

    private static class listPersonalInfo_argsTupleScheme extends TupleScheme<listPersonalInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listPersonalInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetListPersonalInfoParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetListPersonalInfoParams()) {
          struct.listPersonalInfoParams.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listPersonalInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.listPersonalInfoParams = new com.linyk3.thrift.apply.params.ListPersonalInfoParams();
          struct.listPersonalInfoParams.read(iprot);
          struct.setListPersonalInfoParamsIsSet(true);
        }
      }
    }

  }

  public static class listPersonalInfo_result implements org.apache.thrift.TBase<listPersonalInfo_result, listPersonalInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<listPersonalInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listPersonalInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField APPLY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listPersonalInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listPersonalInfo_resultTupleSchemeFactory());
    }

    public List<PersonalInfo> success; // required
    public com.linyk3.thrift.apply.exception.ApplyException applyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLY_EXCEPTION((short)1, "applyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLY_EXCEPTION
            return APPLY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PersonalInfo.class))));
      tmpMap.put(_Fields.APPLY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listPersonalInfo_result.class, metaDataMap);
    }

    public listPersonalInfo_result() {
    }

    public listPersonalInfo_result(
      List<PersonalInfo> success,
      com.linyk3.thrift.apply.exception.ApplyException applyException)
    {
      this();
      this.success = success;
      this.applyException = applyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listPersonalInfo_result(listPersonalInfo_result other) {
      if (other.isSetSuccess()) {
        List<PersonalInfo> __this__success = new ArrayList<PersonalInfo>(other.success.size());
        for (PersonalInfo other_element : other.success) {
          __this__success.add(new PersonalInfo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetApplyException()) {
        this.applyException = new com.linyk3.thrift.apply.exception.ApplyException(other.applyException);
      }
    }

    public listPersonalInfo_result deepCopy() {
      return new listPersonalInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applyException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<PersonalInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(PersonalInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<PersonalInfo>();
      }
      this.success.add(elem);
    }

    public List<PersonalInfo> getSuccess() {
      return this.success;
    }

    public listPersonalInfo_result setSuccess(List<PersonalInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.linyk3.thrift.apply.exception.ApplyException getApplyException() {
      return this.applyException;
    }

    public listPersonalInfo_result setApplyException(com.linyk3.thrift.apply.exception.ApplyException applyException) {
      this.applyException = applyException;
      return this;
    }

    public void unsetApplyException() {
      this.applyException = null;
    }

    /** Returns true if field applyException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyException() {
      return this.applyException != null;
    }

    public void setApplyExceptionIsSet(boolean value) {
      if (!value) {
        this.applyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<PersonalInfo>)value);
        }
        break;

      case APPLY_EXCEPTION:
        if (value == null) {
          unsetApplyException();
        } else {
          setApplyException((com.linyk3.thrift.apply.exception.ApplyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLY_EXCEPTION:
        return getApplyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLY_EXCEPTION:
        return isSetApplyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listPersonalInfo_result)
        return this.equals((listPersonalInfo_result)that);
      return false;
    }

    public boolean equals(listPersonalInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applyException = true && this.isSetApplyException();
      boolean that_present_applyException = true && that.isSetApplyException();
      if (this_present_applyException || that_present_applyException) {
        if (!(this_present_applyException && that_present_applyException))
          return false;
        if (!this.applyException.equals(that.applyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_applyException = true && (isSetApplyException());
      list.add(present_applyException);
      if (present_applyException)
        list.add(applyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(listPersonalInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyException()).compareTo(other.isSetApplyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyException, other.applyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listPersonalInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyException:");
      if (this.applyException == null) {
        sb.append("null");
      } else {
        sb.append(this.applyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listPersonalInfo_resultStandardSchemeFactory implements SchemeFactory {
      public listPersonalInfo_resultStandardScheme getScheme() {
        return new listPersonalInfo_resultStandardScheme();
      }
    }

    private static class listPersonalInfo_resultStandardScheme extends StandardScheme<listPersonalInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listPersonalInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                  struct.success = new ArrayList<PersonalInfo>(_list120.size);
                  PersonalInfo _elem121;
                  for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                  {
                    _elem121 = new PersonalInfo();
                    _elem121.read(iprot);
                    struct.success.add(_elem121);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
                struct.applyException.read(iprot);
                struct.setApplyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listPersonalInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (PersonalInfo _iter123 : struct.success)
            {
              _iter123.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.applyException != null) {
          oprot.writeFieldBegin(APPLY_EXCEPTION_FIELD_DESC);
          struct.applyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listPersonalInfo_resultTupleSchemeFactory implements SchemeFactory {
      public listPersonalInfo_resultTupleScheme getScheme() {
        return new listPersonalInfo_resultTupleScheme();
      }
    }

    private static class listPersonalInfo_resultTupleScheme extends TupleScheme<listPersonalInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listPersonalInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (PersonalInfo _iter124 : struct.success)
            {
              _iter124.write(oprot);
            }
          }
        }
        if (struct.isSetApplyException()) {
          struct.applyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listPersonalInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<PersonalInfo>(_list125.size);
            PersonalInfo _elem126;
            for (int _i127 = 0; _i127 < _list125.size; ++_i127)
            {
              _elem126 = new PersonalInfo();
              _elem126.read(iprot);
              struct.success.add(_elem126);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
          struct.applyException.read(iprot);
          struct.setApplyExceptionIsSet(true);
        }
      }
    }

  }

  public static class updatePersonalInfo_args implements org.apache.thrift.TBase<updatePersonalInfo_args, updatePersonalInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updatePersonalInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePersonalInfo_args");

    private static final org.apache.thrift.protocol.TField PERSONAL_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("personalInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePersonalInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePersonalInfo_argsTupleSchemeFactory());
    }

    public PersonalInfo personalInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PERSONAL_INFO((short)1, "personalInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PERSONAL_INFO
            return PERSONAL_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PERSONAL_INFO, new org.apache.thrift.meta_data.FieldMetaData("personalInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PersonalInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePersonalInfo_args.class, metaDataMap);
    }

    public updatePersonalInfo_args() {
    }

    public updatePersonalInfo_args(
      PersonalInfo personalInfo)
    {
      this();
      this.personalInfo = personalInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePersonalInfo_args(updatePersonalInfo_args other) {
      if (other.isSetPersonalInfo()) {
        this.personalInfo = new PersonalInfo(other.personalInfo);
      }
    }

    public updatePersonalInfo_args deepCopy() {
      return new updatePersonalInfo_args(this);
    }

    @Override
    public void clear() {
      this.personalInfo = null;
    }

    public PersonalInfo getPersonalInfo() {
      return this.personalInfo;
    }

    public updatePersonalInfo_args setPersonalInfo(PersonalInfo personalInfo) {
      this.personalInfo = personalInfo;
      return this;
    }

    public void unsetPersonalInfo() {
      this.personalInfo = null;
    }

    /** Returns true if field personalInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetPersonalInfo() {
      return this.personalInfo != null;
    }

    public void setPersonalInfoIsSet(boolean value) {
      if (!value) {
        this.personalInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PERSONAL_INFO:
        if (value == null) {
          unsetPersonalInfo();
        } else {
          setPersonalInfo((PersonalInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PERSONAL_INFO:
        return getPersonalInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PERSONAL_INFO:
        return isSetPersonalInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePersonalInfo_args)
        return this.equals((updatePersonalInfo_args)that);
      return false;
    }

    public boolean equals(updatePersonalInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_personalInfo = true && this.isSetPersonalInfo();
      boolean that_present_personalInfo = true && that.isSetPersonalInfo();
      if (this_present_personalInfo || that_present_personalInfo) {
        if (!(this_present_personalInfo && that_present_personalInfo))
          return false;
        if (!this.personalInfo.equals(that.personalInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_personalInfo = true && (isSetPersonalInfo());
      list.add(present_personalInfo);
      if (present_personalInfo)
        list.add(personalInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updatePersonalInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPersonalInfo()).compareTo(other.isSetPersonalInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPersonalInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.personalInfo, other.personalInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePersonalInfo_args(");
      boolean first = true;

      sb.append("personalInfo:");
      if (this.personalInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.personalInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (personalInfo != null) {
        personalInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePersonalInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updatePersonalInfo_argsStandardScheme getScheme() {
        return new updatePersonalInfo_argsStandardScheme();
      }
    }

    private static class updatePersonalInfo_argsStandardScheme extends StandardScheme<updatePersonalInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePersonalInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PERSONAL_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.personalInfo = new PersonalInfo();
                struct.personalInfo.read(iprot);
                struct.setPersonalInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePersonalInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.personalInfo != null) {
          oprot.writeFieldBegin(PERSONAL_INFO_FIELD_DESC);
          struct.personalInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePersonalInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updatePersonalInfo_argsTupleScheme getScheme() {
        return new updatePersonalInfo_argsTupleScheme();
      }
    }

    private static class updatePersonalInfo_argsTupleScheme extends TupleScheme<updatePersonalInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePersonalInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPersonalInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPersonalInfo()) {
          struct.personalInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePersonalInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.personalInfo = new PersonalInfo();
          struct.personalInfo.read(iprot);
          struct.setPersonalInfoIsSet(true);
        }
      }
    }

  }

  public static class updatePersonalInfo_result implements org.apache.thrift.TBase<updatePersonalInfo_result, updatePersonalInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updatePersonalInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePersonalInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField APPLY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePersonalInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePersonalInfo_resultTupleSchemeFactory());
    }

    public PersonalInfo success; // required
    public com.linyk3.thrift.apply.exception.ApplyException applyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLY_EXCEPTION((short)1, "applyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLY_EXCEPTION
            return APPLY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PersonalInfo.class)));
      tmpMap.put(_Fields.APPLY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePersonalInfo_result.class, metaDataMap);
    }

    public updatePersonalInfo_result() {
    }

    public updatePersonalInfo_result(
      PersonalInfo success,
      com.linyk3.thrift.apply.exception.ApplyException applyException)
    {
      this();
      this.success = success;
      this.applyException = applyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePersonalInfo_result(updatePersonalInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new PersonalInfo(other.success);
      }
      if (other.isSetApplyException()) {
        this.applyException = new com.linyk3.thrift.apply.exception.ApplyException(other.applyException);
      }
    }

    public updatePersonalInfo_result deepCopy() {
      return new updatePersonalInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applyException = null;
    }

    public PersonalInfo getSuccess() {
      return this.success;
    }

    public updatePersonalInfo_result setSuccess(PersonalInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.linyk3.thrift.apply.exception.ApplyException getApplyException() {
      return this.applyException;
    }

    public updatePersonalInfo_result setApplyException(com.linyk3.thrift.apply.exception.ApplyException applyException) {
      this.applyException = applyException;
      return this;
    }

    public void unsetApplyException() {
      this.applyException = null;
    }

    /** Returns true if field applyException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyException() {
      return this.applyException != null;
    }

    public void setApplyExceptionIsSet(boolean value) {
      if (!value) {
        this.applyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PersonalInfo)value);
        }
        break;

      case APPLY_EXCEPTION:
        if (value == null) {
          unsetApplyException();
        } else {
          setApplyException((com.linyk3.thrift.apply.exception.ApplyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLY_EXCEPTION:
        return getApplyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLY_EXCEPTION:
        return isSetApplyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePersonalInfo_result)
        return this.equals((updatePersonalInfo_result)that);
      return false;
    }

    public boolean equals(updatePersonalInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applyException = true && this.isSetApplyException();
      boolean that_present_applyException = true && that.isSetApplyException();
      if (this_present_applyException || that_present_applyException) {
        if (!(this_present_applyException && that_present_applyException))
          return false;
        if (!this.applyException.equals(that.applyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_applyException = true && (isSetApplyException());
      list.add(present_applyException);
      if (present_applyException)
        list.add(applyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(updatePersonalInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyException()).compareTo(other.isSetApplyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyException, other.applyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePersonalInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyException:");
      if (this.applyException == null) {
        sb.append("null");
      } else {
        sb.append(this.applyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePersonalInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updatePersonalInfo_resultStandardScheme getScheme() {
        return new updatePersonalInfo_resultStandardScheme();
      }
    }

    private static class updatePersonalInfo_resultStandardScheme extends StandardScheme<updatePersonalInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePersonalInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PersonalInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
                struct.applyException.read(iprot);
                struct.setApplyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePersonalInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.applyException != null) {
          oprot.writeFieldBegin(APPLY_EXCEPTION_FIELD_DESC);
          struct.applyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePersonalInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updatePersonalInfo_resultTupleScheme getScheme() {
        return new updatePersonalInfo_resultTupleScheme();
      }
    }

    private static class updatePersonalInfo_resultTupleScheme extends TupleScheme<updatePersonalInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePersonalInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetApplyException()) {
          struct.applyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePersonalInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PersonalInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
          struct.applyException.read(iprot);
          struct.setApplyExceptionIsSet(true);
        }
      }
    }

  }

  public static class deletePersonalInfo_args implements org.apache.thrift.TBase<deletePersonalInfo_args, deletePersonalInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<deletePersonalInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deletePersonalInfo_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deletePersonalInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deletePersonalInfo_argsTupleSchemeFactory());
    }

    public String _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deletePersonalInfo_args.class, metaDataMap);
    }

    public deletePersonalInfo_args() {
    }

    public deletePersonalInfo_args(
      String _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deletePersonalInfo_args(deletePersonalInfo_args other) {
      if (other.isSet_id()) {
        this._id = other._id;
      }
    }

    public deletePersonalInfo_args deepCopy() {
      return new deletePersonalInfo_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public String get_id() {
      return this._id;
    }

    public deletePersonalInfo_args set_id(String _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deletePersonalInfo_args)
        return this.equals((deletePersonalInfo_args)that);
      return false;
    }

    public boolean equals(deletePersonalInfo_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present__id = true && (isSet_id());
      list.add(present__id);
      if (present__id)
        list.add(_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(deletePersonalInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(other.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, other._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deletePersonalInfo_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deletePersonalInfo_argsStandardSchemeFactory implements SchemeFactory {
      public deletePersonalInfo_argsStandardScheme getScheme() {
        return new deletePersonalInfo_argsStandardScheme();
      }
    }

    private static class deletePersonalInfo_argsStandardScheme extends StandardScheme<deletePersonalInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deletePersonalInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct._id = iprot.readString();
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deletePersonalInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          oprot.writeString(struct._id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deletePersonalInfo_argsTupleSchemeFactory implements SchemeFactory {
      public deletePersonalInfo_argsTupleScheme getScheme() {
        return new deletePersonalInfo_argsTupleScheme();
      }
    }

    private static class deletePersonalInfo_argsTupleScheme extends TupleScheme<deletePersonalInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deletePersonalInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          oprot.writeString(struct._id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deletePersonalInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = iprot.readString();
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class deletePersonalInfo_result implements org.apache.thrift.TBase<deletePersonalInfo_result, deletePersonalInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<deletePersonalInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deletePersonalInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField APPLY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deletePersonalInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deletePersonalInfo_resultTupleSchemeFactory());
    }

    public PersonalInfo success; // required
    public com.linyk3.thrift.apply.exception.ApplyException applyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLY_EXCEPTION((short)1, "applyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLY_EXCEPTION
            return APPLY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PersonalInfo.class)));
      tmpMap.put(_Fields.APPLY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deletePersonalInfo_result.class, metaDataMap);
    }

    public deletePersonalInfo_result() {
    }

    public deletePersonalInfo_result(
      PersonalInfo success,
      com.linyk3.thrift.apply.exception.ApplyException applyException)
    {
      this();
      this.success = success;
      this.applyException = applyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deletePersonalInfo_result(deletePersonalInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new PersonalInfo(other.success);
      }
      if (other.isSetApplyException()) {
        this.applyException = new com.linyk3.thrift.apply.exception.ApplyException(other.applyException);
      }
    }

    public deletePersonalInfo_result deepCopy() {
      return new deletePersonalInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applyException = null;
    }

    public PersonalInfo getSuccess() {
      return this.success;
    }

    public deletePersonalInfo_result setSuccess(PersonalInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.linyk3.thrift.apply.exception.ApplyException getApplyException() {
      return this.applyException;
    }

    public deletePersonalInfo_result setApplyException(com.linyk3.thrift.apply.exception.ApplyException applyException) {
      this.applyException = applyException;
      return this;
    }

    public void unsetApplyException() {
      this.applyException = null;
    }

    /** Returns true if field applyException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyException() {
      return this.applyException != null;
    }

    public void setApplyExceptionIsSet(boolean value) {
      if (!value) {
        this.applyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PersonalInfo)value);
        }
        break;

      case APPLY_EXCEPTION:
        if (value == null) {
          unsetApplyException();
        } else {
          setApplyException((com.linyk3.thrift.apply.exception.ApplyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLY_EXCEPTION:
        return getApplyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLY_EXCEPTION:
        return isSetApplyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deletePersonalInfo_result)
        return this.equals((deletePersonalInfo_result)that);
      return false;
    }

    public boolean equals(deletePersonalInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applyException = true && this.isSetApplyException();
      boolean that_present_applyException = true && that.isSetApplyException();
      if (this_present_applyException || that_present_applyException) {
        if (!(this_present_applyException && that_present_applyException))
          return false;
        if (!this.applyException.equals(that.applyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_applyException = true && (isSetApplyException());
      list.add(present_applyException);
      if (present_applyException)
        list.add(applyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(deletePersonalInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyException()).compareTo(other.isSetApplyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyException, other.applyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deletePersonalInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyException:");
      if (this.applyException == null) {
        sb.append("null");
      } else {
        sb.append(this.applyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deletePersonalInfo_resultStandardSchemeFactory implements SchemeFactory {
      public deletePersonalInfo_resultStandardScheme getScheme() {
        return new deletePersonalInfo_resultStandardScheme();
      }
    }

    private static class deletePersonalInfo_resultStandardScheme extends StandardScheme<deletePersonalInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deletePersonalInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PersonalInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
                struct.applyException.read(iprot);
                struct.setApplyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deletePersonalInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.applyException != null) {
          oprot.writeFieldBegin(APPLY_EXCEPTION_FIELD_DESC);
          struct.applyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deletePersonalInfo_resultTupleSchemeFactory implements SchemeFactory {
      public deletePersonalInfo_resultTupleScheme getScheme() {
        return new deletePersonalInfo_resultTupleScheme();
      }
    }

    private static class deletePersonalInfo_resultTupleScheme extends TupleScheme<deletePersonalInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deletePersonalInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetApplyException()) {
          struct.applyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deletePersonalInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PersonalInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
          struct.applyException.read(iprot);
          struct.setApplyExceptionIsSet(true);
        }
      }
    }

  }

  public static class findCompanyInfo_args implements org.apache.thrift.TBase<findCompanyInfo_args, findCompanyInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<findCompanyInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findCompanyInfo_args");

    private static final org.apache.thrift.protocol.TField FIND_COMPANY_INFO_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("findCompanyInfoParams", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findCompanyInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findCompanyInfo_argsTupleSchemeFactory());
    }

    public com.linyk3.thrift.apply.params.FindCompanyInfoParams findCompanyInfoParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIND_COMPANY_INFO_PARAMS((short)1, "findCompanyInfoParams");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIND_COMPANY_INFO_PARAMS
            return FIND_COMPANY_INFO_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIND_COMPANY_INFO_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("findCompanyInfoParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.linyk3.thrift.apply.params.FindCompanyInfoParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findCompanyInfo_args.class, metaDataMap);
    }

    public findCompanyInfo_args() {
    }

    public findCompanyInfo_args(
      com.linyk3.thrift.apply.params.FindCompanyInfoParams findCompanyInfoParams)
    {
      this();
      this.findCompanyInfoParams = findCompanyInfoParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findCompanyInfo_args(findCompanyInfo_args other) {
      if (other.isSetFindCompanyInfoParams()) {
        this.findCompanyInfoParams = new com.linyk3.thrift.apply.params.FindCompanyInfoParams(other.findCompanyInfoParams);
      }
    }

    public findCompanyInfo_args deepCopy() {
      return new findCompanyInfo_args(this);
    }

    @Override
    public void clear() {
      this.findCompanyInfoParams = null;
    }

    public com.linyk3.thrift.apply.params.FindCompanyInfoParams getFindCompanyInfoParams() {
      return this.findCompanyInfoParams;
    }

    public findCompanyInfo_args setFindCompanyInfoParams(com.linyk3.thrift.apply.params.FindCompanyInfoParams findCompanyInfoParams) {
      this.findCompanyInfoParams = findCompanyInfoParams;
      return this;
    }

    public void unsetFindCompanyInfoParams() {
      this.findCompanyInfoParams = null;
    }

    /** Returns true if field findCompanyInfoParams is set (has been assigned a value) and false otherwise */
    public boolean isSetFindCompanyInfoParams() {
      return this.findCompanyInfoParams != null;
    }

    public void setFindCompanyInfoParamsIsSet(boolean value) {
      if (!value) {
        this.findCompanyInfoParams = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FIND_COMPANY_INFO_PARAMS:
        if (value == null) {
          unsetFindCompanyInfoParams();
        } else {
          setFindCompanyInfoParams((com.linyk3.thrift.apply.params.FindCompanyInfoParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FIND_COMPANY_INFO_PARAMS:
        return getFindCompanyInfoParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FIND_COMPANY_INFO_PARAMS:
        return isSetFindCompanyInfoParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findCompanyInfo_args)
        return this.equals((findCompanyInfo_args)that);
      return false;
    }

    public boolean equals(findCompanyInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_findCompanyInfoParams = true && this.isSetFindCompanyInfoParams();
      boolean that_present_findCompanyInfoParams = true && that.isSetFindCompanyInfoParams();
      if (this_present_findCompanyInfoParams || that_present_findCompanyInfoParams) {
        if (!(this_present_findCompanyInfoParams && that_present_findCompanyInfoParams))
          return false;
        if (!this.findCompanyInfoParams.equals(that.findCompanyInfoParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_findCompanyInfoParams = true && (isSetFindCompanyInfoParams());
      list.add(present_findCompanyInfoParams);
      if (present_findCompanyInfoParams)
        list.add(findCompanyInfoParams);

      return list.hashCode();
    }

    @Override
    public int compareTo(findCompanyInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFindCompanyInfoParams()).compareTo(other.isSetFindCompanyInfoParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFindCompanyInfoParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.findCompanyInfoParams, other.findCompanyInfoParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findCompanyInfo_args(");
      boolean first = true;

      sb.append("findCompanyInfoParams:");
      if (this.findCompanyInfoParams == null) {
        sb.append("null");
      } else {
        sb.append(this.findCompanyInfoParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (findCompanyInfoParams != null) {
        findCompanyInfoParams.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findCompanyInfo_argsStandardSchemeFactory implements SchemeFactory {
      public findCompanyInfo_argsStandardScheme getScheme() {
        return new findCompanyInfo_argsStandardScheme();
      }
    }

    private static class findCompanyInfo_argsStandardScheme extends StandardScheme<findCompanyInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findCompanyInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIND_COMPANY_INFO_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.findCompanyInfoParams = new com.linyk3.thrift.apply.params.FindCompanyInfoParams();
                struct.findCompanyInfoParams.read(iprot);
                struct.setFindCompanyInfoParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findCompanyInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.findCompanyInfoParams != null) {
          oprot.writeFieldBegin(FIND_COMPANY_INFO_PARAMS_FIELD_DESC);
          struct.findCompanyInfoParams.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findCompanyInfo_argsTupleSchemeFactory implements SchemeFactory {
      public findCompanyInfo_argsTupleScheme getScheme() {
        return new findCompanyInfo_argsTupleScheme();
      }
    }

    private static class findCompanyInfo_argsTupleScheme extends TupleScheme<findCompanyInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findCompanyInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFindCompanyInfoParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFindCompanyInfoParams()) {
          struct.findCompanyInfoParams.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findCompanyInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.findCompanyInfoParams = new com.linyk3.thrift.apply.params.FindCompanyInfoParams();
          struct.findCompanyInfoParams.read(iprot);
          struct.setFindCompanyInfoParamsIsSet(true);
        }
      }
    }

  }

  public static class findCompanyInfo_result implements org.apache.thrift.TBase<findCompanyInfo_result, findCompanyInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<findCompanyInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findCompanyInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField APPLY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findCompanyInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findCompanyInfo_resultTupleSchemeFactory());
    }

    public CompanyInfo success; // required
    public com.linyk3.thrift.apply.exception.ApplyException applyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLY_EXCEPTION((short)1, "applyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLY_EXCEPTION
            return APPLY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CompanyInfo.class)));
      tmpMap.put(_Fields.APPLY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findCompanyInfo_result.class, metaDataMap);
    }

    public findCompanyInfo_result() {
    }

    public findCompanyInfo_result(
      CompanyInfo success,
      com.linyk3.thrift.apply.exception.ApplyException applyException)
    {
      this();
      this.success = success;
      this.applyException = applyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findCompanyInfo_result(findCompanyInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new CompanyInfo(other.success);
      }
      if (other.isSetApplyException()) {
        this.applyException = new com.linyk3.thrift.apply.exception.ApplyException(other.applyException);
      }
    }

    public findCompanyInfo_result deepCopy() {
      return new findCompanyInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applyException = null;
    }

    public CompanyInfo getSuccess() {
      return this.success;
    }

    public findCompanyInfo_result setSuccess(CompanyInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.linyk3.thrift.apply.exception.ApplyException getApplyException() {
      return this.applyException;
    }

    public findCompanyInfo_result setApplyException(com.linyk3.thrift.apply.exception.ApplyException applyException) {
      this.applyException = applyException;
      return this;
    }

    public void unsetApplyException() {
      this.applyException = null;
    }

    /** Returns true if field applyException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyException() {
      return this.applyException != null;
    }

    public void setApplyExceptionIsSet(boolean value) {
      if (!value) {
        this.applyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CompanyInfo)value);
        }
        break;

      case APPLY_EXCEPTION:
        if (value == null) {
          unsetApplyException();
        } else {
          setApplyException((com.linyk3.thrift.apply.exception.ApplyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLY_EXCEPTION:
        return getApplyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLY_EXCEPTION:
        return isSetApplyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findCompanyInfo_result)
        return this.equals((findCompanyInfo_result)that);
      return false;
    }

    public boolean equals(findCompanyInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applyException = true && this.isSetApplyException();
      boolean that_present_applyException = true && that.isSetApplyException();
      if (this_present_applyException || that_present_applyException) {
        if (!(this_present_applyException && that_present_applyException))
          return false;
        if (!this.applyException.equals(that.applyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_applyException = true && (isSetApplyException());
      list.add(present_applyException);
      if (present_applyException)
        list.add(applyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(findCompanyInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyException()).compareTo(other.isSetApplyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyException, other.applyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findCompanyInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyException:");
      if (this.applyException == null) {
        sb.append("null");
      } else {
        sb.append(this.applyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findCompanyInfo_resultStandardSchemeFactory implements SchemeFactory {
      public findCompanyInfo_resultStandardScheme getScheme() {
        return new findCompanyInfo_resultStandardScheme();
      }
    }

    private static class findCompanyInfo_resultStandardScheme extends StandardScheme<findCompanyInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findCompanyInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CompanyInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
                struct.applyException.read(iprot);
                struct.setApplyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findCompanyInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.applyException != null) {
          oprot.writeFieldBegin(APPLY_EXCEPTION_FIELD_DESC);
          struct.applyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findCompanyInfo_resultTupleSchemeFactory implements SchemeFactory {
      public findCompanyInfo_resultTupleScheme getScheme() {
        return new findCompanyInfo_resultTupleScheme();
      }
    }

    private static class findCompanyInfo_resultTupleScheme extends TupleScheme<findCompanyInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findCompanyInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetApplyException()) {
          struct.applyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findCompanyInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new CompanyInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
          struct.applyException.read(iprot);
          struct.setApplyExceptionIsSet(true);
        }
      }
    }

  }

  public static class listCompanyInfo_args implements org.apache.thrift.TBase<listCompanyInfo_args, listCompanyInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<listCompanyInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCompanyInfo_args");

    private static final org.apache.thrift.protocol.TField LIST_COMPANY_INFO_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("listCompanyInfoParams", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listCompanyInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listCompanyInfo_argsTupleSchemeFactory());
    }

    public com.linyk3.thrift.apply.params.ListCompanyInfoParams listCompanyInfoParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIST_COMPANY_INFO_PARAMS((short)1, "listCompanyInfoParams");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIST_COMPANY_INFO_PARAMS
            return LIST_COMPANY_INFO_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIST_COMPANY_INFO_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("listCompanyInfoParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.linyk3.thrift.apply.params.ListCompanyInfoParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCompanyInfo_args.class, metaDataMap);
    }

    public listCompanyInfo_args() {
    }

    public listCompanyInfo_args(
      com.linyk3.thrift.apply.params.ListCompanyInfoParams listCompanyInfoParams)
    {
      this();
      this.listCompanyInfoParams = listCompanyInfoParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCompanyInfo_args(listCompanyInfo_args other) {
      if (other.isSetListCompanyInfoParams()) {
        this.listCompanyInfoParams = new com.linyk3.thrift.apply.params.ListCompanyInfoParams(other.listCompanyInfoParams);
      }
    }

    public listCompanyInfo_args deepCopy() {
      return new listCompanyInfo_args(this);
    }

    @Override
    public void clear() {
      this.listCompanyInfoParams = null;
    }

    public com.linyk3.thrift.apply.params.ListCompanyInfoParams getListCompanyInfoParams() {
      return this.listCompanyInfoParams;
    }

    public listCompanyInfo_args setListCompanyInfoParams(com.linyk3.thrift.apply.params.ListCompanyInfoParams listCompanyInfoParams) {
      this.listCompanyInfoParams = listCompanyInfoParams;
      return this;
    }

    public void unsetListCompanyInfoParams() {
      this.listCompanyInfoParams = null;
    }

    /** Returns true if field listCompanyInfoParams is set (has been assigned a value) and false otherwise */
    public boolean isSetListCompanyInfoParams() {
      return this.listCompanyInfoParams != null;
    }

    public void setListCompanyInfoParamsIsSet(boolean value) {
      if (!value) {
        this.listCompanyInfoParams = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIST_COMPANY_INFO_PARAMS:
        if (value == null) {
          unsetListCompanyInfoParams();
        } else {
          setListCompanyInfoParams((com.linyk3.thrift.apply.params.ListCompanyInfoParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIST_COMPANY_INFO_PARAMS:
        return getListCompanyInfoParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIST_COMPANY_INFO_PARAMS:
        return isSetListCompanyInfoParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listCompanyInfo_args)
        return this.equals((listCompanyInfo_args)that);
      return false;
    }

    public boolean equals(listCompanyInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_listCompanyInfoParams = true && this.isSetListCompanyInfoParams();
      boolean that_present_listCompanyInfoParams = true && that.isSetListCompanyInfoParams();
      if (this_present_listCompanyInfoParams || that_present_listCompanyInfoParams) {
        if (!(this_present_listCompanyInfoParams && that_present_listCompanyInfoParams))
          return false;
        if (!this.listCompanyInfoParams.equals(that.listCompanyInfoParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_listCompanyInfoParams = true && (isSetListCompanyInfoParams());
      list.add(present_listCompanyInfoParams);
      if (present_listCompanyInfoParams)
        list.add(listCompanyInfoParams);

      return list.hashCode();
    }

    @Override
    public int compareTo(listCompanyInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetListCompanyInfoParams()).compareTo(other.isSetListCompanyInfoParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListCompanyInfoParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listCompanyInfoParams, other.listCompanyInfoParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listCompanyInfo_args(");
      boolean first = true;

      sb.append("listCompanyInfoParams:");
      if (this.listCompanyInfoParams == null) {
        sb.append("null");
      } else {
        sb.append(this.listCompanyInfoParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (listCompanyInfoParams != null) {
        listCompanyInfoParams.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCompanyInfo_argsStandardSchemeFactory implements SchemeFactory {
      public listCompanyInfo_argsStandardScheme getScheme() {
        return new listCompanyInfo_argsStandardScheme();
      }
    }

    private static class listCompanyInfo_argsStandardScheme extends StandardScheme<listCompanyInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCompanyInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIST_COMPANY_INFO_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.listCompanyInfoParams = new com.linyk3.thrift.apply.params.ListCompanyInfoParams();
                struct.listCompanyInfoParams.read(iprot);
                struct.setListCompanyInfoParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCompanyInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.listCompanyInfoParams != null) {
          oprot.writeFieldBegin(LIST_COMPANY_INFO_PARAMS_FIELD_DESC);
          struct.listCompanyInfoParams.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCompanyInfo_argsTupleSchemeFactory implements SchemeFactory {
      public listCompanyInfo_argsTupleScheme getScheme() {
        return new listCompanyInfo_argsTupleScheme();
      }
    }

    private static class listCompanyInfo_argsTupleScheme extends TupleScheme<listCompanyInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCompanyInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetListCompanyInfoParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetListCompanyInfoParams()) {
          struct.listCompanyInfoParams.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCompanyInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.listCompanyInfoParams = new com.linyk3.thrift.apply.params.ListCompanyInfoParams();
          struct.listCompanyInfoParams.read(iprot);
          struct.setListCompanyInfoParamsIsSet(true);
        }
      }
    }

  }

  public static class listCompanyInfo_result implements org.apache.thrift.TBase<listCompanyInfo_result, listCompanyInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<listCompanyInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listCompanyInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField APPLY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listCompanyInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listCompanyInfo_resultTupleSchemeFactory());
    }

    public List<CompanyInfo> success; // required
    public com.linyk3.thrift.apply.exception.ApplyException applyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLY_EXCEPTION((short)1, "applyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLY_EXCEPTION
            return APPLY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CompanyInfo.class))));
      tmpMap.put(_Fields.APPLY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listCompanyInfo_result.class, metaDataMap);
    }

    public listCompanyInfo_result() {
    }

    public listCompanyInfo_result(
      List<CompanyInfo> success,
      com.linyk3.thrift.apply.exception.ApplyException applyException)
    {
      this();
      this.success = success;
      this.applyException = applyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listCompanyInfo_result(listCompanyInfo_result other) {
      if (other.isSetSuccess()) {
        List<CompanyInfo> __this__success = new ArrayList<CompanyInfo>(other.success.size());
        for (CompanyInfo other_element : other.success) {
          __this__success.add(new CompanyInfo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetApplyException()) {
        this.applyException = new com.linyk3.thrift.apply.exception.ApplyException(other.applyException);
      }
    }

    public listCompanyInfo_result deepCopy() {
      return new listCompanyInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applyException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CompanyInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CompanyInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<CompanyInfo>();
      }
      this.success.add(elem);
    }

    public List<CompanyInfo> getSuccess() {
      return this.success;
    }

    public listCompanyInfo_result setSuccess(List<CompanyInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.linyk3.thrift.apply.exception.ApplyException getApplyException() {
      return this.applyException;
    }

    public listCompanyInfo_result setApplyException(com.linyk3.thrift.apply.exception.ApplyException applyException) {
      this.applyException = applyException;
      return this;
    }

    public void unsetApplyException() {
      this.applyException = null;
    }

    /** Returns true if field applyException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyException() {
      return this.applyException != null;
    }

    public void setApplyExceptionIsSet(boolean value) {
      if (!value) {
        this.applyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CompanyInfo>)value);
        }
        break;

      case APPLY_EXCEPTION:
        if (value == null) {
          unsetApplyException();
        } else {
          setApplyException((com.linyk3.thrift.apply.exception.ApplyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLY_EXCEPTION:
        return getApplyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLY_EXCEPTION:
        return isSetApplyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listCompanyInfo_result)
        return this.equals((listCompanyInfo_result)that);
      return false;
    }

    public boolean equals(listCompanyInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applyException = true && this.isSetApplyException();
      boolean that_present_applyException = true && that.isSetApplyException();
      if (this_present_applyException || that_present_applyException) {
        if (!(this_present_applyException && that_present_applyException))
          return false;
        if (!this.applyException.equals(that.applyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_applyException = true && (isSetApplyException());
      list.add(present_applyException);
      if (present_applyException)
        list.add(applyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(listCompanyInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyException()).compareTo(other.isSetApplyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyException, other.applyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listCompanyInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyException:");
      if (this.applyException == null) {
        sb.append("null");
      } else {
        sb.append(this.applyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listCompanyInfo_resultStandardSchemeFactory implements SchemeFactory {
      public listCompanyInfo_resultStandardScheme getScheme() {
        return new listCompanyInfo_resultStandardScheme();
      }
    }

    private static class listCompanyInfo_resultStandardScheme extends StandardScheme<listCompanyInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listCompanyInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                  struct.success = new ArrayList<CompanyInfo>(_list128.size);
                  CompanyInfo _elem129;
                  for (int _i130 = 0; _i130 < _list128.size; ++_i130)
                  {
                    _elem129 = new CompanyInfo();
                    _elem129.read(iprot);
                    struct.success.add(_elem129);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
                struct.applyException.read(iprot);
                struct.setApplyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listCompanyInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CompanyInfo _iter131 : struct.success)
            {
              _iter131.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.applyException != null) {
          oprot.writeFieldBegin(APPLY_EXCEPTION_FIELD_DESC);
          struct.applyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listCompanyInfo_resultTupleSchemeFactory implements SchemeFactory {
      public listCompanyInfo_resultTupleScheme getScheme() {
        return new listCompanyInfo_resultTupleScheme();
      }
    }

    private static class listCompanyInfo_resultTupleScheme extends TupleScheme<listCompanyInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listCompanyInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CompanyInfo _iter132 : struct.success)
            {
              _iter132.write(oprot);
            }
          }
        }
        if (struct.isSetApplyException()) {
          struct.applyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listCompanyInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CompanyInfo>(_list133.size);
            CompanyInfo _elem134;
            for (int _i135 = 0; _i135 < _list133.size; ++_i135)
            {
              _elem134 = new CompanyInfo();
              _elem134.read(iprot);
              struct.success.add(_elem134);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
          struct.applyException.read(iprot);
          struct.setApplyExceptionIsSet(true);
        }
      }
    }

  }

  public static class updateCompanyInfo_args implements org.apache.thrift.TBase<updateCompanyInfo_args, updateCompanyInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateCompanyInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCompanyInfo_args");

    private static final org.apache.thrift.protocol.TField COMPANY_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("companyInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCompanyInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCompanyInfo_argsTupleSchemeFactory());
    }

    public CompanyInfo companyInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPANY_INFO((short)1, "companyInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPANY_INFO
            return COMPANY_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPANY_INFO, new org.apache.thrift.meta_data.FieldMetaData("companyInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CompanyInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCompanyInfo_args.class, metaDataMap);
    }

    public updateCompanyInfo_args() {
    }

    public updateCompanyInfo_args(
      CompanyInfo companyInfo)
    {
      this();
      this.companyInfo = companyInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCompanyInfo_args(updateCompanyInfo_args other) {
      if (other.isSetCompanyInfo()) {
        this.companyInfo = new CompanyInfo(other.companyInfo);
      }
    }

    public updateCompanyInfo_args deepCopy() {
      return new updateCompanyInfo_args(this);
    }

    @Override
    public void clear() {
      this.companyInfo = null;
    }

    public CompanyInfo getCompanyInfo() {
      return this.companyInfo;
    }

    public updateCompanyInfo_args setCompanyInfo(CompanyInfo companyInfo) {
      this.companyInfo = companyInfo;
      return this;
    }

    public void unsetCompanyInfo() {
      this.companyInfo = null;
    }

    /** Returns true if field companyInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetCompanyInfo() {
      return this.companyInfo != null;
    }

    public void setCompanyInfoIsSet(boolean value) {
      if (!value) {
        this.companyInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMPANY_INFO:
        if (value == null) {
          unsetCompanyInfo();
        } else {
          setCompanyInfo((CompanyInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPANY_INFO:
        return getCompanyInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMPANY_INFO:
        return isSetCompanyInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCompanyInfo_args)
        return this.equals((updateCompanyInfo_args)that);
      return false;
    }

    public boolean equals(updateCompanyInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_companyInfo = true && this.isSetCompanyInfo();
      boolean that_present_companyInfo = true && that.isSetCompanyInfo();
      if (this_present_companyInfo || that_present_companyInfo) {
        if (!(this_present_companyInfo && that_present_companyInfo))
          return false;
        if (!this.companyInfo.equals(that.companyInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_companyInfo = true && (isSetCompanyInfo());
      list.add(present_companyInfo);
      if (present_companyInfo)
        list.add(companyInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateCompanyInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCompanyInfo()).compareTo(other.isSetCompanyInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompanyInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyInfo, other.companyInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCompanyInfo_args(");
      boolean first = true;

      sb.append("companyInfo:");
      if (this.companyInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.companyInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (companyInfo != null) {
        companyInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCompanyInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateCompanyInfo_argsStandardScheme getScheme() {
        return new updateCompanyInfo_argsStandardScheme();
      }
    }

    private static class updateCompanyInfo_argsStandardScheme extends StandardScheme<updateCompanyInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCompanyInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPANY_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.companyInfo = new CompanyInfo();
                struct.companyInfo.read(iprot);
                struct.setCompanyInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCompanyInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.companyInfo != null) {
          oprot.writeFieldBegin(COMPANY_INFO_FIELD_DESC);
          struct.companyInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCompanyInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateCompanyInfo_argsTupleScheme getScheme() {
        return new updateCompanyInfo_argsTupleScheme();
      }
    }

    private static class updateCompanyInfo_argsTupleScheme extends TupleScheme<updateCompanyInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCompanyInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCompanyInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCompanyInfo()) {
          struct.companyInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCompanyInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.companyInfo = new CompanyInfo();
          struct.companyInfo.read(iprot);
          struct.setCompanyInfoIsSet(true);
        }
      }
    }

  }

  public static class updateCompanyInfo_result implements org.apache.thrift.TBase<updateCompanyInfo_result, updateCompanyInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateCompanyInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCompanyInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField APPLY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCompanyInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCompanyInfo_resultTupleSchemeFactory());
    }

    public CompanyInfo success; // required
    public com.linyk3.thrift.apply.exception.ApplyException applyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLY_EXCEPTION((short)1, "applyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLY_EXCEPTION
            return APPLY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CompanyInfo.class)));
      tmpMap.put(_Fields.APPLY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCompanyInfo_result.class, metaDataMap);
    }

    public updateCompanyInfo_result() {
    }

    public updateCompanyInfo_result(
      CompanyInfo success,
      com.linyk3.thrift.apply.exception.ApplyException applyException)
    {
      this();
      this.success = success;
      this.applyException = applyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCompanyInfo_result(updateCompanyInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new CompanyInfo(other.success);
      }
      if (other.isSetApplyException()) {
        this.applyException = new com.linyk3.thrift.apply.exception.ApplyException(other.applyException);
      }
    }

    public updateCompanyInfo_result deepCopy() {
      return new updateCompanyInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applyException = null;
    }

    public CompanyInfo getSuccess() {
      return this.success;
    }

    public updateCompanyInfo_result setSuccess(CompanyInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.linyk3.thrift.apply.exception.ApplyException getApplyException() {
      return this.applyException;
    }

    public updateCompanyInfo_result setApplyException(com.linyk3.thrift.apply.exception.ApplyException applyException) {
      this.applyException = applyException;
      return this;
    }

    public void unsetApplyException() {
      this.applyException = null;
    }

    /** Returns true if field applyException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyException() {
      return this.applyException != null;
    }

    public void setApplyExceptionIsSet(boolean value) {
      if (!value) {
        this.applyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CompanyInfo)value);
        }
        break;

      case APPLY_EXCEPTION:
        if (value == null) {
          unsetApplyException();
        } else {
          setApplyException((com.linyk3.thrift.apply.exception.ApplyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLY_EXCEPTION:
        return getApplyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLY_EXCEPTION:
        return isSetApplyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCompanyInfo_result)
        return this.equals((updateCompanyInfo_result)that);
      return false;
    }

    public boolean equals(updateCompanyInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applyException = true && this.isSetApplyException();
      boolean that_present_applyException = true && that.isSetApplyException();
      if (this_present_applyException || that_present_applyException) {
        if (!(this_present_applyException && that_present_applyException))
          return false;
        if (!this.applyException.equals(that.applyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_applyException = true && (isSetApplyException());
      list.add(present_applyException);
      if (present_applyException)
        list.add(applyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateCompanyInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyException()).compareTo(other.isSetApplyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyException, other.applyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCompanyInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyException:");
      if (this.applyException == null) {
        sb.append("null");
      } else {
        sb.append(this.applyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCompanyInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateCompanyInfo_resultStandardScheme getScheme() {
        return new updateCompanyInfo_resultStandardScheme();
      }
    }

    private static class updateCompanyInfo_resultStandardScheme extends StandardScheme<updateCompanyInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCompanyInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CompanyInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
                struct.applyException.read(iprot);
                struct.setApplyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCompanyInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.applyException != null) {
          oprot.writeFieldBegin(APPLY_EXCEPTION_FIELD_DESC);
          struct.applyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCompanyInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateCompanyInfo_resultTupleScheme getScheme() {
        return new updateCompanyInfo_resultTupleScheme();
      }
    }

    private static class updateCompanyInfo_resultTupleScheme extends TupleScheme<updateCompanyInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCompanyInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetApplyException()) {
          struct.applyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCompanyInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new CompanyInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
          struct.applyException.read(iprot);
          struct.setApplyExceptionIsSet(true);
        }
      }
    }

  }

  public static class deleteCompanyInfo_args implements org.apache.thrift.TBase<deleteCompanyInfo_args, deleteCompanyInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteCompanyInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCompanyInfo_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteCompanyInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteCompanyInfo_argsTupleSchemeFactory());
    }

    public String _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCompanyInfo_args.class, metaDataMap);
    }

    public deleteCompanyInfo_args() {
    }

    public deleteCompanyInfo_args(
      String _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCompanyInfo_args(deleteCompanyInfo_args other) {
      if (other.isSet_id()) {
        this._id = other._id;
      }
    }

    public deleteCompanyInfo_args deepCopy() {
      return new deleteCompanyInfo_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public String get_id() {
      return this._id;
    }

    public deleteCompanyInfo_args set_id(String _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteCompanyInfo_args)
        return this.equals((deleteCompanyInfo_args)that);
      return false;
    }

    public boolean equals(deleteCompanyInfo_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present__id = true && (isSet_id());
      list.add(present__id);
      if (present__id)
        list.add(_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteCompanyInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(other.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, other._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteCompanyInfo_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCompanyInfo_argsStandardSchemeFactory implements SchemeFactory {
      public deleteCompanyInfo_argsStandardScheme getScheme() {
        return new deleteCompanyInfo_argsStandardScheme();
      }
    }

    private static class deleteCompanyInfo_argsStandardScheme extends StandardScheme<deleteCompanyInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCompanyInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct._id = iprot.readString();
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCompanyInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          oprot.writeString(struct._id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCompanyInfo_argsTupleSchemeFactory implements SchemeFactory {
      public deleteCompanyInfo_argsTupleScheme getScheme() {
        return new deleteCompanyInfo_argsTupleScheme();
      }
    }

    private static class deleteCompanyInfo_argsTupleScheme extends TupleScheme<deleteCompanyInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCompanyInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          oprot.writeString(struct._id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCompanyInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = iprot.readString();
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class deleteCompanyInfo_result implements org.apache.thrift.TBase<deleteCompanyInfo_result, deleteCompanyInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteCompanyInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCompanyInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField APPLY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteCompanyInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteCompanyInfo_resultTupleSchemeFactory());
    }

    public CompanyInfo success; // required
    public com.linyk3.thrift.apply.exception.ApplyException applyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLY_EXCEPTION((short)1, "applyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLY_EXCEPTION
            return APPLY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CompanyInfo.class)));
      tmpMap.put(_Fields.APPLY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCompanyInfo_result.class, metaDataMap);
    }

    public deleteCompanyInfo_result() {
    }

    public deleteCompanyInfo_result(
      CompanyInfo success,
      com.linyk3.thrift.apply.exception.ApplyException applyException)
    {
      this();
      this.success = success;
      this.applyException = applyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCompanyInfo_result(deleteCompanyInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new CompanyInfo(other.success);
      }
      if (other.isSetApplyException()) {
        this.applyException = new com.linyk3.thrift.apply.exception.ApplyException(other.applyException);
      }
    }

    public deleteCompanyInfo_result deepCopy() {
      return new deleteCompanyInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applyException = null;
    }

    public CompanyInfo getSuccess() {
      return this.success;
    }

    public deleteCompanyInfo_result setSuccess(CompanyInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.linyk3.thrift.apply.exception.ApplyException getApplyException() {
      return this.applyException;
    }

    public deleteCompanyInfo_result setApplyException(com.linyk3.thrift.apply.exception.ApplyException applyException) {
      this.applyException = applyException;
      return this;
    }

    public void unsetApplyException() {
      this.applyException = null;
    }

    /** Returns true if field applyException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyException() {
      return this.applyException != null;
    }

    public void setApplyExceptionIsSet(boolean value) {
      if (!value) {
        this.applyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CompanyInfo)value);
        }
        break;

      case APPLY_EXCEPTION:
        if (value == null) {
          unsetApplyException();
        } else {
          setApplyException((com.linyk3.thrift.apply.exception.ApplyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLY_EXCEPTION:
        return getApplyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLY_EXCEPTION:
        return isSetApplyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteCompanyInfo_result)
        return this.equals((deleteCompanyInfo_result)that);
      return false;
    }

    public boolean equals(deleteCompanyInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applyException = true && this.isSetApplyException();
      boolean that_present_applyException = true && that.isSetApplyException();
      if (this_present_applyException || that_present_applyException) {
        if (!(this_present_applyException && that_present_applyException))
          return false;
        if (!this.applyException.equals(that.applyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_applyException = true && (isSetApplyException());
      list.add(present_applyException);
      if (present_applyException)
        list.add(applyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteCompanyInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyException()).compareTo(other.isSetApplyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyException, other.applyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteCompanyInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyException:");
      if (this.applyException == null) {
        sb.append("null");
      } else {
        sb.append(this.applyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCompanyInfo_resultStandardSchemeFactory implements SchemeFactory {
      public deleteCompanyInfo_resultStandardScheme getScheme() {
        return new deleteCompanyInfo_resultStandardScheme();
      }
    }

    private static class deleteCompanyInfo_resultStandardScheme extends StandardScheme<deleteCompanyInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCompanyInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CompanyInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
                struct.applyException.read(iprot);
                struct.setApplyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCompanyInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.applyException != null) {
          oprot.writeFieldBegin(APPLY_EXCEPTION_FIELD_DESC);
          struct.applyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCompanyInfo_resultTupleSchemeFactory implements SchemeFactory {
      public deleteCompanyInfo_resultTupleScheme getScheme() {
        return new deleteCompanyInfo_resultTupleScheme();
      }
    }

    private static class deleteCompanyInfo_resultTupleScheme extends TupleScheme<deleteCompanyInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCompanyInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetApplyException()) {
          struct.applyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCompanyInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new CompanyInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
          struct.applyException.read(iprot);
          struct.setApplyExceptionIsSet(true);
        }
      }
    }

  }

  public static class findEmployInfo_args implements org.apache.thrift.TBase<findEmployInfo_args, findEmployInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<findEmployInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findEmployInfo_args");

    private static final org.apache.thrift.protocol.TField FIND_EMPLOY_INFO_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("findEmployInfoParams", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findEmployInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findEmployInfo_argsTupleSchemeFactory());
    }

    public com.linyk3.thrift.apply.params.FindEmployInfoParams findEmployInfoParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIND_EMPLOY_INFO_PARAMS((short)1, "findEmployInfoParams");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIND_EMPLOY_INFO_PARAMS
            return FIND_EMPLOY_INFO_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIND_EMPLOY_INFO_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("findEmployInfoParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.linyk3.thrift.apply.params.FindEmployInfoParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findEmployInfo_args.class, metaDataMap);
    }

    public findEmployInfo_args() {
    }

    public findEmployInfo_args(
      com.linyk3.thrift.apply.params.FindEmployInfoParams findEmployInfoParams)
    {
      this();
      this.findEmployInfoParams = findEmployInfoParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findEmployInfo_args(findEmployInfo_args other) {
      if (other.isSetFindEmployInfoParams()) {
        this.findEmployInfoParams = new com.linyk3.thrift.apply.params.FindEmployInfoParams(other.findEmployInfoParams);
      }
    }

    public findEmployInfo_args deepCopy() {
      return new findEmployInfo_args(this);
    }

    @Override
    public void clear() {
      this.findEmployInfoParams = null;
    }

    public com.linyk3.thrift.apply.params.FindEmployInfoParams getFindEmployInfoParams() {
      return this.findEmployInfoParams;
    }

    public findEmployInfo_args setFindEmployInfoParams(com.linyk3.thrift.apply.params.FindEmployInfoParams findEmployInfoParams) {
      this.findEmployInfoParams = findEmployInfoParams;
      return this;
    }

    public void unsetFindEmployInfoParams() {
      this.findEmployInfoParams = null;
    }

    /** Returns true if field findEmployInfoParams is set (has been assigned a value) and false otherwise */
    public boolean isSetFindEmployInfoParams() {
      return this.findEmployInfoParams != null;
    }

    public void setFindEmployInfoParamsIsSet(boolean value) {
      if (!value) {
        this.findEmployInfoParams = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FIND_EMPLOY_INFO_PARAMS:
        if (value == null) {
          unsetFindEmployInfoParams();
        } else {
          setFindEmployInfoParams((com.linyk3.thrift.apply.params.FindEmployInfoParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FIND_EMPLOY_INFO_PARAMS:
        return getFindEmployInfoParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FIND_EMPLOY_INFO_PARAMS:
        return isSetFindEmployInfoParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findEmployInfo_args)
        return this.equals((findEmployInfo_args)that);
      return false;
    }

    public boolean equals(findEmployInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_findEmployInfoParams = true && this.isSetFindEmployInfoParams();
      boolean that_present_findEmployInfoParams = true && that.isSetFindEmployInfoParams();
      if (this_present_findEmployInfoParams || that_present_findEmployInfoParams) {
        if (!(this_present_findEmployInfoParams && that_present_findEmployInfoParams))
          return false;
        if (!this.findEmployInfoParams.equals(that.findEmployInfoParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_findEmployInfoParams = true && (isSetFindEmployInfoParams());
      list.add(present_findEmployInfoParams);
      if (present_findEmployInfoParams)
        list.add(findEmployInfoParams);

      return list.hashCode();
    }

    @Override
    public int compareTo(findEmployInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFindEmployInfoParams()).compareTo(other.isSetFindEmployInfoParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFindEmployInfoParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.findEmployInfoParams, other.findEmployInfoParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findEmployInfo_args(");
      boolean first = true;

      sb.append("findEmployInfoParams:");
      if (this.findEmployInfoParams == null) {
        sb.append("null");
      } else {
        sb.append(this.findEmployInfoParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (findEmployInfoParams != null) {
        findEmployInfoParams.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findEmployInfo_argsStandardSchemeFactory implements SchemeFactory {
      public findEmployInfo_argsStandardScheme getScheme() {
        return new findEmployInfo_argsStandardScheme();
      }
    }

    private static class findEmployInfo_argsStandardScheme extends StandardScheme<findEmployInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findEmployInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIND_EMPLOY_INFO_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.findEmployInfoParams = new com.linyk3.thrift.apply.params.FindEmployInfoParams();
                struct.findEmployInfoParams.read(iprot);
                struct.setFindEmployInfoParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findEmployInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.findEmployInfoParams != null) {
          oprot.writeFieldBegin(FIND_EMPLOY_INFO_PARAMS_FIELD_DESC);
          struct.findEmployInfoParams.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findEmployInfo_argsTupleSchemeFactory implements SchemeFactory {
      public findEmployInfo_argsTupleScheme getScheme() {
        return new findEmployInfo_argsTupleScheme();
      }
    }

    private static class findEmployInfo_argsTupleScheme extends TupleScheme<findEmployInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findEmployInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFindEmployInfoParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFindEmployInfoParams()) {
          struct.findEmployInfoParams.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findEmployInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.findEmployInfoParams = new com.linyk3.thrift.apply.params.FindEmployInfoParams();
          struct.findEmployInfoParams.read(iprot);
          struct.setFindEmployInfoParamsIsSet(true);
        }
      }
    }

  }

  public static class findEmployInfo_result implements org.apache.thrift.TBase<findEmployInfo_result, findEmployInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<findEmployInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findEmployInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField APPLY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findEmployInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findEmployInfo_resultTupleSchemeFactory());
    }

    public EmployInfo success; // required
    public com.linyk3.thrift.apply.exception.ApplyException applyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLY_EXCEPTION((short)1, "applyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLY_EXCEPTION
            return APPLY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EmployInfo.class)));
      tmpMap.put(_Fields.APPLY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findEmployInfo_result.class, metaDataMap);
    }

    public findEmployInfo_result() {
    }

    public findEmployInfo_result(
      EmployInfo success,
      com.linyk3.thrift.apply.exception.ApplyException applyException)
    {
      this();
      this.success = success;
      this.applyException = applyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findEmployInfo_result(findEmployInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new EmployInfo(other.success);
      }
      if (other.isSetApplyException()) {
        this.applyException = new com.linyk3.thrift.apply.exception.ApplyException(other.applyException);
      }
    }

    public findEmployInfo_result deepCopy() {
      return new findEmployInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applyException = null;
    }

    public EmployInfo getSuccess() {
      return this.success;
    }

    public findEmployInfo_result setSuccess(EmployInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.linyk3.thrift.apply.exception.ApplyException getApplyException() {
      return this.applyException;
    }

    public findEmployInfo_result setApplyException(com.linyk3.thrift.apply.exception.ApplyException applyException) {
      this.applyException = applyException;
      return this;
    }

    public void unsetApplyException() {
      this.applyException = null;
    }

    /** Returns true if field applyException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyException() {
      return this.applyException != null;
    }

    public void setApplyExceptionIsSet(boolean value) {
      if (!value) {
        this.applyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((EmployInfo)value);
        }
        break;

      case APPLY_EXCEPTION:
        if (value == null) {
          unsetApplyException();
        } else {
          setApplyException((com.linyk3.thrift.apply.exception.ApplyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLY_EXCEPTION:
        return getApplyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLY_EXCEPTION:
        return isSetApplyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findEmployInfo_result)
        return this.equals((findEmployInfo_result)that);
      return false;
    }

    public boolean equals(findEmployInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applyException = true && this.isSetApplyException();
      boolean that_present_applyException = true && that.isSetApplyException();
      if (this_present_applyException || that_present_applyException) {
        if (!(this_present_applyException && that_present_applyException))
          return false;
        if (!this.applyException.equals(that.applyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_applyException = true && (isSetApplyException());
      list.add(present_applyException);
      if (present_applyException)
        list.add(applyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(findEmployInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyException()).compareTo(other.isSetApplyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyException, other.applyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findEmployInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyException:");
      if (this.applyException == null) {
        sb.append("null");
      } else {
        sb.append(this.applyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findEmployInfo_resultStandardSchemeFactory implements SchemeFactory {
      public findEmployInfo_resultStandardScheme getScheme() {
        return new findEmployInfo_resultStandardScheme();
      }
    }

    private static class findEmployInfo_resultStandardScheme extends StandardScheme<findEmployInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findEmployInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new EmployInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
                struct.applyException.read(iprot);
                struct.setApplyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findEmployInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.applyException != null) {
          oprot.writeFieldBegin(APPLY_EXCEPTION_FIELD_DESC);
          struct.applyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findEmployInfo_resultTupleSchemeFactory implements SchemeFactory {
      public findEmployInfo_resultTupleScheme getScheme() {
        return new findEmployInfo_resultTupleScheme();
      }
    }

    private static class findEmployInfo_resultTupleScheme extends TupleScheme<findEmployInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findEmployInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetApplyException()) {
          struct.applyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findEmployInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new EmployInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
          struct.applyException.read(iprot);
          struct.setApplyExceptionIsSet(true);
        }
      }
    }

  }

  public static class listEmployInfo_args implements org.apache.thrift.TBase<listEmployInfo_args, listEmployInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<listEmployInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listEmployInfo_args");

    private static final org.apache.thrift.protocol.TField LIST_EMPLOY_INFO_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("listEmployInfoParams", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listEmployInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listEmployInfo_argsTupleSchemeFactory());
    }

    public com.linyk3.thrift.apply.params.ListEmployInfoParams listEmployInfoParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIST_EMPLOY_INFO_PARAMS((short)1, "listEmployInfoParams");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIST_EMPLOY_INFO_PARAMS
            return LIST_EMPLOY_INFO_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIST_EMPLOY_INFO_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("listEmployInfoParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.linyk3.thrift.apply.params.ListEmployInfoParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listEmployInfo_args.class, metaDataMap);
    }

    public listEmployInfo_args() {
    }

    public listEmployInfo_args(
      com.linyk3.thrift.apply.params.ListEmployInfoParams listEmployInfoParams)
    {
      this();
      this.listEmployInfoParams = listEmployInfoParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listEmployInfo_args(listEmployInfo_args other) {
      if (other.isSetListEmployInfoParams()) {
        this.listEmployInfoParams = new com.linyk3.thrift.apply.params.ListEmployInfoParams(other.listEmployInfoParams);
      }
    }

    public listEmployInfo_args deepCopy() {
      return new listEmployInfo_args(this);
    }

    @Override
    public void clear() {
      this.listEmployInfoParams = null;
    }

    public com.linyk3.thrift.apply.params.ListEmployInfoParams getListEmployInfoParams() {
      return this.listEmployInfoParams;
    }

    public listEmployInfo_args setListEmployInfoParams(com.linyk3.thrift.apply.params.ListEmployInfoParams listEmployInfoParams) {
      this.listEmployInfoParams = listEmployInfoParams;
      return this;
    }

    public void unsetListEmployInfoParams() {
      this.listEmployInfoParams = null;
    }

    /** Returns true if field listEmployInfoParams is set (has been assigned a value) and false otherwise */
    public boolean isSetListEmployInfoParams() {
      return this.listEmployInfoParams != null;
    }

    public void setListEmployInfoParamsIsSet(boolean value) {
      if (!value) {
        this.listEmployInfoParams = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIST_EMPLOY_INFO_PARAMS:
        if (value == null) {
          unsetListEmployInfoParams();
        } else {
          setListEmployInfoParams((com.linyk3.thrift.apply.params.ListEmployInfoParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIST_EMPLOY_INFO_PARAMS:
        return getListEmployInfoParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIST_EMPLOY_INFO_PARAMS:
        return isSetListEmployInfoParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listEmployInfo_args)
        return this.equals((listEmployInfo_args)that);
      return false;
    }

    public boolean equals(listEmployInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_listEmployInfoParams = true && this.isSetListEmployInfoParams();
      boolean that_present_listEmployInfoParams = true && that.isSetListEmployInfoParams();
      if (this_present_listEmployInfoParams || that_present_listEmployInfoParams) {
        if (!(this_present_listEmployInfoParams && that_present_listEmployInfoParams))
          return false;
        if (!this.listEmployInfoParams.equals(that.listEmployInfoParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_listEmployInfoParams = true && (isSetListEmployInfoParams());
      list.add(present_listEmployInfoParams);
      if (present_listEmployInfoParams)
        list.add(listEmployInfoParams);

      return list.hashCode();
    }

    @Override
    public int compareTo(listEmployInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetListEmployInfoParams()).compareTo(other.isSetListEmployInfoParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListEmployInfoParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listEmployInfoParams, other.listEmployInfoParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listEmployInfo_args(");
      boolean first = true;

      sb.append("listEmployInfoParams:");
      if (this.listEmployInfoParams == null) {
        sb.append("null");
      } else {
        sb.append(this.listEmployInfoParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (listEmployInfoParams != null) {
        listEmployInfoParams.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listEmployInfo_argsStandardSchemeFactory implements SchemeFactory {
      public listEmployInfo_argsStandardScheme getScheme() {
        return new listEmployInfo_argsStandardScheme();
      }
    }

    private static class listEmployInfo_argsStandardScheme extends StandardScheme<listEmployInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listEmployInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIST_EMPLOY_INFO_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.listEmployInfoParams = new com.linyk3.thrift.apply.params.ListEmployInfoParams();
                struct.listEmployInfoParams.read(iprot);
                struct.setListEmployInfoParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listEmployInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.listEmployInfoParams != null) {
          oprot.writeFieldBegin(LIST_EMPLOY_INFO_PARAMS_FIELD_DESC);
          struct.listEmployInfoParams.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listEmployInfo_argsTupleSchemeFactory implements SchemeFactory {
      public listEmployInfo_argsTupleScheme getScheme() {
        return new listEmployInfo_argsTupleScheme();
      }
    }

    private static class listEmployInfo_argsTupleScheme extends TupleScheme<listEmployInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listEmployInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetListEmployInfoParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetListEmployInfoParams()) {
          struct.listEmployInfoParams.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listEmployInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.listEmployInfoParams = new com.linyk3.thrift.apply.params.ListEmployInfoParams();
          struct.listEmployInfoParams.read(iprot);
          struct.setListEmployInfoParamsIsSet(true);
        }
      }
    }

  }

  public static class listEmployInfo_result implements org.apache.thrift.TBase<listEmployInfo_result, listEmployInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<listEmployInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listEmployInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField APPLY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listEmployInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listEmployInfo_resultTupleSchemeFactory());
    }

    public List<EmployInfo> success; // required
    public com.linyk3.thrift.apply.exception.ApplyException applyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLY_EXCEPTION((short)1, "applyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLY_EXCEPTION
            return APPLY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EmployInfo.class))));
      tmpMap.put(_Fields.APPLY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listEmployInfo_result.class, metaDataMap);
    }

    public listEmployInfo_result() {
    }

    public listEmployInfo_result(
      List<EmployInfo> success,
      com.linyk3.thrift.apply.exception.ApplyException applyException)
    {
      this();
      this.success = success;
      this.applyException = applyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listEmployInfo_result(listEmployInfo_result other) {
      if (other.isSetSuccess()) {
        List<EmployInfo> __this__success = new ArrayList<EmployInfo>(other.success.size());
        for (EmployInfo other_element : other.success) {
          __this__success.add(new EmployInfo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetApplyException()) {
        this.applyException = new com.linyk3.thrift.apply.exception.ApplyException(other.applyException);
      }
    }

    public listEmployInfo_result deepCopy() {
      return new listEmployInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applyException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<EmployInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(EmployInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<EmployInfo>();
      }
      this.success.add(elem);
    }

    public List<EmployInfo> getSuccess() {
      return this.success;
    }

    public listEmployInfo_result setSuccess(List<EmployInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.linyk3.thrift.apply.exception.ApplyException getApplyException() {
      return this.applyException;
    }

    public listEmployInfo_result setApplyException(com.linyk3.thrift.apply.exception.ApplyException applyException) {
      this.applyException = applyException;
      return this;
    }

    public void unsetApplyException() {
      this.applyException = null;
    }

    /** Returns true if field applyException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyException() {
      return this.applyException != null;
    }

    public void setApplyExceptionIsSet(boolean value) {
      if (!value) {
        this.applyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<EmployInfo>)value);
        }
        break;

      case APPLY_EXCEPTION:
        if (value == null) {
          unsetApplyException();
        } else {
          setApplyException((com.linyk3.thrift.apply.exception.ApplyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLY_EXCEPTION:
        return getApplyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLY_EXCEPTION:
        return isSetApplyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listEmployInfo_result)
        return this.equals((listEmployInfo_result)that);
      return false;
    }

    public boolean equals(listEmployInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applyException = true && this.isSetApplyException();
      boolean that_present_applyException = true && that.isSetApplyException();
      if (this_present_applyException || that_present_applyException) {
        if (!(this_present_applyException && that_present_applyException))
          return false;
        if (!this.applyException.equals(that.applyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_applyException = true && (isSetApplyException());
      list.add(present_applyException);
      if (present_applyException)
        list.add(applyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(listEmployInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyException()).compareTo(other.isSetApplyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyException, other.applyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listEmployInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyException:");
      if (this.applyException == null) {
        sb.append("null");
      } else {
        sb.append(this.applyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listEmployInfo_resultStandardSchemeFactory implements SchemeFactory {
      public listEmployInfo_resultStandardScheme getScheme() {
        return new listEmployInfo_resultStandardScheme();
      }
    }

    private static class listEmployInfo_resultStandardScheme extends StandardScheme<listEmployInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listEmployInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list136 = iprot.readListBegin();
                  struct.success = new ArrayList<EmployInfo>(_list136.size);
                  EmployInfo _elem137;
                  for (int _i138 = 0; _i138 < _list136.size; ++_i138)
                  {
                    _elem137 = new EmployInfo();
                    _elem137.read(iprot);
                    struct.success.add(_elem137);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
                struct.applyException.read(iprot);
                struct.setApplyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listEmployInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (EmployInfo _iter139 : struct.success)
            {
              _iter139.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.applyException != null) {
          oprot.writeFieldBegin(APPLY_EXCEPTION_FIELD_DESC);
          struct.applyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listEmployInfo_resultTupleSchemeFactory implements SchemeFactory {
      public listEmployInfo_resultTupleScheme getScheme() {
        return new listEmployInfo_resultTupleScheme();
      }
    }

    private static class listEmployInfo_resultTupleScheme extends TupleScheme<listEmployInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listEmployInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (EmployInfo _iter140 : struct.success)
            {
              _iter140.write(oprot);
            }
          }
        }
        if (struct.isSetApplyException()) {
          struct.applyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listEmployInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<EmployInfo>(_list141.size);
            EmployInfo _elem142;
            for (int _i143 = 0; _i143 < _list141.size; ++_i143)
            {
              _elem142 = new EmployInfo();
              _elem142.read(iprot);
              struct.success.add(_elem142);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
          struct.applyException.read(iprot);
          struct.setApplyExceptionIsSet(true);
        }
      }
    }

  }

  public static class updateEmployInfo_args implements org.apache.thrift.TBase<updateEmployInfo_args, updateEmployInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateEmployInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateEmployInfo_args");

    private static final org.apache.thrift.protocol.TField EMPLOY_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("employInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateEmployInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateEmployInfo_argsTupleSchemeFactory());
    }

    public EmployInfo employInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMPLOY_INFO((short)1, "employInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMPLOY_INFO
            return EMPLOY_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMPLOY_INFO, new org.apache.thrift.meta_data.FieldMetaData("employInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EmployInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateEmployInfo_args.class, metaDataMap);
    }

    public updateEmployInfo_args() {
    }

    public updateEmployInfo_args(
      EmployInfo employInfo)
    {
      this();
      this.employInfo = employInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateEmployInfo_args(updateEmployInfo_args other) {
      if (other.isSetEmployInfo()) {
        this.employInfo = new EmployInfo(other.employInfo);
      }
    }

    public updateEmployInfo_args deepCopy() {
      return new updateEmployInfo_args(this);
    }

    @Override
    public void clear() {
      this.employInfo = null;
    }

    public EmployInfo getEmployInfo() {
      return this.employInfo;
    }

    public updateEmployInfo_args setEmployInfo(EmployInfo employInfo) {
      this.employInfo = employInfo;
      return this;
    }

    public void unsetEmployInfo() {
      this.employInfo = null;
    }

    /** Returns true if field employInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetEmployInfo() {
      return this.employInfo != null;
    }

    public void setEmployInfoIsSet(boolean value) {
      if (!value) {
        this.employInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EMPLOY_INFO:
        if (value == null) {
          unsetEmployInfo();
        } else {
          setEmployInfo((EmployInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EMPLOY_INFO:
        return getEmployInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EMPLOY_INFO:
        return isSetEmployInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateEmployInfo_args)
        return this.equals((updateEmployInfo_args)that);
      return false;
    }

    public boolean equals(updateEmployInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_employInfo = true && this.isSetEmployInfo();
      boolean that_present_employInfo = true && that.isSetEmployInfo();
      if (this_present_employInfo || that_present_employInfo) {
        if (!(this_present_employInfo && that_present_employInfo))
          return false;
        if (!this.employInfo.equals(that.employInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_employInfo = true && (isSetEmployInfo());
      list.add(present_employInfo);
      if (present_employInfo)
        list.add(employInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateEmployInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEmployInfo()).compareTo(other.isSetEmployInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmployInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employInfo, other.employInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateEmployInfo_args(");
      boolean first = true;

      sb.append("employInfo:");
      if (this.employInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.employInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (employInfo != null) {
        employInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateEmployInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateEmployInfo_argsStandardScheme getScheme() {
        return new updateEmployInfo_argsStandardScheme();
      }
    }

    private static class updateEmployInfo_argsStandardScheme extends StandardScheme<updateEmployInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateEmployInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMPLOY_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.employInfo = new EmployInfo();
                struct.employInfo.read(iprot);
                struct.setEmployInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateEmployInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.employInfo != null) {
          oprot.writeFieldBegin(EMPLOY_INFO_FIELD_DESC);
          struct.employInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateEmployInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateEmployInfo_argsTupleScheme getScheme() {
        return new updateEmployInfo_argsTupleScheme();
      }
    }

    private static class updateEmployInfo_argsTupleScheme extends TupleScheme<updateEmployInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateEmployInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEmployInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEmployInfo()) {
          struct.employInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateEmployInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.employInfo = new EmployInfo();
          struct.employInfo.read(iprot);
          struct.setEmployInfoIsSet(true);
        }
      }
    }

  }

  public static class updateEmployInfo_result implements org.apache.thrift.TBase<updateEmployInfo_result, updateEmployInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateEmployInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateEmployInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField APPLY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateEmployInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateEmployInfo_resultTupleSchemeFactory());
    }

    public EmployInfo success; // required
    public com.linyk3.thrift.apply.exception.ApplyException applyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLY_EXCEPTION((short)1, "applyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLY_EXCEPTION
            return APPLY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EmployInfo.class)));
      tmpMap.put(_Fields.APPLY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateEmployInfo_result.class, metaDataMap);
    }

    public updateEmployInfo_result() {
    }

    public updateEmployInfo_result(
      EmployInfo success,
      com.linyk3.thrift.apply.exception.ApplyException applyException)
    {
      this();
      this.success = success;
      this.applyException = applyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateEmployInfo_result(updateEmployInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new EmployInfo(other.success);
      }
      if (other.isSetApplyException()) {
        this.applyException = new com.linyk3.thrift.apply.exception.ApplyException(other.applyException);
      }
    }

    public updateEmployInfo_result deepCopy() {
      return new updateEmployInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applyException = null;
    }

    public EmployInfo getSuccess() {
      return this.success;
    }

    public updateEmployInfo_result setSuccess(EmployInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.linyk3.thrift.apply.exception.ApplyException getApplyException() {
      return this.applyException;
    }

    public updateEmployInfo_result setApplyException(com.linyk3.thrift.apply.exception.ApplyException applyException) {
      this.applyException = applyException;
      return this;
    }

    public void unsetApplyException() {
      this.applyException = null;
    }

    /** Returns true if field applyException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyException() {
      return this.applyException != null;
    }

    public void setApplyExceptionIsSet(boolean value) {
      if (!value) {
        this.applyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((EmployInfo)value);
        }
        break;

      case APPLY_EXCEPTION:
        if (value == null) {
          unsetApplyException();
        } else {
          setApplyException((com.linyk3.thrift.apply.exception.ApplyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLY_EXCEPTION:
        return getApplyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLY_EXCEPTION:
        return isSetApplyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateEmployInfo_result)
        return this.equals((updateEmployInfo_result)that);
      return false;
    }

    public boolean equals(updateEmployInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applyException = true && this.isSetApplyException();
      boolean that_present_applyException = true && that.isSetApplyException();
      if (this_present_applyException || that_present_applyException) {
        if (!(this_present_applyException && that_present_applyException))
          return false;
        if (!this.applyException.equals(that.applyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_applyException = true && (isSetApplyException());
      list.add(present_applyException);
      if (present_applyException)
        list.add(applyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateEmployInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyException()).compareTo(other.isSetApplyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyException, other.applyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateEmployInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyException:");
      if (this.applyException == null) {
        sb.append("null");
      } else {
        sb.append(this.applyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateEmployInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateEmployInfo_resultStandardScheme getScheme() {
        return new updateEmployInfo_resultStandardScheme();
      }
    }

    private static class updateEmployInfo_resultStandardScheme extends StandardScheme<updateEmployInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateEmployInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new EmployInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
                struct.applyException.read(iprot);
                struct.setApplyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateEmployInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.applyException != null) {
          oprot.writeFieldBegin(APPLY_EXCEPTION_FIELD_DESC);
          struct.applyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateEmployInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateEmployInfo_resultTupleScheme getScheme() {
        return new updateEmployInfo_resultTupleScheme();
      }
    }

    private static class updateEmployInfo_resultTupleScheme extends TupleScheme<updateEmployInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateEmployInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetApplyException()) {
          struct.applyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateEmployInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new EmployInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
          struct.applyException.read(iprot);
          struct.setApplyExceptionIsSet(true);
        }
      }
    }

  }

  public static class deleteEmployInfo_args implements org.apache.thrift.TBase<deleteEmployInfo_args, deleteEmployInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteEmployInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteEmployInfo_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteEmployInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteEmployInfo_argsTupleSchemeFactory());
    }

    public String _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteEmployInfo_args.class, metaDataMap);
    }

    public deleteEmployInfo_args() {
    }

    public deleteEmployInfo_args(
      String _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteEmployInfo_args(deleteEmployInfo_args other) {
      if (other.isSet_id()) {
        this._id = other._id;
      }
    }

    public deleteEmployInfo_args deepCopy() {
      return new deleteEmployInfo_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public String get_id() {
      return this._id;
    }

    public deleteEmployInfo_args set_id(String _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteEmployInfo_args)
        return this.equals((deleteEmployInfo_args)that);
      return false;
    }

    public boolean equals(deleteEmployInfo_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present__id = true && (isSet_id());
      list.add(present__id);
      if (present__id)
        list.add(_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteEmployInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(other.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, other._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteEmployInfo_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteEmployInfo_argsStandardSchemeFactory implements SchemeFactory {
      public deleteEmployInfo_argsStandardScheme getScheme() {
        return new deleteEmployInfo_argsStandardScheme();
      }
    }

    private static class deleteEmployInfo_argsStandardScheme extends StandardScheme<deleteEmployInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteEmployInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct._id = iprot.readString();
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteEmployInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          oprot.writeString(struct._id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteEmployInfo_argsTupleSchemeFactory implements SchemeFactory {
      public deleteEmployInfo_argsTupleScheme getScheme() {
        return new deleteEmployInfo_argsTupleScheme();
      }
    }

    private static class deleteEmployInfo_argsTupleScheme extends TupleScheme<deleteEmployInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteEmployInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          oprot.writeString(struct._id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteEmployInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = iprot.readString();
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class deleteEmployInfo_result implements org.apache.thrift.TBase<deleteEmployInfo_result, deleteEmployInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteEmployInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteEmployInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField APPLY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteEmployInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteEmployInfo_resultTupleSchemeFactory());
    }

    public EmployInfo success; // required
    public com.linyk3.thrift.apply.exception.ApplyException applyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLY_EXCEPTION((short)1, "applyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLY_EXCEPTION
            return APPLY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EmployInfo.class)));
      tmpMap.put(_Fields.APPLY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteEmployInfo_result.class, metaDataMap);
    }

    public deleteEmployInfo_result() {
    }

    public deleteEmployInfo_result(
      EmployInfo success,
      com.linyk3.thrift.apply.exception.ApplyException applyException)
    {
      this();
      this.success = success;
      this.applyException = applyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteEmployInfo_result(deleteEmployInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new EmployInfo(other.success);
      }
      if (other.isSetApplyException()) {
        this.applyException = new com.linyk3.thrift.apply.exception.ApplyException(other.applyException);
      }
    }

    public deleteEmployInfo_result deepCopy() {
      return new deleteEmployInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applyException = null;
    }

    public EmployInfo getSuccess() {
      return this.success;
    }

    public deleteEmployInfo_result setSuccess(EmployInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.linyk3.thrift.apply.exception.ApplyException getApplyException() {
      return this.applyException;
    }

    public deleteEmployInfo_result setApplyException(com.linyk3.thrift.apply.exception.ApplyException applyException) {
      this.applyException = applyException;
      return this;
    }

    public void unsetApplyException() {
      this.applyException = null;
    }

    /** Returns true if field applyException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyException() {
      return this.applyException != null;
    }

    public void setApplyExceptionIsSet(boolean value) {
      if (!value) {
        this.applyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((EmployInfo)value);
        }
        break;

      case APPLY_EXCEPTION:
        if (value == null) {
          unsetApplyException();
        } else {
          setApplyException((com.linyk3.thrift.apply.exception.ApplyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLY_EXCEPTION:
        return getApplyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLY_EXCEPTION:
        return isSetApplyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteEmployInfo_result)
        return this.equals((deleteEmployInfo_result)that);
      return false;
    }

    public boolean equals(deleteEmployInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applyException = true && this.isSetApplyException();
      boolean that_present_applyException = true && that.isSetApplyException();
      if (this_present_applyException || that_present_applyException) {
        if (!(this_present_applyException && that_present_applyException))
          return false;
        if (!this.applyException.equals(that.applyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_applyException = true && (isSetApplyException());
      list.add(present_applyException);
      if (present_applyException)
        list.add(applyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteEmployInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyException()).compareTo(other.isSetApplyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyException, other.applyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteEmployInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyException:");
      if (this.applyException == null) {
        sb.append("null");
      } else {
        sb.append(this.applyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteEmployInfo_resultStandardSchemeFactory implements SchemeFactory {
      public deleteEmployInfo_resultStandardScheme getScheme() {
        return new deleteEmployInfo_resultStandardScheme();
      }
    }

    private static class deleteEmployInfo_resultStandardScheme extends StandardScheme<deleteEmployInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteEmployInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new EmployInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
                struct.applyException.read(iprot);
                struct.setApplyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteEmployInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.applyException != null) {
          oprot.writeFieldBegin(APPLY_EXCEPTION_FIELD_DESC);
          struct.applyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteEmployInfo_resultTupleSchemeFactory implements SchemeFactory {
      public deleteEmployInfo_resultTupleScheme getScheme() {
        return new deleteEmployInfo_resultTupleScheme();
      }
    }

    private static class deleteEmployInfo_resultTupleScheme extends TupleScheme<deleteEmployInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteEmployInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetApplyException()) {
          struct.applyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteEmployInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new EmployInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
          struct.applyException.read(iprot);
          struct.setApplyExceptionIsSet(true);
        }
      }
    }

  }

  public static class findApplicationInfo_args implements org.apache.thrift.TBase<findApplicationInfo_args, findApplicationInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<findApplicationInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findApplicationInfo_args");

    private static final org.apache.thrift.protocol.TField FIND_APPLICATION_INFO_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("findApplicationInfoParams", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findApplicationInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findApplicationInfo_argsTupleSchemeFactory());
    }

    public com.linyk3.thrift.apply.params.FindApplicationInfoParams findApplicationInfoParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIND_APPLICATION_INFO_PARAMS((short)1, "findApplicationInfoParams");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIND_APPLICATION_INFO_PARAMS
            return FIND_APPLICATION_INFO_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIND_APPLICATION_INFO_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("findApplicationInfoParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.linyk3.thrift.apply.params.FindApplicationInfoParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findApplicationInfo_args.class, metaDataMap);
    }

    public findApplicationInfo_args() {
    }

    public findApplicationInfo_args(
      com.linyk3.thrift.apply.params.FindApplicationInfoParams findApplicationInfoParams)
    {
      this();
      this.findApplicationInfoParams = findApplicationInfoParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findApplicationInfo_args(findApplicationInfo_args other) {
      if (other.isSetFindApplicationInfoParams()) {
        this.findApplicationInfoParams = new com.linyk3.thrift.apply.params.FindApplicationInfoParams(other.findApplicationInfoParams);
      }
    }

    public findApplicationInfo_args deepCopy() {
      return new findApplicationInfo_args(this);
    }

    @Override
    public void clear() {
      this.findApplicationInfoParams = null;
    }

    public com.linyk3.thrift.apply.params.FindApplicationInfoParams getFindApplicationInfoParams() {
      return this.findApplicationInfoParams;
    }

    public findApplicationInfo_args setFindApplicationInfoParams(com.linyk3.thrift.apply.params.FindApplicationInfoParams findApplicationInfoParams) {
      this.findApplicationInfoParams = findApplicationInfoParams;
      return this;
    }

    public void unsetFindApplicationInfoParams() {
      this.findApplicationInfoParams = null;
    }

    /** Returns true if field findApplicationInfoParams is set (has been assigned a value) and false otherwise */
    public boolean isSetFindApplicationInfoParams() {
      return this.findApplicationInfoParams != null;
    }

    public void setFindApplicationInfoParamsIsSet(boolean value) {
      if (!value) {
        this.findApplicationInfoParams = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FIND_APPLICATION_INFO_PARAMS:
        if (value == null) {
          unsetFindApplicationInfoParams();
        } else {
          setFindApplicationInfoParams((com.linyk3.thrift.apply.params.FindApplicationInfoParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FIND_APPLICATION_INFO_PARAMS:
        return getFindApplicationInfoParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FIND_APPLICATION_INFO_PARAMS:
        return isSetFindApplicationInfoParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findApplicationInfo_args)
        return this.equals((findApplicationInfo_args)that);
      return false;
    }

    public boolean equals(findApplicationInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_findApplicationInfoParams = true && this.isSetFindApplicationInfoParams();
      boolean that_present_findApplicationInfoParams = true && that.isSetFindApplicationInfoParams();
      if (this_present_findApplicationInfoParams || that_present_findApplicationInfoParams) {
        if (!(this_present_findApplicationInfoParams && that_present_findApplicationInfoParams))
          return false;
        if (!this.findApplicationInfoParams.equals(that.findApplicationInfoParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_findApplicationInfoParams = true && (isSetFindApplicationInfoParams());
      list.add(present_findApplicationInfoParams);
      if (present_findApplicationInfoParams)
        list.add(findApplicationInfoParams);

      return list.hashCode();
    }

    @Override
    public int compareTo(findApplicationInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFindApplicationInfoParams()).compareTo(other.isSetFindApplicationInfoParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFindApplicationInfoParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.findApplicationInfoParams, other.findApplicationInfoParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findApplicationInfo_args(");
      boolean first = true;

      sb.append("findApplicationInfoParams:");
      if (this.findApplicationInfoParams == null) {
        sb.append("null");
      } else {
        sb.append(this.findApplicationInfoParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (findApplicationInfoParams != null) {
        findApplicationInfoParams.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findApplicationInfo_argsStandardSchemeFactory implements SchemeFactory {
      public findApplicationInfo_argsStandardScheme getScheme() {
        return new findApplicationInfo_argsStandardScheme();
      }
    }

    private static class findApplicationInfo_argsStandardScheme extends StandardScheme<findApplicationInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findApplicationInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIND_APPLICATION_INFO_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.findApplicationInfoParams = new com.linyk3.thrift.apply.params.FindApplicationInfoParams();
                struct.findApplicationInfoParams.read(iprot);
                struct.setFindApplicationInfoParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findApplicationInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.findApplicationInfoParams != null) {
          oprot.writeFieldBegin(FIND_APPLICATION_INFO_PARAMS_FIELD_DESC);
          struct.findApplicationInfoParams.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findApplicationInfo_argsTupleSchemeFactory implements SchemeFactory {
      public findApplicationInfo_argsTupleScheme getScheme() {
        return new findApplicationInfo_argsTupleScheme();
      }
    }

    private static class findApplicationInfo_argsTupleScheme extends TupleScheme<findApplicationInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findApplicationInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFindApplicationInfoParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFindApplicationInfoParams()) {
          struct.findApplicationInfoParams.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findApplicationInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.findApplicationInfoParams = new com.linyk3.thrift.apply.params.FindApplicationInfoParams();
          struct.findApplicationInfoParams.read(iprot);
          struct.setFindApplicationInfoParamsIsSet(true);
        }
      }
    }

  }

  public static class findApplicationInfo_result implements org.apache.thrift.TBase<findApplicationInfo_result, findApplicationInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<findApplicationInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findApplicationInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField APPLY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findApplicationInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findApplicationInfo_resultTupleSchemeFactory());
    }

    public ApplicationInfo success; // required
    public com.linyk3.thrift.apply.exception.ApplyException applyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLY_EXCEPTION((short)1, "applyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLY_EXCEPTION
            return APPLY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplicationInfo.class)));
      tmpMap.put(_Fields.APPLY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findApplicationInfo_result.class, metaDataMap);
    }

    public findApplicationInfo_result() {
    }

    public findApplicationInfo_result(
      ApplicationInfo success,
      com.linyk3.thrift.apply.exception.ApplyException applyException)
    {
      this();
      this.success = success;
      this.applyException = applyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findApplicationInfo_result(findApplicationInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new ApplicationInfo(other.success);
      }
      if (other.isSetApplyException()) {
        this.applyException = new com.linyk3.thrift.apply.exception.ApplyException(other.applyException);
      }
    }

    public findApplicationInfo_result deepCopy() {
      return new findApplicationInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applyException = null;
    }

    public ApplicationInfo getSuccess() {
      return this.success;
    }

    public findApplicationInfo_result setSuccess(ApplicationInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.linyk3.thrift.apply.exception.ApplyException getApplyException() {
      return this.applyException;
    }

    public findApplicationInfo_result setApplyException(com.linyk3.thrift.apply.exception.ApplyException applyException) {
      this.applyException = applyException;
      return this;
    }

    public void unsetApplyException() {
      this.applyException = null;
    }

    /** Returns true if field applyException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyException() {
      return this.applyException != null;
    }

    public void setApplyExceptionIsSet(boolean value) {
      if (!value) {
        this.applyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ApplicationInfo)value);
        }
        break;

      case APPLY_EXCEPTION:
        if (value == null) {
          unsetApplyException();
        } else {
          setApplyException((com.linyk3.thrift.apply.exception.ApplyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLY_EXCEPTION:
        return getApplyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLY_EXCEPTION:
        return isSetApplyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findApplicationInfo_result)
        return this.equals((findApplicationInfo_result)that);
      return false;
    }

    public boolean equals(findApplicationInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applyException = true && this.isSetApplyException();
      boolean that_present_applyException = true && that.isSetApplyException();
      if (this_present_applyException || that_present_applyException) {
        if (!(this_present_applyException && that_present_applyException))
          return false;
        if (!this.applyException.equals(that.applyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_applyException = true && (isSetApplyException());
      list.add(present_applyException);
      if (present_applyException)
        list.add(applyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(findApplicationInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyException()).compareTo(other.isSetApplyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyException, other.applyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findApplicationInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyException:");
      if (this.applyException == null) {
        sb.append("null");
      } else {
        sb.append(this.applyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findApplicationInfo_resultStandardSchemeFactory implements SchemeFactory {
      public findApplicationInfo_resultStandardScheme getScheme() {
        return new findApplicationInfo_resultStandardScheme();
      }
    }

    private static class findApplicationInfo_resultStandardScheme extends StandardScheme<findApplicationInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findApplicationInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ApplicationInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
                struct.applyException.read(iprot);
                struct.setApplyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findApplicationInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.applyException != null) {
          oprot.writeFieldBegin(APPLY_EXCEPTION_FIELD_DESC);
          struct.applyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findApplicationInfo_resultTupleSchemeFactory implements SchemeFactory {
      public findApplicationInfo_resultTupleScheme getScheme() {
        return new findApplicationInfo_resultTupleScheme();
      }
    }

    private static class findApplicationInfo_resultTupleScheme extends TupleScheme<findApplicationInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findApplicationInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetApplyException()) {
          struct.applyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findApplicationInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ApplicationInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
          struct.applyException.read(iprot);
          struct.setApplyExceptionIsSet(true);
        }
      }
    }

  }

  public static class listApplicationInfo_args implements org.apache.thrift.TBase<listApplicationInfo_args, listApplicationInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<listApplicationInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listApplicationInfo_args");

    private static final org.apache.thrift.protocol.TField LIST_APPLICATION_INFO_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("listApplicationInfoParams", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listApplicationInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listApplicationInfo_argsTupleSchemeFactory());
    }

    public com.linyk3.thrift.apply.params.ListApplicationInfoParams listApplicationInfoParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIST_APPLICATION_INFO_PARAMS((short)1, "listApplicationInfoParams");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIST_APPLICATION_INFO_PARAMS
            return LIST_APPLICATION_INFO_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIST_APPLICATION_INFO_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("listApplicationInfoParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.linyk3.thrift.apply.params.ListApplicationInfoParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listApplicationInfo_args.class, metaDataMap);
    }

    public listApplicationInfo_args() {
    }

    public listApplicationInfo_args(
      com.linyk3.thrift.apply.params.ListApplicationInfoParams listApplicationInfoParams)
    {
      this();
      this.listApplicationInfoParams = listApplicationInfoParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listApplicationInfo_args(listApplicationInfo_args other) {
      if (other.isSetListApplicationInfoParams()) {
        this.listApplicationInfoParams = new com.linyk3.thrift.apply.params.ListApplicationInfoParams(other.listApplicationInfoParams);
      }
    }

    public listApplicationInfo_args deepCopy() {
      return new listApplicationInfo_args(this);
    }

    @Override
    public void clear() {
      this.listApplicationInfoParams = null;
    }

    public com.linyk3.thrift.apply.params.ListApplicationInfoParams getListApplicationInfoParams() {
      return this.listApplicationInfoParams;
    }

    public listApplicationInfo_args setListApplicationInfoParams(com.linyk3.thrift.apply.params.ListApplicationInfoParams listApplicationInfoParams) {
      this.listApplicationInfoParams = listApplicationInfoParams;
      return this;
    }

    public void unsetListApplicationInfoParams() {
      this.listApplicationInfoParams = null;
    }

    /** Returns true if field listApplicationInfoParams is set (has been assigned a value) and false otherwise */
    public boolean isSetListApplicationInfoParams() {
      return this.listApplicationInfoParams != null;
    }

    public void setListApplicationInfoParamsIsSet(boolean value) {
      if (!value) {
        this.listApplicationInfoParams = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIST_APPLICATION_INFO_PARAMS:
        if (value == null) {
          unsetListApplicationInfoParams();
        } else {
          setListApplicationInfoParams((com.linyk3.thrift.apply.params.ListApplicationInfoParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIST_APPLICATION_INFO_PARAMS:
        return getListApplicationInfoParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIST_APPLICATION_INFO_PARAMS:
        return isSetListApplicationInfoParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listApplicationInfo_args)
        return this.equals((listApplicationInfo_args)that);
      return false;
    }

    public boolean equals(listApplicationInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_listApplicationInfoParams = true && this.isSetListApplicationInfoParams();
      boolean that_present_listApplicationInfoParams = true && that.isSetListApplicationInfoParams();
      if (this_present_listApplicationInfoParams || that_present_listApplicationInfoParams) {
        if (!(this_present_listApplicationInfoParams && that_present_listApplicationInfoParams))
          return false;
        if (!this.listApplicationInfoParams.equals(that.listApplicationInfoParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_listApplicationInfoParams = true && (isSetListApplicationInfoParams());
      list.add(present_listApplicationInfoParams);
      if (present_listApplicationInfoParams)
        list.add(listApplicationInfoParams);

      return list.hashCode();
    }

    @Override
    public int compareTo(listApplicationInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetListApplicationInfoParams()).compareTo(other.isSetListApplicationInfoParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListApplicationInfoParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listApplicationInfoParams, other.listApplicationInfoParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listApplicationInfo_args(");
      boolean first = true;

      sb.append("listApplicationInfoParams:");
      if (this.listApplicationInfoParams == null) {
        sb.append("null");
      } else {
        sb.append(this.listApplicationInfoParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (listApplicationInfoParams != null) {
        listApplicationInfoParams.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listApplicationInfo_argsStandardSchemeFactory implements SchemeFactory {
      public listApplicationInfo_argsStandardScheme getScheme() {
        return new listApplicationInfo_argsStandardScheme();
      }
    }

    private static class listApplicationInfo_argsStandardScheme extends StandardScheme<listApplicationInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listApplicationInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIST_APPLICATION_INFO_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.listApplicationInfoParams = new com.linyk3.thrift.apply.params.ListApplicationInfoParams();
                struct.listApplicationInfoParams.read(iprot);
                struct.setListApplicationInfoParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listApplicationInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.listApplicationInfoParams != null) {
          oprot.writeFieldBegin(LIST_APPLICATION_INFO_PARAMS_FIELD_DESC);
          struct.listApplicationInfoParams.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listApplicationInfo_argsTupleSchemeFactory implements SchemeFactory {
      public listApplicationInfo_argsTupleScheme getScheme() {
        return new listApplicationInfo_argsTupleScheme();
      }
    }

    private static class listApplicationInfo_argsTupleScheme extends TupleScheme<listApplicationInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listApplicationInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetListApplicationInfoParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetListApplicationInfoParams()) {
          struct.listApplicationInfoParams.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listApplicationInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.listApplicationInfoParams = new com.linyk3.thrift.apply.params.ListApplicationInfoParams();
          struct.listApplicationInfoParams.read(iprot);
          struct.setListApplicationInfoParamsIsSet(true);
        }
      }
    }

  }

  public static class listApplicationInfo_result implements org.apache.thrift.TBase<listApplicationInfo_result, listApplicationInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<listApplicationInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listApplicationInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField APPLY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listApplicationInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listApplicationInfo_resultTupleSchemeFactory());
    }

    public List<ApplicationInfo> success; // required
    public com.linyk3.thrift.apply.exception.ApplyException applyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLY_EXCEPTION((short)1, "applyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLY_EXCEPTION
            return APPLY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplicationInfo.class))));
      tmpMap.put(_Fields.APPLY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listApplicationInfo_result.class, metaDataMap);
    }

    public listApplicationInfo_result() {
    }

    public listApplicationInfo_result(
      List<ApplicationInfo> success,
      com.linyk3.thrift.apply.exception.ApplyException applyException)
    {
      this();
      this.success = success;
      this.applyException = applyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listApplicationInfo_result(listApplicationInfo_result other) {
      if (other.isSetSuccess()) {
        List<ApplicationInfo> __this__success = new ArrayList<ApplicationInfo>(other.success.size());
        for (ApplicationInfo other_element : other.success) {
          __this__success.add(new ApplicationInfo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetApplyException()) {
        this.applyException = new com.linyk3.thrift.apply.exception.ApplyException(other.applyException);
      }
    }

    public listApplicationInfo_result deepCopy() {
      return new listApplicationInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applyException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ApplicationInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ApplicationInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<ApplicationInfo>();
      }
      this.success.add(elem);
    }

    public List<ApplicationInfo> getSuccess() {
      return this.success;
    }

    public listApplicationInfo_result setSuccess(List<ApplicationInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.linyk3.thrift.apply.exception.ApplyException getApplyException() {
      return this.applyException;
    }

    public listApplicationInfo_result setApplyException(com.linyk3.thrift.apply.exception.ApplyException applyException) {
      this.applyException = applyException;
      return this;
    }

    public void unsetApplyException() {
      this.applyException = null;
    }

    /** Returns true if field applyException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyException() {
      return this.applyException != null;
    }

    public void setApplyExceptionIsSet(boolean value) {
      if (!value) {
        this.applyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ApplicationInfo>)value);
        }
        break;

      case APPLY_EXCEPTION:
        if (value == null) {
          unsetApplyException();
        } else {
          setApplyException((com.linyk3.thrift.apply.exception.ApplyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLY_EXCEPTION:
        return getApplyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLY_EXCEPTION:
        return isSetApplyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listApplicationInfo_result)
        return this.equals((listApplicationInfo_result)that);
      return false;
    }

    public boolean equals(listApplicationInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applyException = true && this.isSetApplyException();
      boolean that_present_applyException = true && that.isSetApplyException();
      if (this_present_applyException || that_present_applyException) {
        if (!(this_present_applyException && that_present_applyException))
          return false;
        if (!this.applyException.equals(that.applyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_applyException = true && (isSetApplyException());
      list.add(present_applyException);
      if (present_applyException)
        list.add(applyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(listApplicationInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyException()).compareTo(other.isSetApplyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyException, other.applyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listApplicationInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyException:");
      if (this.applyException == null) {
        sb.append("null");
      } else {
        sb.append(this.applyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listApplicationInfo_resultStandardSchemeFactory implements SchemeFactory {
      public listApplicationInfo_resultStandardScheme getScheme() {
        return new listApplicationInfo_resultStandardScheme();
      }
    }

    private static class listApplicationInfo_resultStandardScheme extends StandardScheme<listApplicationInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listApplicationInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                  struct.success = new ArrayList<ApplicationInfo>(_list144.size);
                  ApplicationInfo _elem145;
                  for (int _i146 = 0; _i146 < _list144.size; ++_i146)
                  {
                    _elem145 = new ApplicationInfo();
                    _elem145.read(iprot);
                    struct.success.add(_elem145);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
                struct.applyException.read(iprot);
                struct.setApplyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listApplicationInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ApplicationInfo _iter147 : struct.success)
            {
              _iter147.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.applyException != null) {
          oprot.writeFieldBegin(APPLY_EXCEPTION_FIELD_DESC);
          struct.applyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listApplicationInfo_resultTupleSchemeFactory implements SchemeFactory {
      public listApplicationInfo_resultTupleScheme getScheme() {
        return new listApplicationInfo_resultTupleScheme();
      }
    }

    private static class listApplicationInfo_resultTupleScheme extends TupleScheme<listApplicationInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listApplicationInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ApplicationInfo _iter148 : struct.success)
            {
              _iter148.write(oprot);
            }
          }
        }
        if (struct.isSetApplyException()) {
          struct.applyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listApplicationInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ApplicationInfo>(_list149.size);
            ApplicationInfo _elem150;
            for (int _i151 = 0; _i151 < _list149.size; ++_i151)
            {
              _elem150 = new ApplicationInfo();
              _elem150.read(iprot);
              struct.success.add(_elem150);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
          struct.applyException.read(iprot);
          struct.setApplyExceptionIsSet(true);
        }
      }
    }

  }

  public static class updateApplicationInfo_args implements org.apache.thrift.TBase<updateApplicationInfo_args, updateApplicationInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateApplicationInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateApplicationInfo_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateApplicationInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateApplicationInfo_argsTupleSchemeFactory());
    }

    public ApplicationInfo applicationInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_INFO((short)1, "applicationInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_INFO
            return APPLICATION_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_INFO, new org.apache.thrift.meta_data.FieldMetaData("applicationInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplicationInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateApplicationInfo_args.class, metaDataMap);
    }

    public updateApplicationInfo_args() {
    }

    public updateApplicationInfo_args(
      ApplicationInfo applicationInfo)
    {
      this();
      this.applicationInfo = applicationInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateApplicationInfo_args(updateApplicationInfo_args other) {
      if (other.isSetApplicationInfo()) {
        this.applicationInfo = new ApplicationInfo(other.applicationInfo);
      }
    }

    public updateApplicationInfo_args deepCopy() {
      return new updateApplicationInfo_args(this);
    }

    @Override
    public void clear() {
      this.applicationInfo = null;
    }

    public ApplicationInfo getApplicationInfo() {
      return this.applicationInfo;
    }

    public updateApplicationInfo_args setApplicationInfo(ApplicationInfo applicationInfo) {
      this.applicationInfo = applicationInfo;
      return this;
    }

    public void unsetApplicationInfo() {
      this.applicationInfo = null;
    }

    /** Returns true if field applicationInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationInfo() {
      return this.applicationInfo != null;
    }

    public void setApplicationInfoIsSet(boolean value) {
      if (!value) {
        this.applicationInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLICATION_INFO:
        if (value == null) {
          unsetApplicationInfo();
        } else {
          setApplicationInfo((ApplicationInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_INFO:
        return getApplicationInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_INFO:
        return isSetApplicationInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateApplicationInfo_args)
        return this.equals((updateApplicationInfo_args)that);
      return false;
    }

    public boolean equals(updateApplicationInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_applicationInfo = true && this.isSetApplicationInfo();
      boolean that_present_applicationInfo = true && that.isSetApplicationInfo();
      if (this_present_applicationInfo || that_present_applicationInfo) {
        if (!(this_present_applicationInfo && that_present_applicationInfo))
          return false;
        if (!this.applicationInfo.equals(that.applicationInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_applicationInfo = true && (isSetApplicationInfo());
      list.add(present_applicationInfo);
      if (present_applicationInfo)
        list.add(applicationInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateApplicationInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplicationInfo()).compareTo(other.isSetApplicationInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationInfo, other.applicationInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateApplicationInfo_args(");
      boolean first = true;

      sb.append("applicationInfo:");
      if (this.applicationInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (applicationInfo != null) {
        applicationInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateApplicationInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateApplicationInfo_argsStandardScheme getScheme() {
        return new updateApplicationInfo_argsStandardScheme();
      }
    }

    private static class updateApplicationInfo_argsStandardScheme extends StandardScheme<updateApplicationInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateApplicationInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applicationInfo = new ApplicationInfo();
                struct.applicationInfo.read(iprot);
                struct.setApplicationInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateApplicationInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationInfo != null) {
          oprot.writeFieldBegin(APPLICATION_INFO_FIELD_DESC);
          struct.applicationInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateApplicationInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateApplicationInfo_argsTupleScheme getScheme() {
        return new updateApplicationInfo_argsTupleScheme();
      }
    }

    private static class updateApplicationInfo_argsTupleScheme extends TupleScheme<updateApplicationInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateApplicationInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplicationInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplicationInfo()) {
          struct.applicationInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateApplicationInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.applicationInfo = new ApplicationInfo();
          struct.applicationInfo.read(iprot);
          struct.setApplicationInfoIsSet(true);
        }
      }
    }

  }

  public static class updateApplicationInfo_result implements org.apache.thrift.TBase<updateApplicationInfo_result, updateApplicationInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateApplicationInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateApplicationInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField APPLY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateApplicationInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateApplicationInfo_resultTupleSchemeFactory());
    }

    public ApplicationInfo success; // required
    public com.linyk3.thrift.apply.exception.ApplyException applyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLY_EXCEPTION((short)1, "applyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLY_EXCEPTION
            return APPLY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplicationInfo.class)));
      tmpMap.put(_Fields.APPLY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateApplicationInfo_result.class, metaDataMap);
    }

    public updateApplicationInfo_result() {
    }

    public updateApplicationInfo_result(
      ApplicationInfo success,
      com.linyk3.thrift.apply.exception.ApplyException applyException)
    {
      this();
      this.success = success;
      this.applyException = applyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateApplicationInfo_result(updateApplicationInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new ApplicationInfo(other.success);
      }
      if (other.isSetApplyException()) {
        this.applyException = new com.linyk3.thrift.apply.exception.ApplyException(other.applyException);
      }
    }

    public updateApplicationInfo_result deepCopy() {
      return new updateApplicationInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applyException = null;
    }

    public ApplicationInfo getSuccess() {
      return this.success;
    }

    public updateApplicationInfo_result setSuccess(ApplicationInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.linyk3.thrift.apply.exception.ApplyException getApplyException() {
      return this.applyException;
    }

    public updateApplicationInfo_result setApplyException(com.linyk3.thrift.apply.exception.ApplyException applyException) {
      this.applyException = applyException;
      return this;
    }

    public void unsetApplyException() {
      this.applyException = null;
    }

    /** Returns true if field applyException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyException() {
      return this.applyException != null;
    }

    public void setApplyExceptionIsSet(boolean value) {
      if (!value) {
        this.applyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ApplicationInfo)value);
        }
        break;

      case APPLY_EXCEPTION:
        if (value == null) {
          unsetApplyException();
        } else {
          setApplyException((com.linyk3.thrift.apply.exception.ApplyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLY_EXCEPTION:
        return getApplyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLY_EXCEPTION:
        return isSetApplyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateApplicationInfo_result)
        return this.equals((updateApplicationInfo_result)that);
      return false;
    }

    public boolean equals(updateApplicationInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applyException = true && this.isSetApplyException();
      boolean that_present_applyException = true && that.isSetApplyException();
      if (this_present_applyException || that_present_applyException) {
        if (!(this_present_applyException && that_present_applyException))
          return false;
        if (!this.applyException.equals(that.applyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_applyException = true && (isSetApplyException());
      list.add(present_applyException);
      if (present_applyException)
        list.add(applyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateApplicationInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyException()).compareTo(other.isSetApplyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyException, other.applyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateApplicationInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyException:");
      if (this.applyException == null) {
        sb.append("null");
      } else {
        sb.append(this.applyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateApplicationInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateApplicationInfo_resultStandardScheme getScheme() {
        return new updateApplicationInfo_resultStandardScheme();
      }
    }

    private static class updateApplicationInfo_resultStandardScheme extends StandardScheme<updateApplicationInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateApplicationInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ApplicationInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
                struct.applyException.read(iprot);
                struct.setApplyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateApplicationInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.applyException != null) {
          oprot.writeFieldBegin(APPLY_EXCEPTION_FIELD_DESC);
          struct.applyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateApplicationInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateApplicationInfo_resultTupleScheme getScheme() {
        return new updateApplicationInfo_resultTupleScheme();
      }
    }

    private static class updateApplicationInfo_resultTupleScheme extends TupleScheme<updateApplicationInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateApplicationInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetApplyException()) {
          struct.applyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateApplicationInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ApplicationInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
          struct.applyException.read(iprot);
          struct.setApplyExceptionIsSet(true);
        }
      }
    }

  }

  public static class deleteApplicationInfo_args implements org.apache.thrift.TBase<deleteApplicationInfo_args, deleteApplicationInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteApplicationInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteApplicationInfo_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteApplicationInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteApplicationInfo_argsTupleSchemeFactory());
    }

    public String _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteApplicationInfo_args.class, metaDataMap);
    }

    public deleteApplicationInfo_args() {
    }

    public deleteApplicationInfo_args(
      String _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteApplicationInfo_args(deleteApplicationInfo_args other) {
      if (other.isSet_id()) {
        this._id = other._id;
      }
    }

    public deleteApplicationInfo_args deepCopy() {
      return new deleteApplicationInfo_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public String get_id() {
      return this._id;
    }

    public deleteApplicationInfo_args set_id(String _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteApplicationInfo_args)
        return this.equals((deleteApplicationInfo_args)that);
      return false;
    }

    public boolean equals(deleteApplicationInfo_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present__id = true && (isSet_id());
      list.add(present__id);
      if (present__id)
        list.add(_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteApplicationInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(other.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, other._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteApplicationInfo_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteApplicationInfo_argsStandardSchemeFactory implements SchemeFactory {
      public deleteApplicationInfo_argsStandardScheme getScheme() {
        return new deleteApplicationInfo_argsStandardScheme();
      }
    }

    private static class deleteApplicationInfo_argsStandardScheme extends StandardScheme<deleteApplicationInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteApplicationInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct._id = iprot.readString();
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteApplicationInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          oprot.writeString(struct._id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteApplicationInfo_argsTupleSchemeFactory implements SchemeFactory {
      public deleteApplicationInfo_argsTupleScheme getScheme() {
        return new deleteApplicationInfo_argsTupleScheme();
      }
    }

    private static class deleteApplicationInfo_argsTupleScheme extends TupleScheme<deleteApplicationInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteApplicationInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          oprot.writeString(struct._id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteApplicationInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = iprot.readString();
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class deleteApplicationInfo_result implements org.apache.thrift.TBase<deleteApplicationInfo_result, deleteApplicationInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteApplicationInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteApplicationInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField APPLY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteApplicationInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteApplicationInfo_resultTupleSchemeFactory());
    }

    public ApplicationInfo success; // required
    public com.linyk3.thrift.apply.exception.ApplyException applyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLY_EXCEPTION((short)1, "applyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLY_EXCEPTION
            return APPLY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApplicationInfo.class)));
      tmpMap.put(_Fields.APPLY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteApplicationInfo_result.class, metaDataMap);
    }

    public deleteApplicationInfo_result() {
    }

    public deleteApplicationInfo_result(
      ApplicationInfo success,
      com.linyk3.thrift.apply.exception.ApplyException applyException)
    {
      this();
      this.success = success;
      this.applyException = applyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteApplicationInfo_result(deleteApplicationInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new ApplicationInfo(other.success);
      }
      if (other.isSetApplyException()) {
        this.applyException = new com.linyk3.thrift.apply.exception.ApplyException(other.applyException);
      }
    }

    public deleteApplicationInfo_result deepCopy() {
      return new deleteApplicationInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applyException = null;
    }

    public ApplicationInfo getSuccess() {
      return this.success;
    }

    public deleteApplicationInfo_result setSuccess(ApplicationInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.linyk3.thrift.apply.exception.ApplyException getApplyException() {
      return this.applyException;
    }

    public deleteApplicationInfo_result setApplyException(com.linyk3.thrift.apply.exception.ApplyException applyException) {
      this.applyException = applyException;
      return this;
    }

    public void unsetApplyException() {
      this.applyException = null;
    }

    /** Returns true if field applyException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyException() {
      return this.applyException != null;
    }

    public void setApplyExceptionIsSet(boolean value) {
      if (!value) {
        this.applyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ApplicationInfo)value);
        }
        break;

      case APPLY_EXCEPTION:
        if (value == null) {
          unsetApplyException();
        } else {
          setApplyException((com.linyk3.thrift.apply.exception.ApplyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLY_EXCEPTION:
        return getApplyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLY_EXCEPTION:
        return isSetApplyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteApplicationInfo_result)
        return this.equals((deleteApplicationInfo_result)that);
      return false;
    }

    public boolean equals(deleteApplicationInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applyException = true && this.isSetApplyException();
      boolean that_present_applyException = true && that.isSetApplyException();
      if (this_present_applyException || that_present_applyException) {
        if (!(this_present_applyException && that_present_applyException))
          return false;
        if (!this.applyException.equals(that.applyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_applyException = true && (isSetApplyException());
      list.add(present_applyException);
      if (present_applyException)
        list.add(applyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteApplicationInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyException()).compareTo(other.isSetApplyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyException, other.applyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteApplicationInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyException:");
      if (this.applyException == null) {
        sb.append("null");
      } else {
        sb.append(this.applyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteApplicationInfo_resultStandardSchemeFactory implements SchemeFactory {
      public deleteApplicationInfo_resultStandardScheme getScheme() {
        return new deleteApplicationInfo_resultStandardScheme();
      }
    }

    private static class deleteApplicationInfo_resultStandardScheme extends StandardScheme<deleteApplicationInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteApplicationInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ApplicationInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
                struct.applyException.read(iprot);
                struct.setApplyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteApplicationInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.applyException != null) {
          oprot.writeFieldBegin(APPLY_EXCEPTION_FIELD_DESC);
          struct.applyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteApplicationInfo_resultTupleSchemeFactory implements SchemeFactory {
      public deleteApplicationInfo_resultTupleScheme getScheme() {
        return new deleteApplicationInfo_resultTupleScheme();
      }
    }

    private static class deleteApplicationInfo_resultTupleScheme extends TupleScheme<deleteApplicationInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteApplicationInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetApplyException()) {
          struct.applyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteApplicationInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ApplicationInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
          struct.applyException.read(iprot);
          struct.setApplyExceptionIsSet(true);
        }
      }
    }

  }

  public static class findTeachinInfo_args implements org.apache.thrift.TBase<findTeachinInfo_args, findTeachinInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<findTeachinInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findTeachinInfo_args");

    private static final org.apache.thrift.protocol.TField FIND_TEACHIN_INFO_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("findTeachinInfoParams", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findTeachinInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findTeachinInfo_argsTupleSchemeFactory());
    }

    public com.linyk3.thrift.apply.params.FindTeachinInfoParams findTeachinInfoParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIND_TEACHIN_INFO_PARAMS((short)1, "findTeachinInfoParams");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIND_TEACHIN_INFO_PARAMS
            return FIND_TEACHIN_INFO_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIND_TEACHIN_INFO_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("findTeachinInfoParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.linyk3.thrift.apply.params.FindTeachinInfoParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findTeachinInfo_args.class, metaDataMap);
    }

    public findTeachinInfo_args() {
    }

    public findTeachinInfo_args(
      com.linyk3.thrift.apply.params.FindTeachinInfoParams findTeachinInfoParams)
    {
      this();
      this.findTeachinInfoParams = findTeachinInfoParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findTeachinInfo_args(findTeachinInfo_args other) {
      if (other.isSetFindTeachinInfoParams()) {
        this.findTeachinInfoParams = new com.linyk3.thrift.apply.params.FindTeachinInfoParams(other.findTeachinInfoParams);
      }
    }

    public findTeachinInfo_args deepCopy() {
      return new findTeachinInfo_args(this);
    }

    @Override
    public void clear() {
      this.findTeachinInfoParams = null;
    }

    public com.linyk3.thrift.apply.params.FindTeachinInfoParams getFindTeachinInfoParams() {
      return this.findTeachinInfoParams;
    }

    public findTeachinInfo_args setFindTeachinInfoParams(com.linyk3.thrift.apply.params.FindTeachinInfoParams findTeachinInfoParams) {
      this.findTeachinInfoParams = findTeachinInfoParams;
      return this;
    }

    public void unsetFindTeachinInfoParams() {
      this.findTeachinInfoParams = null;
    }

    /** Returns true if field findTeachinInfoParams is set (has been assigned a value) and false otherwise */
    public boolean isSetFindTeachinInfoParams() {
      return this.findTeachinInfoParams != null;
    }

    public void setFindTeachinInfoParamsIsSet(boolean value) {
      if (!value) {
        this.findTeachinInfoParams = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FIND_TEACHIN_INFO_PARAMS:
        if (value == null) {
          unsetFindTeachinInfoParams();
        } else {
          setFindTeachinInfoParams((com.linyk3.thrift.apply.params.FindTeachinInfoParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FIND_TEACHIN_INFO_PARAMS:
        return getFindTeachinInfoParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FIND_TEACHIN_INFO_PARAMS:
        return isSetFindTeachinInfoParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findTeachinInfo_args)
        return this.equals((findTeachinInfo_args)that);
      return false;
    }

    public boolean equals(findTeachinInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_findTeachinInfoParams = true && this.isSetFindTeachinInfoParams();
      boolean that_present_findTeachinInfoParams = true && that.isSetFindTeachinInfoParams();
      if (this_present_findTeachinInfoParams || that_present_findTeachinInfoParams) {
        if (!(this_present_findTeachinInfoParams && that_present_findTeachinInfoParams))
          return false;
        if (!this.findTeachinInfoParams.equals(that.findTeachinInfoParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_findTeachinInfoParams = true && (isSetFindTeachinInfoParams());
      list.add(present_findTeachinInfoParams);
      if (present_findTeachinInfoParams)
        list.add(findTeachinInfoParams);

      return list.hashCode();
    }

    @Override
    public int compareTo(findTeachinInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFindTeachinInfoParams()).compareTo(other.isSetFindTeachinInfoParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFindTeachinInfoParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.findTeachinInfoParams, other.findTeachinInfoParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findTeachinInfo_args(");
      boolean first = true;

      sb.append("findTeachinInfoParams:");
      if (this.findTeachinInfoParams == null) {
        sb.append("null");
      } else {
        sb.append(this.findTeachinInfoParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (findTeachinInfoParams != null) {
        findTeachinInfoParams.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findTeachinInfo_argsStandardSchemeFactory implements SchemeFactory {
      public findTeachinInfo_argsStandardScheme getScheme() {
        return new findTeachinInfo_argsStandardScheme();
      }
    }

    private static class findTeachinInfo_argsStandardScheme extends StandardScheme<findTeachinInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findTeachinInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIND_TEACHIN_INFO_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.findTeachinInfoParams = new com.linyk3.thrift.apply.params.FindTeachinInfoParams();
                struct.findTeachinInfoParams.read(iprot);
                struct.setFindTeachinInfoParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findTeachinInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.findTeachinInfoParams != null) {
          oprot.writeFieldBegin(FIND_TEACHIN_INFO_PARAMS_FIELD_DESC);
          struct.findTeachinInfoParams.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findTeachinInfo_argsTupleSchemeFactory implements SchemeFactory {
      public findTeachinInfo_argsTupleScheme getScheme() {
        return new findTeachinInfo_argsTupleScheme();
      }
    }

    private static class findTeachinInfo_argsTupleScheme extends TupleScheme<findTeachinInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findTeachinInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFindTeachinInfoParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFindTeachinInfoParams()) {
          struct.findTeachinInfoParams.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findTeachinInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.findTeachinInfoParams = new com.linyk3.thrift.apply.params.FindTeachinInfoParams();
          struct.findTeachinInfoParams.read(iprot);
          struct.setFindTeachinInfoParamsIsSet(true);
        }
      }
    }

  }

  public static class findTeachinInfo_result implements org.apache.thrift.TBase<findTeachinInfo_result, findTeachinInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<findTeachinInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findTeachinInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField APPLY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findTeachinInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findTeachinInfo_resultTupleSchemeFactory());
    }

    public TeachinInfo success; // required
    public com.linyk3.thrift.apply.exception.ApplyException applyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLY_EXCEPTION((short)1, "applyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLY_EXCEPTION
            return APPLY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TeachinInfo.class)));
      tmpMap.put(_Fields.APPLY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findTeachinInfo_result.class, metaDataMap);
    }

    public findTeachinInfo_result() {
    }

    public findTeachinInfo_result(
      TeachinInfo success,
      com.linyk3.thrift.apply.exception.ApplyException applyException)
    {
      this();
      this.success = success;
      this.applyException = applyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findTeachinInfo_result(findTeachinInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new TeachinInfo(other.success);
      }
      if (other.isSetApplyException()) {
        this.applyException = new com.linyk3.thrift.apply.exception.ApplyException(other.applyException);
      }
    }

    public findTeachinInfo_result deepCopy() {
      return new findTeachinInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applyException = null;
    }

    public TeachinInfo getSuccess() {
      return this.success;
    }

    public findTeachinInfo_result setSuccess(TeachinInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.linyk3.thrift.apply.exception.ApplyException getApplyException() {
      return this.applyException;
    }

    public findTeachinInfo_result setApplyException(com.linyk3.thrift.apply.exception.ApplyException applyException) {
      this.applyException = applyException;
      return this;
    }

    public void unsetApplyException() {
      this.applyException = null;
    }

    /** Returns true if field applyException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyException() {
      return this.applyException != null;
    }

    public void setApplyExceptionIsSet(boolean value) {
      if (!value) {
        this.applyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TeachinInfo)value);
        }
        break;

      case APPLY_EXCEPTION:
        if (value == null) {
          unsetApplyException();
        } else {
          setApplyException((com.linyk3.thrift.apply.exception.ApplyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLY_EXCEPTION:
        return getApplyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLY_EXCEPTION:
        return isSetApplyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findTeachinInfo_result)
        return this.equals((findTeachinInfo_result)that);
      return false;
    }

    public boolean equals(findTeachinInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applyException = true && this.isSetApplyException();
      boolean that_present_applyException = true && that.isSetApplyException();
      if (this_present_applyException || that_present_applyException) {
        if (!(this_present_applyException && that_present_applyException))
          return false;
        if (!this.applyException.equals(that.applyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_applyException = true && (isSetApplyException());
      list.add(present_applyException);
      if (present_applyException)
        list.add(applyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(findTeachinInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyException()).compareTo(other.isSetApplyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyException, other.applyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findTeachinInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyException:");
      if (this.applyException == null) {
        sb.append("null");
      } else {
        sb.append(this.applyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findTeachinInfo_resultStandardSchemeFactory implements SchemeFactory {
      public findTeachinInfo_resultStandardScheme getScheme() {
        return new findTeachinInfo_resultStandardScheme();
      }
    }

    private static class findTeachinInfo_resultStandardScheme extends StandardScheme<findTeachinInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findTeachinInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TeachinInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
                struct.applyException.read(iprot);
                struct.setApplyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findTeachinInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.applyException != null) {
          oprot.writeFieldBegin(APPLY_EXCEPTION_FIELD_DESC);
          struct.applyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findTeachinInfo_resultTupleSchemeFactory implements SchemeFactory {
      public findTeachinInfo_resultTupleScheme getScheme() {
        return new findTeachinInfo_resultTupleScheme();
      }
    }

    private static class findTeachinInfo_resultTupleScheme extends TupleScheme<findTeachinInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findTeachinInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetApplyException()) {
          struct.applyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findTeachinInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TeachinInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
          struct.applyException.read(iprot);
          struct.setApplyExceptionIsSet(true);
        }
      }
    }

  }

  public static class listTeachinInfo_args implements org.apache.thrift.TBase<listTeachinInfo_args, listTeachinInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<listTeachinInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listTeachinInfo_args");

    private static final org.apache.thrift.protocol.TField LIST_TEACHIN_INFO_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("listTeachinInfoParams", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listTeachinInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listTeachinInfo_argsTupleSchemeFactory());
    }

    public com.linyk3.thrift.apply.params.ListTeachinInfoParams listTeachinInfoParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIST_TEACHIN_INFO_PARAMS((short)1, "listTeachinInfoParams");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIST_TEACHIN_INFO_PARAMS
            return LIST_TEACHIN_INFO_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIST_TEACHIN_INFO_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("listTeachinInfoParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.linyk3.thrift.apply.params.ListTeachinInfoParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listTeachinInfo_args.class, metaDataMap);
    }

    public listTeachinInfo_args() {
    }

    public listTeachinInfo_args(
      com.linyk3.thrift.apply.params.ListTeachinInfoParams listTeachinInfoParams)
    {
      this();
      this.listTeachinInfoParams = listTeachinInfoParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listTeachinInfo_args(listTeachinInfo_args other) {
      if (other.isSetListTeachinInfoParams()) {
        this.listTeachinInfoParams = new com.linyk3.thrift.apply.params.ListTeachinInfoParams(other.listTeachinInfoParams);
      }
    }

    public listTeachinInfo_args deepCopy() {
      return new listTeachinInfo_args(this);
    }

    @Override
    public void clear() {
      this.listTeachinInfoParams = null;
    }

    public com.linyk3.thrift.apply.params.ListTeachinInfoParams getListTeachinInfoParams() {
      return this.listTeachinInfoParams;
    }

    public listTeachinInfo_args setListTeachinInfoParams(com.linyk3.thrift.apply.params.ListTeachinInfoParams listTeachinInfoParams) {
      this.listTeachinInfoParams = listTeachinInfoParams;
      return this;
    }

    public void unsetListTeachinInfoParams() {
      this.listTeachinInfoParams = null;
    }

    /** Returns true if field listTeachinInfoParams is set (has been assigned a value) and false otherwise */
    public boolean isSetListTeachinInfoParams() {
      return this.listTeachinInfoParams != null;
    }

    public void setListTeachinInfoParamsIsSet(boolean value) {
      if (!value) {
        this.listTeachinInfoParams = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIST_TEACHIN_INFO_PARAMS:
        if (value == null) {
          unsetListTeachinInfoParams();
        } else {
          setListTeachinInfoParams((com.linyk3.thrift.apply.params.ListTeachinInfoParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIST_TEACHIN_INFO_PARAMS:
        return getListTeachinInfoParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIST_TEACHIN_INFO_PARAMS:
        return isSetListTeachinInfoParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listTeachinInfo_args)
        return this.equals((listTeachinInfo_args)that);
      return false;
    }

    public boolean equals(listTeachinInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_listTeachinInfoParams = true && this.isSetListTeachinInfoParams();
      boolean that_present_listTeachinInfoParams = true && that.isSetListTeachinInfoParams();
      if (this_present_listTeachinInfoParams || that_present_listTeachinInfoParams) {
        if (!(this_present_listTeachinInfoParams && that_present_listTeachinInfoParams))
          return false;
        if (!this.listTeachinInfoParams.equals(that.listTeachinInfoParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_listTeachinInfoParams = true && (isSetListTeachinInfoParams());
      list.add(present_listTeachinInfoParams);
      if (present_listTeachinInfoParams)
        list.add(listTeachinInfoParams);

      return list.hashCode();
    }

    @Override
    public int compareTo(listTeachinInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetListTeachinInfoParams()).compareTo(other.isSetListTeachinInfoParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListTeachinInfoParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listTeachinInfoParams, other.listTeachinInfoParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listTeachinInfo_args(");
      boolean first = true;

      sb.append("listTeachinInfoParams:");
      if (this.listTeachinInfoParams == null) {
        sb.append("null");
      } else {
        sb.append(this.listTeachinInfoParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (listTeachinInfoParams != null) {
        listTeachinInfoParams.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listTeachinInfo_argsStandardSchemeFactory implements SchemeFactory {
      public listTeachinInfo_argsStandardScheme getScheme() {
        return new listTeachinInfo_argsStandardScheme();
      }
    }

    private static class listTeachinInfo_argsStandardScheme extends StandardScheme<listTeachinInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listTeachinInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIST_TEACHIN_INFO_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.listTeachinInfoParams = new com.linyk3.thrift.apply.params.ListTeachinInfoParams();
                struct.listTeachinInfoParams.read(iprot);
                struct.setListTeachinInfoParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listTeachinInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.listTeachinInfoParams != null) {
          oprot.writeFieldBegin(LIST_TEACHIN_INFO_PARAMS_FIELD_DESC);
          struct.listTeachinInfoParams.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listTeachinInfo_argsTupleSchemeFactory implements SchemeFactory {
      public listTeachinInfo_argsTupleScheme getScheme() {
        return new listTeachinInfo_argsTupleScheme();
      }
    }

    private static class listTeachinInfo_argsTupleScheme extends TupleScheme<listTeachinInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listTeachinInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetListTeachinInfoParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetListTeachinInfoParams()) {
          struct.listTeachinInfoParams.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listTeachinInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.listTeachinInfoParams = new com.linyk3.thrift.apply.params.ListTeachinInfoParams();
          struct.listTeachinInfoParams.read(iprot);
          struct.setListTeachinInfoParamsIsSet(true);
        }
      }
    }

  }

  public static class listTeachinInfo_result implements org.apache.thrift.TBase<listTeachinInfo_result, listTeachinInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<listTeachinInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listTeachinInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField APPLY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listTeachinInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listTeachinInfo_resultTupleSchemeFactory());
    }

    public List<TeachinInfo> success; // required
    public com.linyk3.thrift.apply.exception.ApplyException applyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLY_EXCEPTION((short)1, "applyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLY_EXCEPTION
            return APPLY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TeachinInfo.class))));
      tmpMap.put(_Fields.APPLY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listTeachinInfo_result.class, metaDataMap);
    }

    public listTeachinInfo_result() {
    }

    public listTeachinInfo_result(
      List<TeachinInfo> success,
      com.linyk3.thrift.apply.exception.ApplyException applyException)
    {
      this();
      this.success = success;
      this.applyException = applyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listTeachinInfo_result(listTeachinInfo_result other) {
      if (other.isSetSuccess()) {
        List<TeachinInfo> __this__success = new ArrayList<TeachinInfo>(other.success.size());
        for (TeachinInfo other_element : other.success) {
          __this__success.add(new TeachinInfo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetApplyException()) {
        this.applyException = new com.linyk3.thrift.apply.exception.ApplyException(other.applyException);
      }
    }

    public listTeachinInfo_result deepCopy() {
      return new listTeachinInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applyException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TeachinInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TeachinInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<TeachinInfo>();
      }
      this.success.add(elem);
    }

    public List<TeachinInfo> getSuccess() {
      return this.success;
    }

    public listTeachinInfo_result setSuccess(List<TeachinInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.linyk3.thrift.apply.exception.ApplyException getApplyException() {
      return this.applyException;
    }

    public listTeachinInfo_result setApplyException(com.linyk3.thrift.apply.exception.ApplyException applyException) {
      this.applyException = applyException;
      return this;
    }

    public void unsetApplyException() {
      this.applyException = null;
    }

    /** Returns true if field applyException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyException() {
      return this.applyException != null;
    }

    public void setApplyExceptionIsSet(boolean value) {
      if (!value) {
        this.applyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TeachinInfo>)value);
        }
        break;

      case APPLY_EXCEPTION:
        if (value == null) {
          unsetApplyException();
        } else {
          setApplyException((com.linyk3.thrift.apply.exception.ApplyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLY_EXCEPTION:
        return getApplyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLY_EXCEPTION:
        return isSetApplyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listTeachinInfo_result)
        return this.equals((listTeachinInfo_result)that);
      return false;
    }

    public boolean equals(listTeachinInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applyException = true && this.isSetApplyException();
      boolean that_present_applyException = true && that.isSetApplyException();
      if (this_present_applyException || that_present_applyException) {
        if (!(this_present_applyException && that_present_applyException))
          return false;
        if (!this.applyException.equals(that.applyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_applyException = true && (isSetApplyException());
      list.add(present_applyException);
      if (present_applyException)
        list.add(applyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(listTeachinInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyException()).compareTo(other.isSetApplyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyException, other.applyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listTeachinInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyException:");
      if (this.applyException == null) {
        sb.append("null");
      } else {
        sb.append(this.applyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listTeachinInfo_resultStandardSchemeFactory implements SchemeFactory {
      public listTeachinInfo_resultStandardScheme getScheme() {
        return new listTeachinInfo_resultStandardScheme();
      }
    }

    private static class listTeachinInfo_resultStandardScheme extends StandardScheme<listTeachinInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listTeachinInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list152 = iprot.readListBegin();
                  struct.success = new ArrayList<TeachinInfo>(_list152.size);
                  TeachinInfo _elem153;
                  for (int _i154 = 0; _i154 < _list152.size; ++_i154)
                  {
                    _elem153 = new TeachinInfo();
                    _elem153.read(iprot);
                    struct.success.add(_elem153);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
                struct.applyException.read(iprot);
                struct.setApplyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listTeachinInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TeachinInfo _iter155 : struct.success)
            {
              _iter155.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.applyException != null) {
          oprot.writeFieldBegin(APPLY_EXCEPTION_FIELD_DESC);
          struct.applyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listTeachinInfo_resultTupleSchemeFactory implements SchemeFactory {
      public listTeachinInfo_resultTupleScheme getScheme() {
        return new listTeachinInfo_resultTupleScheme();
      }
    }

    private static class listTeachinInfo_resultTupleScheme extends TupleScheme<listTeachinInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listTeachinInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TeachinInfo _iter156 : struct.success)
            {
              _iter156.write(oprot);
            }
          }
        }
        if (struct.isSetApplyException()) {
          struct.applyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listTeachinInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TeachinInfo>(_list157.size);
            TeachinInfo _elem158;
            for (int _i159 = 0; _i159 < _list157.size; ++_i159)
            {
              _elem158 = new TeachinInfo();
              _elem158.read(iprot);
              struct.success.add(_elem158);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
          struct.applyException.read(iprot);
          struct.setApplyExceptionIsSet(true);
        }
      }
    }

  }

  public static class updateTeachinInfo_args implements org.apache.thrift.TBase<updateTeachinInfo_args, updateTeachinInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateTeachinInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTeachinInfo_args");

    private static final org.apache.thrift.protocol.TField TEACHIN_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("teachinInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTeachinInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTeachinInfo_argsTupleSchemeFactory());
    }

    public TeachinInfo teachinInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEACHIN_INFO((short)1, "teachinInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEACHIN_INFO
            return TEACHIN_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEACHIN_INFO, new org.apache.thrift.meta_data.FieldMetaData("teachinInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TeachinInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTeachinInfo_args.class, metaDataMap);
    }

    public updateTeachinInfo_args() {
    }

    public updateTeachinInfo_args(
      TeachinInfo teachinInfo)
    {
      this();
      this.teachinInfo = teachinInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTeachinInfo_args(updateTeachinInfo_args other) {
      if (other.isSetTeachinInfo()) {
        this.teachinInfo = new TeachinInfo(other.teachinInfo);
      }
    }

    public updateTeachinInfo_args deepCopy() {
      return new updateTeachinInfo_args(this);
    }

    @Override
    public void clear() {
      this.teachinInfo = null;
    }

    public TeachinInfo getTeachinInfo() {
      return this.teachinInfo;
    }

    public updateTeachinInfo_args setTeachinInfo(TeachinInfo teachinInfo) {
      this.teachinInfo = teachinInfo;
      return this;
    }

    public void unsetTeachinInfo() {
      this.teachinInfo = null;
    }

    /** Returns true if field teachinInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetTeachinInfo() {
      return this.teachinInfo != null;
    }

    public void setTeachinInfoIsSet(boolean value) {
      if (!value) {
        this.teachinInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEACHIN_INFO:
        if (value == null) {
          unsetTeachinInfo();
        } else {
          setTeachinInfo((TeachinInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEACHIN_INFO:
        return getTeachinInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEACHIN_INFO:
        return isSetTeachinInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTeachinInfo_args)
        return this.equals((updateTeachinInfo_args)that);
      return false;
    }

    public boolean equals(updateTeachinInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_teachinInfo = true && this.isSetTeachinInfo();
      boolean that_present_teachinInfo = true && that.isSetTeachinInfo();
      if (this_present_teachinInfo || that_present_teachinInfo) {
        if (!(this_present_teachinInfo && that_present_teachinInfo))
          return false;
        if (!this.teachinInfo.equals(that.teachinInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_teachinInfo = true && (isSetTeachinInfo());
      list.add(present_teachinInfo);
      if (present_teachinInfo)
        list.add(teachinInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateTeachinInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTeachinInfo()).compareTo(other.isSetTeachinInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTeachinInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teachinInfo, other.teachinInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTeachinInfo_args(");
      boolean first = true;

      sb.append("teachinInfo:");
      if (this.teachinInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.teachinInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (teachinInfo != null) {
        teachinInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTeachinInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateTeachinInfo_argsStandardScheme getScheme() {
        return new updateTeachinInfo_argsStandardScheme();
      }
    }

    private static class updateTeachinInfo_argsStandardScheme extends StandardScheme<updateTeachinInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTeachinInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEACHIN_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.teachinInfo = new TeachinInfo();
                struct.teachinInfo.read(iprot);
                struct.setTeachinInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTeachinInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.teachinInfo != null) {
          oprot.writeFieldBegin(TEACHIN_INFO_FIELD_DESC);
          struct.teachinInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTeachinInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateTeachinInfo_argsTupleScheme getScheme() {
        return new updateTeachinInfo_argsTupleScheme();
      }
    }

    private static class updateTeachinInfo_argsTupleScheme extends TupleScheme<updateTeachinInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTeachinInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTeachinInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTeachinInfo()) {
          struct.teachinInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTeachinInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.teachinInfo = new TeachinInfo();
          struct.teachinInfo.read(iprot);
          struct.setTeachinInfoIsSet(true);
        }
      }
    }

  }

  public static class updateTeachinInfo_result implements org.apache.thrift.TBase<updateTeachinInfo_result, updateTeachinInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateTeachinInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateTeachinInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField APPLY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateTeachinInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateTeachinInfo_resultTupleSchemeFactory());
    }

    public TeachinInfo success; // required
    public com.linyk3.thrift.apply.exception.ApplyException applyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLY_EXCEPTION((short)1, "applyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLY_EXCEPTION
            return APPLY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TeachinInfo.class)));
      tmpMap.put(_Fields.APPLY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateTeachinInfo_result.class, metaDataMap);
    }

    public updateTeachinInfo_result() {
    }

    public updateTeachinInfo_result(
      TeachinInfo success,
      com.linyk3.thrift.apply.exception.ApplyException applyException)
    {
      this();
      this.success = success;
      this.applyException = applyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTeachinInfo_result(updateTeachinInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new TeachinInfo(other.success);
      }
      if (other.isSetApplyException()) {
        this.applyException = new com.linyk3.thrift.apply.exception.ApplyException(other.applyException);
      }
    }

    public updateTeachinInfo_result deepCopy() {
      return new updateTeachinInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applyException = null;
    }

    public TeachinInfo getSuccess() {
      return this.success;
    }

    public updateTeachinInfo_result setSuccess(TeachinInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.linyk3.thrift.apply.exception.ApplyException getApplyException() {
      return this.applyException;
    }

    public updateTeachinInfo_result setApplyException(com.linyk3.thrift.apply.exception.ApplyException applyException) {
      this.applyException = applyException;
      return this;
    }

    public void unsetApplyException() {
      this.applyException = null;
    }

    /** Returns true if field applyException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyException() {
      return this.applyException != null;
    }

    public void setApplyExceptionIsSet(boolean value) {
      if (!value) {
        this.applyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TeachinInfo)value);
        }
        break;

      case APPLY_EXCEPTION:
        if (value == null) {
          unsetApplyException();
        } else {
          setApplyException((com.linyk3.thrift.apply.exception.ApplyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLY_EXCEPTION:
        return getApplyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLY_EXCEPTION:
        return isSetApplyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTeachinInfo_result)
        return this.equals((updateTeachinInfo_result)that);
      return false;
    }

    public boolean equals(updateTeachinInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applyException = true && this.isSetApplyException();
      boolean that_present_applyException = true && that.isSetApplyException();
      if (this_present_applyException || that_present_applyException) {
        if (!(this_present_applyException && that_present_applyException))
          return false;
        if (!this.applyException.equals(that.applyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_applyException = true && (isSetApplyException());
      list.add(present_applyException);
      if (present_applyException)
        list.add(applyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateTeachinInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyException()).compareTo(other.isSetApplyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyException, other.applyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateTeachinInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyException:");
      if (this.applyException == null) {
        sb.append("null");
      } else {
        sb.append(this.applyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateTeachinInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateTeachinInfo_resultStandardScheme getScheme() {
        return new updateTeachinInfo_resultStandardScheme();
      }
    }

    private static class updateTeachinInfo_resultStandardScheme extends StandardScheme<updateTeachinInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateTeachinInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TeachinInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
                struct.applyException.read(iprot);
                struct.setApplyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateTeachinInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.applyException != null) {
          oprot.writeFieldBegin(APPLY_EXCEPTION_FIELD_DESC);
          struct.applyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateTeachinInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateTeachinInfo_resultTupleScheme getScheme() {
        return new updateTeachinInfo_resultTupleScheme();
      }
    }

    private static class updateTeachinInfo_resultTupleScheme extends TupleScheme<updateTeachinInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateTeachinInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetApplyException()) {
          struct.applyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateTeachinInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TeachinInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
          struct.applyException.read(iprot);
          struct.setApplyExceptionIsSet(true);
        }
      }
    }

  }

  public static class deleteTeachinInfo_args implements org.apache.thrift.TBase<deleteTeachinInfo_args, deleteTeachinInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteTeachinInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteTeachinInfo_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteTeachinInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteTeachinInfo_argsTupleSchemeFactory());
    }

    public String _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteTeachinInfo_args.class, metaDataMap);
    }

    public deleteTeachinInfo_args() {
    }

    public deleteTeachinInfo_args(
      String _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteTeachinInfo_args(deleteTeachinInfo_args other) {
      if (other.isSet_id()) {
        this._id = other._id;
      }
    }

    public deleteTeachinInfo_args deepCopy() {
      return new deleteTeachinInfo_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public String get_id() {
      return this._id;
    }

    public deleteTeachinInfo_args set_id(String _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteTeachinInfo_args)
        return this.equals((deleteTeachinInfo_args)that);
      return false;
    }

    public boolean equals(deleteTeachinInfo_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present__id = true && (isSet_id());
      list.add(present__id);
      if (present__id)
        list.add(_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteTeachinInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(other.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, other._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteTeachinInfo_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteTeachinInfo_argsStandardSchemeFactory implements SchemeFactory {
      public deleteTeachinInfo_argsStandardScheme getScheme() {
        return new deleteTeachinInfo_argsStandardScheme();
      }
    }

    private static class deleteTeachinInfo_argsStandardScheme extends StandardScheme<deleteTeachinInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteTeachinInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct._id = iprot.readString();
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteTeachinInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          oprot.writeString(struct._id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteTeachinInfo_argsTupleSchemeFactory implements SchemeFactory {
      public deleteTeachinInfo_argsTupleScheme getScheme() {
        return new deleteTeachinInfo_argsTupleScheme();
      }
    }

    private static class deleteTeachinInfo_argsTupleScheme extends TupleScheme<deleteTeachinInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteTeachinInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          oprot.writeString(struct._id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteTeachinInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = iprot.readString();
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class deleteTeachinInfo_result implements org.apache.thrift.TBase<deleteTeachinInfo_result, deleteTeachinInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteTeachinInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteTeachinInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField APPLY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteTeachinInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteTeachinInfo_resultTupleSchemeFactory());
    }

    public TeachinInfo success; // required
    public com.linyk3.thrift.apply.exception.ApplyException applyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLY_EXCEPTION((short)1, "applyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLY_EXCEPTION
            return APPLY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TeachinInfo.class)));
      tmpMap.put(_Fields.APPLY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteTeachinInfo_result.class, metaDataMap);
    }

    public deleteTeachinInfo_result() {
    }

    public deleteTeachinInfo_result(
      TeachinInfo success,
      com.linyk3.thrift.apply.exception.ApplyException applyException)
    {
      this();
      this.success = success;
      this.applyException = applyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteTeachinInfo_result(deleteTeachinInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new TeachinInfo(other.success);
      }
      if (other.isSetApplyException()) {
        this.applyException = new com.linyk3.thrift.apply.exception.ApplyException(other.applyException);
      }
    }

    public deleteTeachinInfo_result deepCopy() {
      return new deleteTeachinInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applyException = null;
    }

    public TeachinInfo getSuccess() {
      return this.success;
    }

    public deleteTeachinInfo_result setSuccess(TeachinInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.linyk3.thrift.apply.exception.ApplyException getApplyException() {
      return this.applyException;
    }

    public deleteTeachinInfo_result setApplyException(com.linyk3.thrift.apply.exception.ApplyException applyException) {
      this.applyException = applyException;
      return this;
    }

    public void unsetApplyException() {
      this.applyException = null;
    }

    /** Returns true if field applyException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyException() {
      return this.applyException != null;
    }

    public void setApplyExceptionIsSet(boolean value) {
      if (!value) {
        this.applyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TeachinInfo)value);
        }
        break;

      case APPLY_EXCEPTION:
        if (value == null) {
          unsetApplyException();
        } else {
          setApplyException((com.linyk3.thrift.apply.exception.ApplyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLY_EXCEPTION:
        return getApplyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLY_EXCEPTION:
        return isSetApplyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteTeachinInfo_result)
        return this.equals((deleteTeachinInfo_result)that);
      return false;
    }

    public boolean equals(deleteTeachinInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applyException = true && this.isSetApplyException();
      boolean that_present_applyException = true && that.isSetApplyException();
      if (this_present_applyException || that_present_applyException) {
        if (!(this_present_applyException && that_present_applyException))
          return false;
        if (!this.applyException.equals(that.applyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_applyException = true && (isSetApplyException());
      list.add(present_applyException);
      if (present_applyException)
        list.add(applyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteTeachinInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyException()).compareTo(other.isSetApplyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyException, other.applyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteTeachinInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyException:");
      if (this.applyException == null) {
        sb.append("null");
      } else {
        sb.append(this.applyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteTeachinInfo_resultStandardSchemeFactory implements SchemeFactory {
      public deleteTeachinInfo_resultStandardScheme getScheme() {
        return new deleteTeachinInfo_resultStandardScheme();
      }
    }

    private static class deleteTeachinInfo_resultStandardScheme extends StandardScheme<deleteTeachinInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteTeachinInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TeachinInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
                struct.applyException.read(iprot);
                struct.setApplyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteTeachinInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.applyException != null) {
          oprot.writeFieldBegin(APPLY_EXCEPTION_FIELD_DESC);
          struct.applyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteTeachinInfo_resultTupleSchemeFactory implements SchemeFactory {
      public deleteTeachinInfo_resultTupleScheme getScheme() {
        return new deleteTeachinInfo_resultTupleScheme();
      }
    }

    private static class deleteTeachinInfo_resultTupleScheme extends TupleScheme<deleteTeachinInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteTeachinInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetApplyException()) {
          struct.applyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteTeachinInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TeachinInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
          struct.applyException.read(iprot);
          struct.setApplyExceptionIsSet(true);
        }
      }
    }

  }

  public static class findExaminationInfo_args implements org.apache.thrift.TBase<findExaminationInfo_args, findExaminationInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<findExaminationInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findExaminationInfo_args");

    private static final org.apache.thrift.protocol.TField FIND_EXAMINATION_INFO_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("findExaminationInfoParams", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findExaminationInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findExaminationInfo_argsTupleSchemeFactory());
    }

    public com.linyk3.thrift.apply.params.FindExaminationInfoParams findExaminationInfoParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIND_EXAMINATION_INFO_PARAMS((short)1, "findExaminationInfoParams");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIND_EXAMINATION_INFO_PARAMS
            return FIND_EXAMINATION_INFO_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIND_EXAMINATION_INFO_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("findExaminationInfoParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.linyk3.thrift.apply.params.FindExaminationInfoParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findExaminationInfo_args.class, metaDataMap);
    }

    public findExaminationInfo_args() {
    }

    public findExaminationInfo_args(
      com.linyk3.thrift.apply.params.FindExaminationInfoParams findExaminationInfoParams)
    {
      this();
      this.findExaminationInfoParams = findExaminationInfoParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findExaminationInfo_args(findExaminationInfo_args other) {
      if (other.isSetFindExaminationInfoParams()) {
        this.findExaminationInfoParams = new com.linyk3.thrift.apply.params.FindExaminationInfoParams(other.findExaminationInfoParams);
      }
    }

    public findExaminationInfo_args deepCopy() {
      return new findExaminationInfo_args(this);
    }

    @Override
    public void clear() {
      this.findExaminationInfoParams = null;
    }

    public com.linyk3.thrift.apply.params.FindExaminationInfoParams getFindExaminationInfoParams() {
      return this.findExaminationInfoParams;
    }

    public findExaminationInfo_args setFindExaminationInfoParams(com.linyk3.thrift.apply.params.FindExaminationInfoParams findExaminationInfoParams) {
      this.findExaminationInfoParams = findExaminationInfoParams;
      return this;
    }

    public void unsetFindExaminationInfoParams() {
      this.findExaminationInfoParams = null;
    }

    /** Returns true if field findExaminationInfoParams is set (has been assigned a value) and false otherwise */
    public boolean isSetFindExaminationInfoParams() {
      return this.findExaminationInfoParams != null;
    }

    public void setFindExaminationInfoParamsIsSet(boolean value) {
      if (!value) {
        this.findExaminationInfoParams = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FIND_EXAMINATION_INFO_PARAMS:
        if (value == null) {
          unsetFindExaminationInfoParams();
        } else {
          setFindExaminationInfoParams((com.linyk3.thrift.apply.params.FindExaminationInfoParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FIND_EXAMINATION_INFO_PARAMS:
        return getFindExaminationInfoParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FIND_EXAMINATION_INFO_PARAMS:
        return isSetFindExaminationInfoParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findExaminationInfo_args)
        return this.equals((findExaminationInfo_args)that);
      return false;
    }

    public boolean equals(findExaminationInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_findExaminationInfoParams = true && this.isSetFindExaminationInfoParams();
      boolean that_present_findExaminationInfoParams = true && that.isSetFindExaminationInfoParams();
      if (this_present_findExaminationInfoParams || that_present_findExaminationInfoParams) {
        if (!(this_present_findExaminationInfoParams && that_present_findExaminationInfoParams))
          return false;
        if (!this.findExaminationInfoParams.equals(that.findExaminationInfoParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_findExaminationInfoParams = true && (isSetFindExaminationInfoParams());
      list.add(present_findExaminationInfoParams);
      if (present_findExaminationInfoParams)
        list.add(findExaminationInfoParams);

      return list.hashCode();
    }

    @Override
    public int compareTo(findExaminationInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFindExaminationInfoParams()).compareTo(other.isSetFindExaminationInfoParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFindExaminationInfoParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.findExaminationInfoParams, other.findExaminationInfoParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findExaminationInfo_args(");
      boolean first = true;

      sb.append("findExaminationInfoParams:");
      if (this.findExaminationInfoParams == null) {
        sb.append("null");
      } else {
        sb.append(this.findExaminationInfoParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (findExaminationInfoParams != null) {
        findExaminationInfoParams.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findExaminationInfo_argsStandardSchemeFactory implements SchemeFactory {
      public findExaminationInfo_argsStandardScheme getScheme() {
        return new findExaminationInfo_argsStandardScheme();
      }
    }

    private static class findExaminationInfo_argsStandardScheme extends StandardScheme<findExaminationInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findExaminationInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIND_EXAMINATION_INFO_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.findExaminationInfoParams = new com.linyk3.thrift.apply.params.FindExaminationInfoParams();
                struct.findExaminationInfoParams.read(iprot);
                struct.setFindExaminationInfoParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findExaminationInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.findExaminationInfoParams != null) {
          oprot.writeFieldBegin(FIND_EXAMINATION_INFO_PARAMS_FIELD_DESC);
          struct.findExaminationInfoParams.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findExaminationInfo_argsTupleSchemeFactory implements SchemeFactory {
      public findExaminationInfo_argsTupleScheme getScheme() {
        return new findExaminationInfo_argsTupleScheme();
      }
    }

    private static class findExaminationInfo_argsTupleScheme extends TupleScheme<findExaminationInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findExaminationInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFindExaminationInfoParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFindExaminationInfoParams()) {
          struct.findExaminationInfoParams.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findExaminationInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.findExaminationInfoParams = new com.linyk3.thrift.apply.params.FindExaminationInfoParams();
          struct.findExaminationInfoParams.read(iprot);
          struct.setFindExaminationInfoParamsIsSet(true);
        }
      }
    }

  }

  public static class findExaminationInfo_result implements org.apache.thrift.TBase<findExaminationInfo_result, findExaminationInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<findExaminationInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findExaminationInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField APPLY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findExaminationInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findExaminationInfo_resultTupleSchemeFactory());
    }

    public ExaminationInfo success; // required
    public com.linyk3.thrift.apply.exception.ApplyException applyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLY_EXCEPTION((short)1, "applyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLY_EXCEPTION
            return APPLY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExaminationInfo.class)));
      tmpMap.put(_Fields.APPLY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findExaminationInfo_result.class, metaDataMap);
    }

    public findExaminationInfo_result() {
    }

    public findExaminationInfo_result(
      ExaminationInfo success,
      com.linyk3.thrift.apply.exception.ApplyException applyException)
    {
      this();
      this.success = success;
      this.applyException = applyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findExaminationInfo_result(findExaminationInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new ExaminationInfo(other.success);
      }
      if (other.isSetApplyException()) {
        this.applyException = new com.linyk3.thrift.apply.exception.ApplyException(other.applyException);
      }
    }

    public findExaminationInfo_result deepCopy() {
      return new findExaminationInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applyException = null;
    }

    public ExaminationInfo getSuccess() {
      return this.success;
    }

    public findExaminationInfo_result setSuccess(ExaminationInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.linyk3.thrift.apply.exception.ApplyException getApplyException() {
      return this.applyException;
    }

    public findExaminationInfo_result setApplyException(com.linyk3.thrift.apply.exception.ApplyException applyException) {
      this.applyException = applyException;
      return this;
    }

    public void unsetApplyException() {
      this.applyException = null;
    }

    /** Returns true if field applyException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyException() {
      return this.applyException != null;
    }

    public void setApplyExceptionIsSet(boolean value) {
      if (!value) {
        this.applyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ExaminationInfo)value);
        }
        break;

      case APPLY_EXCEPTION:
        if (value == null) {
          unsetApplyException();
        } else {
          setApplyException((com.linyk3.thrift.apply.exception.ApplyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLY_EXCEPTION:
        return getApplyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLY_EXCEPTION:
        return isSetApplyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findExaminationInfo_result)
        return this.equals((findExaminationInfo_result)that);
      return false;
    }

    public boolean equals(findExaminationInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applyException = true && this.isSetApplyException();
      boolean that_present_applyException = true && that.isSetApplyException();
      if (this_present_applyException || that_present_applyException) {
        if (!(this_present_applyException && that_present_applyException))
          return false;
        if (!this.applyException.equals(that.applyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_applyException = true && (isSetApplyException());
      list.add(present_applyException);
      if (present_applyException)
        list.add(applyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(findExaminationInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyException()).compareTo(other.isSetApplyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyException, other.applyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findExaminationInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyException:");
      if (this.applyException == null) {
        sb.append("null");
      } else {
        sb.append(this.applyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findExaminationInfo_resultStandardSchemeFactory implements SchemeFactory {
      public findExaminationInfo_resultStandardScheme getScheme() {
        return new findExaminationInfo_resultStandardScheme();
      }
    }

    private static class findExaminationInfo_resultStandardScheme extends StandardScheme<findExaminationInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findExaminationInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ExaminationInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
                struct.applyException.read(iprot);
                struct.setApplyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findExaminationInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.applyException != null) {
          oprot.writeFieldBegin(APPLY_EXCEPTION_FIELD_DESC);
          struct.applyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findExaminationInfo_resultTupleSchemeFactory implements SchemeFactory {
      public findExaminationInfo_resultTupleScheme getScheme() {
        return new findExaminationInfo_resultTupleScheme();
      }
    }

    private static class findExaminationInfo_resultTupleScheme extends TupleScheme<findExaminationInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findExaminationInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetApplyException()) {
          struct.applyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findExaminationInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ExaminationInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
          struct.applyException.read(iprot);
          struct.setApplyExceptionIsSet(true);
        }
      }
    }

  }

  public static class listExaminationInfo_args implements org.apache.thrift.TBase<listExaminationInfo_args, listExaminationInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<listExaminationInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listExaminationInfo_args");

    private static final org.apache.thrift.protocol.TField LIST_EXAMINATION_INFO_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("listExaminationInfoParams", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listExaminationInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listExaminationInfo_argsTupleSchemeFactory());
    }

    public com.linyk3.thrift.apply.params.ListExaminationInfoParams listExaminationInfoParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIST_EXAMINATION_INFO_PARAMS((short)1, "listExaminationInfoParams");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIST_EXAMINATION_INFO_PARAMS
            return LIST_EXAMINATION_INFO_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIST_EXAMINATION_INFO_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("listExaminationInfoParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.linyk3.thrift.apply.params.ListExaminationInfoParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listExaminationInfo_args.class, metaDataMap);
    }

    public listExaminationInfo_args() {
    }

    public listExaminationInfo_args(
      com.linyk3.thrift.apply.params.ListExaminationInfoParams listExaminationInfoParams)
    {
      this();
      this.listExaminationInfoParams = listExaminationInfoParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listExaminationInfo_args(listExaminationInfo_args other) {
      if (other.isSetListExaminationInfoParams()) {
        this.listExaminationInfoParams = new com.linyk3.thrift.apply.params.ListExaminationInfoParams(other.listExaminationInfoParams);
      }
    }

    public listExaminationInfo_args deepCopy() {
      return new listExaminationInfo_args(this);
    }

    @Override
    public void clear() {
      this.listExaminationInfoParams = null;
    }

    public com.linyk3.thrift.apply.params.ListExaminationInfoParams getListExaminationInfoParams() {
      return this.listExaminationInfoParams;
    }

    public listExaminationInfo_args setListExaminationInfoParams(com.linyk3.thrift.apply.params.ListExaminationInfoParams listExaminationInfoParams) {
      this.listExaminationInfoParams = listExaminationInfoParams;
      return this;
    }

    public void unsetListExaminationInfoParams() {
      this.listExaminationInfoParams = null;
    }

    /** Returns true if field listExaminationInfoParams is set (has been assigned a value) and false otherwise */
    public boolean isSetListExaminationInfoParams() {
      return this.listExaminationInfoParams != null;
    }

    public void setListExaminationInfoParamsIsSet(boolean value) {
      if (!value) {
        this.listExaminationInfoParams = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIST_EXAMINATION_INFO_PARAMS:
        if (value == null) {
          unsetListExaminationInfoParams();
        } else {
          setListExaminationInfoParams((com.linyk3.thrift.apply.params.ListExaminationInfoParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIST_EXAMINATION_INFO_PARAMS:
        return getListExaminationInfoParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIST_EXAMINATION_INFO_PARAMS:
        return isSetListExaminationInfoParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listExaminationInfo_args)
        return this.equals((listExaminationInfo_args)that);
      return false;
    }

    public boolean equals(listExaminationInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_listExaminationInfoParams = true && this.isSetListExaminationInfoParams();
      boolean that_present_listExaminationInfoParams = true && that.isSetListExaminationInfoParams();
      if (this_present_listExaminationInfoParams || that_present_listExaminationInfoParams) {
        if (!(this_present_listExaminationInfoParams && that_present_listExaminationInfoParams))
          return false;
        if (!this.listExaminationInfoParams.equals(that.listExaminationInfoParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_listExaminationInfoParams = true && (isSetListExaminationInfoParams());
      list.add(present_listExaminationInfoParams);
      if (present_listExaminationInfoParams)
        list.add(listExaminationInfoParams);

      return list.hashCode();
    }

    @Override
    public int compareTo(listExaminationInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetListExaminationInfoParams()).compareTo(other.isSetListExaminationInfoParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListExaminationInfoParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listExaminationInfoParams, other.listExaminationInfoParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listExaminationInfo_args(");
      boolean first = true;

      sb.append("listExaminationInfoParams:");
      if (this.listExaminationInfoParams == null) {
        sb.append("null");
      } else {
        sb.append(this.listExaminationInfoParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (listExaminationInfoParams != null) {
        listExaminationInfoParams.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listExaminationInfo_argsStandardSchemeFactory implements SchemeFactory {
      public listExaminationInfo_argsStandardScheme getScheme() {
        return new listExaminationInfo_argsStandardScheme();
      }
    }

    private static class listExaminationInfo_argsStandardScheme extends StandardScheme<listExaminationInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listExaminationInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIST_EXAMINATION_INFO_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.listExaminationInfoParams = new com.linyk3.thrift.apply.params.ListExaminationInfoParams();
                struct.listExaminationInfoParams.read(iprot);
                struct.setListExaminationInfoParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listExaminationInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.listExaminationInfoParams != null) {
          oprot.writeFieldBegin(LIST_EXAMINATION_INFO_PARAMS_FIELD_DESC);
          struct.listExaminationInfoParams.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listExaminationInfo_argsTupleSchemeFactory implements SchemeFactory {
      public listExaminationInfo_argsTupleScheme getScheme() {
        return new listExaminationInfo_argsTupleScheme();
      }
    }

    private static class listExaminationInfo_argsTupleScheme extends TupleScheme<listExaminationInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listExaminationInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetListExaminationInfoParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetListExaminationInfoParams()) {
          struct.listExaminationInfoParams.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listExaminationInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.listExaminationInfoParams = new com.linyk3.thrift.apply.params.ListExaminationInfoParams();
          struct.listExaminationInfoParams.read(iprot);
          struct.setListExaminationInfoParamsIsSet(true);
        }
      }
    }

  }

  public static class listExaminationInfo_result implements org.apache.thrift.TBase<listExaminationInfo_result, listExaminationInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<listExaminationInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listExaminationInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField APPLY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listExaminationInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listExaminationInfo_resultTupleSchemeFactory());
    }

    public List<ExaminationInfo> success; // required
    public com.linyk3.thrift.apply.exception.ApplyException applyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLY_EXCEPTION((short)1, "applyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLY_EXCEPTION
            return APPLY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExaminationInfo.class))));
      tmpMap.put(_Fields.APPLY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listExaminationInfo_result.class, metaDataMap);
    }

    public listExaminationInfo_result() {
    }

    public listExaminationInfo_result(
      List<ExaminationInfo> success,
      com.linyk3.thrift.apply.exception.ApplyException applyException)
    {
      this();
      this.success = success;
      this.applyException = applyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listExaminationInfo_result(listExaminationInfo_result other) {
      if (other.isSetSuccess()) {
        List<ExaminationInfo> __this__success = new ArrayList<ExaminationInfo>(other.success.size());
        for (ExaminationInfo other_element : other.success) {
          __this__success.add(new ExaminationInfo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetApplyException()) {
        this.applyException = new com.linyk3.thrift.apply.exception.ApplyException(other.applyException);
      }
    }

    public listExaminationInfo_result deepCopy() {
      return new listExaminationInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applyException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ExaminationInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ExaminationInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<ExaminationInfo>();
      }
      this.success.add(elem);
    }

    public List<ExaminationInfo> getSuccess() {
      return this.success;
    }

    public listExaminationInfo_result setSuccess(List<ExaminationInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.linyk3.thrift.apply.exception.ApplyException getApplyException() {
      return this.applyException;
    }

    public listExaminationInfo_result setApplyException(com.linyk3.thrift.apply.exception.ApplyException applyException) {
      this.applyException = applyException;
      return this;
    }

    public void unsetApplyException() {
      this.applyException = null;
    }

    /** Returns true if field applyException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyException() {
      return this.applyException != null;
    }

    public void setApplyExceptionIsSet(boolean value) {
      if (!value) {
        this.applyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ExaminationInfo>)value);
        }
        break;

      case APPLY_EXCEPTION:
        if (value == null) {
          unsetApplyException();
        } else {
          setApplyException((com.linyk3.thrift.apply.exception.ApplyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLY_EXCEPTION:
        return getApplyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLY_EXCEPTION:
        return isSetApplyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listExaminationInfo_result)
        return this.equals((listExaminationInfo_result)that);
      return false;
    }

    public boolean equals(listExaminationInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applyException = true && this.isSetApplyException();
      boolean that_present_applyException = true && that.isSetApplyException();
      if (this_present_applyException || that_present_applyException) {
        if (!(this_present_applyException && that_present_applyException))
          return false;
        if (!this.applyException.equals(that.applyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_applyException = true && (isSetApplyException());
      list.add(present_applyException);
      if (present_applyException)
        list.add(applyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(listExaminationInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyException()).compareTo(other.isSetApplyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyException, other.applyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listExaminationInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyException:");
      if (this.applyException == null) {
        sb.append("null");
      } else {
        sb.append(this.applyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listExaminationInfo_resultStandardSchemeFactory implements SchemeFactory {
      public listExaminationInfo_resultStandardScheme getScheme() {
        return new listExaminationInfo_resultStandardScheme();
      }
    }

    private static class listExaminationInfo_resultStandardScheme extends StandardScheme<listExaminationInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listExaminationInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                  struct.success = new ArrayList<ExaminationInfo>(_list160.size);
                  ExaminationInfo _elem161;
                  for (int _i162 = 0; _i162 < _list160.size; ++_i162)
                  {
                    _elem161 = new ExaminationInfo();
                    _elem161.read(iprot);
                    struct.success.add(_elem161);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
                struct.applyException.read(iprot);
                struct.setApplyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listExaminationInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ExaminationInfo _iter163 : struct.success)
            {
              _iter163.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.applyException != null) {
          oprot.writeFieldBegin(APPLY_EXCEPTION_FIELD_DESC);
          struct.applyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listExaminationInfo_resultTupleSchemeFactory implements SchemeFactory {
      public listExaminationInfo_resultTupleScheme getScheme() {
        return new listExaminationInfo_resultTupleScheme();
      }
    }

    private static class listExaminationInfo_resultTupleScheme extends TupleScheme<listExaminationInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listExaminationInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ExaminationInfo _iter164 : struct.success)
            {
              _iter164.write(oprot);
            }
          }
        }
        if (struct.isSetApplyException()) {
          struct.applyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listExaminationInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list165 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ExaminationInfo>(_list165.size);
            ExaminationInfo _elem166;
            for (int _i167 = 0; _i167 < _list165.size; ++_i167)
            {
              _elem166 = new ExaminationInfo();
              _elem166.read(iprot);
              struct.success.add(_elem166);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
          struct.applyException.read(iprot);
          struct.setApplyExceptionIsSet(true);
        }
      }
    }

  }

  public static class updateExaminationInfo_args implements org.apache.thrift.TBase<updateExaminationInfo_args, updateExaminationInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateExaminationInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateExaminationInfo_args");

    private static final org.apache.thrift.protocol.TField EXAMINATION_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("examinationInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateExaminationInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateExaminationInfo_argsTupleSchemeFactory());
    }

    public ExaminationInfo examinationInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXAMINATION_INFO((short)1, "examinationInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXAMINATION_INFO
            return EXAMINATION_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXAMINATION_INFO, new org.apache.thrift.meta_data.FieldMetaData("examinationInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExaminationInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateExaminationInfo_args.class, metaDataMap);
    }

    public updateExaminationInfo_args() {
    }

    public updateExaminationInfo_args(
      ExaminationInfo examinationInfo)
    {
      this();
      this.examinationInfo = examinationInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateExaminationInfo_args(updateExaminationInfo_args other) {
      if (other.isSetExaminationInfo()) {
        this.examinationInfo = new ExaminationInfo(other.examinationInfo);
      }
    }

    public updateExaminationInfo_args deepCopy() {
      return new updateExaminationInfo_args(this);
    }

    @Override
    public void clear() {
      this.examinationInfo = null;
    }

    public ExaminationInfo getExaminationInfo() {
      return this.examinationInfo;
    }

    public updateExaminationInfo_args setExaminationInfo(ExaminationInfo examinationInfo) {
      this.examinationInfo = examinationInfo;
      return this;
    }

    public void unsetExaminationInfo() {
      this.examinationInfo = null;
    }

    /** Returns true if field examinationInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetExaminationInfo() {
      return this.examinationInfo != null;
    }

    public void setExaminationInfoIsSet(boolean value) {
      if (!value) {
        this.examinationInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXAMINATION_INFO:
        if (value == null) {
          unsetExaminationInfo();
        } else {
          setExaminationInfo((ExaminationInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXAMINATION_INFO:
        return getExaminationInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXAMINATION_INFO:
        return isSetExaminationInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateExaminationInfo_args)
        return this.equals((updateExaminationInfo_args)that);
      return false;
    }

    public boolean equals(updateExaminationInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_examinationInfo = true && this.isSetExaminationInfo();
      boolean that_present_examinationInfo = true && that.isSetExaminationInfo();
      if (this_present_examinationInfo || that_present_examinationInfo) {
        if (!(this_present_examinationInfo && that_present_examinationInfo))
          return false;
        if (!this.examinationInfo.equals(that.examinationInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_examinationInfo = true && (isSetExaminationInfo());
      list.add(present_examinationInfo);
      if (present_examinationInfo)
        list.add(examinationInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateExaminationInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExaminationInfo()).compareTo(other.isSetExaminationInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExaminationInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examinationInfo, other.examinationInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateExaminationInfo_args(");
      boolean first = true;

      sb.append("examinationInfo:");
      if (this.examinationInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.examinationInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (examinationInfo != null) {
        examinationInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateExaminationInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateExaminationInfo_argsStandardScheme getScheme() {
        return new updateExaminationInfo_argsStandardScheme();
      }
    }

    private static class updateExaminationInfo_argsStandardScheme extends StandardScheme<updateExaminationInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateExaminationInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXAMINATION_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.examinationInfo = new ExaminationInfo();
                struct.examinationInfo.read(iprot);
                struct.setExaminationInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateExaminationInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.examinationInfo != null) {
          oprot.writeFieldBegin(EXAMINATION_INFO_FIELD_DESC);
          struct.examinationInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateExaminationInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateExaminationInfo_argsTupleScheme getScheme() {
        return new updateExaminationInfo_argsTupleScheme();
      }
    }

    private static class updateExaminationInfo_argsTupleScheme extends TupleScheme<updateExaminationInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateExaminationInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExaminationInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExaminationInfo()) {
          struct.examinationInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateExaminationInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.examinationInfo = new ExaminationInfo();
          struct.examinationInfo.read(iprot);
          struct.setExaminationInfoIsSet(true);
        }
      }
    }

  }

  public static class updateExaminationInfo_result implements org.apache.thrift.TBase<updateExaminationInfo_result, updateExaminationInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateExaminationInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateExaminationInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField APPLY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateExaminationInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateExaminationInfo_resultTupleSchemeFactory());
    }

    public ExaminationInfo success; // required
    public com.linyk3.thrift.apply.exception.ApplyException applyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLY_EXCEPTION((short)1, "applyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLY_EXCEPTION
            return APPLY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExaminationInfo.class)));
      tmpMap.put(_Fields.APPLY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateExaminationInfo_result.class, metaDataMap);
    }

    public updateExaminationInfo_result() {
    }

    public updateExaminationInfo_result(
      ExaminationInfo success,
      com.linyk3.thrift.apply.exception.ApplyException applyException)
    {
      this();
      this.success = success;
      this.applyException = applyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateExaminationInfo_result(updateExaminationInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new ExaminationInfo(other.success);
      }
      if (other.isSetApplyException()) {
        this.applyException = new com.linyk3.thrift.apply.exception.ApplyException(other.applyException);
      }
    }

    public updateExaminationInfo_result deepCopy() {
      return new updateExaminationInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applyException = null;
    }

    public ExaminationInfo getSuccess() {
      return this.success;
    }

    public updateExaminationInfo_result setSuccess(ExaminationInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.linyk3.thrift.apply.exception.ApplyException getApplyException() {
      return this.applyException;
    }

    public updateExaminationInfo_result setApplyException(com.linyk3.thrift.apply.exception.ApplyException applyException) {
      this.applyException = applyException;
      return this;
    }

    public void unsetApplyException() {
      this.applyException = null;
    }

    /** Returns true if field applyException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyException() {
      return this.applyException != null;
    }

    public void setApplyExceptionIsSet(boolean value) {
      if (!value) {
        this.applyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ExaminationInfo)value);
        }
        break;

      case APPLY_EXCEPTION:
        if (value == null) {
          unsetApplyException();
        } else {
          setApplyException((com.linyk3.thrift.apply.exception.ApplyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLY_EXCEPTION:
        return getApplyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLY_EXCEPTION:
        return isSetApplyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateExaminationInfo_result)
        return this.equals((updateExaminationInfo_result)that);
      return false;
    }

    public boolean equals(updateExaminationInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applyException = true && this.isSetApplyException();
      boolean that_present_applyException = true && that.isSetApplyException();
      if (this_present_applyException || that_present_applyException) {
        if (!(this_present_applyException && that_present_applyException))
          return false;
        if (!this.applyException.equals(that.applyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_applyException = true && (isSetApplyException());
      list.add(present_applyException);
      if (present_applyException)
        list.add(applyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateExaminationInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyException()).compareTo(other.isSetApplyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyException, other.applyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateExaminationInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyException:");
      if (this.applyException == null) {
        sb.append("null");
      } else {
        sb.append(this.applyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateExaminationInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateExaminationInfo_resultStandardScheme getScheme() {
        return new updateExaminationInfo_resultStandardScheme();
      }
    }

    private static class updateExaminationInfo_resultStandardScheme extends StandardScheme<updateExaminationInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateExaminationInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ExaminationInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
                struct.applyException.read(iprot);
                struct.setApplyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateExaminationInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.applyException != null) {
          oprot.writeFieldBegin(APPLY_EXCEPTION_FIELD_DESC);
          struct.applyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateExaminationInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateExaminationInfo_resultTupleScheme getScheme() {
        return new updateExaminationInfo_resultTupleScheme();
      }
    }

    private static class updateExaminationInfo_resultTupleScheme extends TupleScheme<updateExaminationInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateExaminationInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetApplyException()) {
          struct.applyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateExaminationInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ExaminationInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
          struct.applyException.read(iprot);
          struct.setApplyExceptionIsSet(true);
        }
      }
    }

  }

  public static class deleteExaminationInfo_args implements org.apache.thrift.TBase<deleteExaminationInfo_args, deleteExaminationInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteExaminationInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteExaminationInfo_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteExaminationInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteExaminationInfo_argsTupleSchemeFactory());
    }

    public String _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteExaminationInfo_args.class, metaDataMap);
    }

    public deleteExaminationInfo_args() {
    }

    public deleteExaminationInfo_args(
      String _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteExaminationInfo_args(deleteExaminationInfo_args other) {
      if (other.isSet_id()) {
        this._id = other._id;
      }
    }

    public deleteExaminationInfo_args deepCopy() {
      return new deleteExaminationInfo_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public String get_id() {
      return this._id;
    }

    public deleteExaminationInfo_args set_id(String _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteExaminationInfo_args)
        return this.equals((deleteExaminationInfo_args)that);
      return false;
    }

    public boolean equals(deleteExaminationInfo_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present__id = true && (isSet_id());
      list.add(present__id);
      if (present__id)
        list.add(_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteExaminationInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(other.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, other._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteExaminationInfo_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteExaminationInfo_argsStandardSchemeFactory implements SchemeFactory {
      public deleteExaminationInfo_argsStandardScheme getScheme() {
        return new deleteExaminationInfo_argsStandardScheme();
      }
    }

    private static class deleteExaminationInfo_argsStandardScheme extends StandardScheme<deleteExaminationInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteExaminationInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct._id = iprot.readString();
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteExaminationInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          oprot.writeString(struct._id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteExaminationInfo_argsTupleSchemeFactory implements SchemeFactory {
      public deleteExaminationInfo_argsTupleScheme getScheme() {
        return new deleteExaminationInfo_argsTupleScheme();
      }
    }

    private static class deleteExaminationInfo_argsTupleScheme extends TupleScheme<deleteExaminationInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteExaminationInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          oprot.writeString(struct._id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteExaminationInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = iprot.readString();
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class deleteExaminationInfo_result implements org.apache.thrift.TBase<deleteExaminationInfo_result, deleteExaminationInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteExaminationInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteExaminationInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField APPLY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteExaminationInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteExaminationInfo_resultTupleSchemeFactory());
    }

    public ExaminationInfo success; // required
    public com.linyk3.thrift.apply.exception.ApplyException applyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLY_EXCEPTION((short)1, "applyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLY_EXCEPTION
            return APPLY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExaminationInfo.class)));
      tmpMap.put(_Fields.APPLY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteExaminationInfo_result.class, metaDataMap);
    }

    public deleteExaminationInfo_result() {
    }

    public deleteExaminationInfo_result(
      ExaminationInfo success,
      com.linyk3.thrift.apply.exception.ApplyException applyException)
    {
      this();
      this.success = success;
      this.applyException = applyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteExaminationInfo_result(deleteExaminationInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new ExaminationInfo(other.success);
      }
      if (other.isSetApplyException()) {
        this.applyException = new com.linyk3.thrift.apply.exception.ApplyException(other.applyException);
      }
    }

    public deleteExaminationInfo_result deepCopy() {
      return new deleteExaminationInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applyException = null;
    }

    public ExaminationInfo getSuccess() {
      return this.success;
    }

    public deleteExaminationInfo_result setSuccess(ExaminationInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.linyk3.thrift.apply.exception.ApplyException getApplyException() {
      return this.applyException;
    }

    public deleteExaminationInfo_result setApplyException(com.linyk3.thrift.apply.exception.ApplyException applyException) {
      this.applyException = applyException;
      return this;
    }

    public void unsetApplyException() {
      this.applyException = null;
    }

    /** Returns true if field applyException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyException() {
      return this.applyException != null;
    }

    public void setApplyExceptionIsSet(boolean value) {
      if (!value) {
        this.applyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ExaminationInfo)value);
        }
        break;

      case APPLY_EXCEPTION:
        if (value == null) {
          unsetApplyException();
        } else {
          setApplyException((com.linyk3.thrift.apply.exception.ApplyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLY_EXCEPTION:
        return getApplyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLY_EXCEPTION:
        return isSetApplyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteExaminationInfo_result)
        return this.equals((deleteExaminationInfo_result)that);
      return false;
    }

    public boolean equals(deleteExaminationInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applyException = true && this.isSetApplyException();
      boolean that_present_applyException = true && that.isSetApplyException();
      if (this_present_applyException || that_present_applyException) {
        if (!(this_present_applyException && that_present_applyException))
          return false;
        if (!this.applyException.equals(that.applyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_applyException = true && (isSetApplyException());
      list.add(present_applyException);
      if (present_applyException)
        list.add(applyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteExaminationInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyException()).compareTo(other.isSetApplyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyException, other.applyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteExaminationInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyException:");
      if (this.applyException == null) {
        sb.append("null");
      } else {
        sb.append(this.applyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteExaminationInfo_resultStandardSchemeFactory implements SchemeFactory {
      public deleteExaminationInfo_resultStandardScheme getScheme() {
        return new deleteExaminationInfo_resultStandardScheme();
      }
    }

    private static class deleteExaminationInfo_resultStandardScheme extends StandardScheme<deleteExaminationInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteExaminationInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ExaminationInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
                struct.applyException.read(iprot);
                struct.setApplyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteExaminationInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.applyException != null) {
          oprot.writeFieldBegin(APPLY_EXCEPTION_FIELD_DESC);
          struct.applyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteExaminationInfo_resultTupleSchemeFactory implements SchemeFactory {
      public deleteExaminationInfo_resultTupleScheme getScheme() {
        return new deleteExaminationInfo_resultTupleScheme();
      }
    }

    private static class deleteExaminationInfo_resultTupleScheme extends TupleScheme<deleteExaminationInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteExaminationInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetApplyException()) {
          struct.applyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteExaminationInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ExaminationInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
          struct.applyException.read(iprot);
          struct.setApplyExceptionIsSet(true);
        }
      }
    }

  }

  public static class findInterviewInfo_args implements org.apache.thrift.TBase<findInterviewInfo_args, findInterviewInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<findInterviewInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findInterviewInfo_args");

    private static final org.apache.thrift.protocol.TField FIND_INTERVIEW_INFO_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("findInterviewInfoParams", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findInterviewInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findInterviewInfo_argsTupleSchemeFactory());
    }

    public com.linyk3.thrift.apply.params.FindInterviewInfoParams findInterviewInfoParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIND_INTERVIEW_INFO_PARAMS((short)1, "findInterviewInfoParams");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIND_INTERVIEW_INFO_PARAMS
            return FIND_INTERVIEW_INFO_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIND_INTERVIEW_INFO_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("findInterviewInfoParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.linyk3.thrift.apply.params.FindInterviewInfoParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findInterviewInfo_args.class, metaDataMap);
    }

    public findInterviewInfo_args() {
    }

    public findInterviewInfo_args(
      com.linyk3.thrift.apply.params.FindInterviewInfoParams findInterviewInfoParams)
    {
      this();
      this.findInterviewInfoParams = findInterviewInfoParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findInterviewInfo_args(findInterviewInfo_args other) {
      if (other.isSetFindInterviewInfoParams()) {
        this.findInterviewInfoParams = new com.linyk3.thrift.apply.params.FindInterviewInfoParams(other.findInterviewInfoParams);
      }
    }

    public findInterviewInfo_args deepCopy() {
      return new findInterviewInfo_args(this);
    }

    @Override
    public void clear() {
      this.findInterviewInfoParams = null;
    }

    public com.linyk3.thrift.apply.params.FindInterviewInfoParams getFindInterviewInfoParams() {
      return this.findInterviewInfoParams;
    }

    public findInterviewInfo_args setFindInterviewInfoParams(com.linyk3.thrift.apply.params.FindInterviewInfoParams findInterviewInfoParams) {
      this.findInterviewInfoParams = findInterviewInfoParams;
      return this;
    }

    public void unsetFindInterviewInfoParams() {
      this.findInterviewInfoParams = null;
    }

    /** Returns true if field findInterviewInfoParams is set (has been assigned a value) and false otherwise */
    public boolean isSetFindInterviewInfoParams() {
      return this.findInterviewInfoParams != null;
    }

    public void setFindInterviewInfoParamsIsSet(boolean value) {
      if (!value) {
        this.findInterviewInfoParams = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FIND_INTERVIEW_INFO_PARAMS:
        if (value == null) {
          unsetFindInterviewInfoParams();
        } else {
          setFindInterviewInfoParams((com.linyk3.thrift.apply.params.FindInterviewInfoParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FIND_INTERVIEW_INFO_PARAMS:
        return getFindInterviewInfoParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FIND_INTERVIEW_INFO_PARAMS:
        return isSetFindInterviewInfoParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findInterviewInfo_args)
        return this.equals((findInterviewInfo_args)that);
      return false;
    }

    public boolean equals(findInterviewInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_findInterviewInfoParams = true && this.isSetFindInterviewInfoParams();
      boolean that_present_findInterviewInfoParams = true && that.isSetFindInterviewInfoParams();
      if (this_present_findInterviewInfoParams || that_present_findInterviewInfoParams) {
        if (!(this_present_findInterviewInfoParams && that_present_findInterviewInfoParams))
          return false;
        if (!this.findInterviewInfoParams.equals(that.findInterviewInfoParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_findInterviewInfoParams = true && (isSetFindInterviewInfoParams());
      list.add(present_findInterviewInfoParams);
      if (present_findInterviewInfoParams)
        list.add(findInterviewInfoParams);

      return list.hashCode();
    }

    @Override
    public int compareTo(findInterviewInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFindInterviewInfoParams()).compareTo(other.isSetFindInterviewInfoParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFindInterviewInfoParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.findInterviewInfoParams, other.findInterviewInfoParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findInterviewInfo_args(");
      boolean first = true;

      sb.append("findInterviewInfoParams:");
      if (this.findInterviewInfoParams == null) {
        sb.append("null");
      } else {
        sb.append(this.findInterviewInfoParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (findInterviewInfoParams != null) {
        findInterviewInfoParams.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findInterviewInfo_argsStandardSchemeFactory implements SchemeFactory {
      public findInterviewInfo_argsStandardScheme getScheme() {
        return new findInterviewInfo_argsStandardScheme();
      }
    }

    private static class findInterviewInfo_argsStandardScheme extends StandardScheme<findInterviewInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findInterviewInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIND_INTERVIEW_INFO_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.findInterviewInfoParams = new com.linyk3.thrift.apply.params.FindInterviewInfoParams();
                struct.findInterviewInfoParams.read(iprot);
                struct.setFindInterviewInfoParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findInterviewInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.findInterviewInfoParams != null) {
          oprot.writeFieldBegin(FIND_INTERVIEW_INFO_PARAMS_FIELD_DESC);
          struct.findInterviewInfoParams.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findInterviewInfo_argsTupleSchemeFactory implements SchemeFactory {
      public findInterviewInfo_argsTupleScheme getScheme() {
        return new findInterviewInfo_argsTupleScheme();
      }
    }

    private static class findInterviewInfo_argsTupleScheme extends TupleScheme<findInterviewInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findInterviewInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFindInterviewInfoParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFindInterviewInfoParams()) {
          struct.findInterviewInfoParams.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findInterviewInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.findInterviewInfoParams = new com.linyk3.thrift.apply.params.FindInterviewInfoParams();
          struct.findInterviewInfoParams.read(iprot);
          struct.setFindInterviewInfoParamsIsSet(true);
        }
      }
    }

  }

  public static class findInterviewInfo_result implements org.apache.thrift.TBase<findInterviewInfo_result, findInterviewInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<findInterviewInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findInterviewInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField APPLY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findInterviewInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findInterviewInfo_resultTupleSchemeFactory());
    }

    public InterviewInfo success; // required
    public com.linyk3.thrift.apply.exception.ApplyException applyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLY_EXCEPTION((short)1, "applyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLY_EXCEPTION
            return APPLY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InterviewInfo.class)));
      tmpMap.put(_Fields.APPLY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findInterviewInfo_result.class, metaDataMap);
    }

    public findInterviewInfo_result() {
    }

    public findInterviewInfo_result(
      InterviewInfo success,
      com.linyk3.thrift.apply.exception.ApplyException applyException)
    {
      this();
      this.success = success;
      this.applyException = applyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findInterviewInfo_result(findInterviewInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new InterviewInfo(other.success);
      }
      if (other.isSetApplyException()) {
        this.applyException = new com.linyk3.thrift.apply.exception.ApplyException(other.applyException);
      }
    }

    public findInterviewInfo_result deepCopy() {
      return new findInterviewInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applyException = null;
    }

    public InterviewInfo getSuccess() {
      return this.success;
    }

    public findInterviewInfo_result setSuccess(InterviewInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.linyk3.thrift.apply.exception.ApplyException getApplyException() {
      return this.applyException;
    }

    public findInterviewInfo_result setApplyException(com.linyk3.thrift.apply.exception.ApplyException applyException) {
      this.applyException = applyException;
      return this;
    }

    public void unsetApplyException() {
      this.applyException = null;
    }

    /** Returns true if field applyException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyException() {
      return this.applyException != null;
    }

    public void setApplyExceptionIsSet(boolean value) {
      if (!value) {
        this.applyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((InterviewInfo)value);
        }
        break;

      case APPLY_EXCEPTION:
        if (value == null) {
          unsetApplyException();
        } else {
          setApplyException((com.linyk3.thrift.apply.exception.ApplyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLY_EXCEPTION:
        return getApplyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLY_EXCEPTION:
        return isSetApplyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findInterviewInfo_result)
        return this.equals((findInterviewInfo_result)that);
      return false;
    }

    public boolean equals(findInterviewInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applyException = true && this.isSetApplyException();
      boolean that_present_applyException = true && that.isSetApplyException();
      if (this_present_applyException || that_present_applyException) {
        if (!(this_present_applyException && that_present_applyException))
          return false;
        if (!this.applyException.equals(that.applyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_applyException = true && (isSetApplyException());
      list.add(present_applyException);
      if (present_applyException)
        list.add(applyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(findInterviewInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyException()).compareTo(other.isSetApplyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyException, other.applyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findInterviewInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyException:");
      if (this.applyException == null) {
        sb.append("null");
      } else {
        sb.append(this.applyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findInterviewInfo_resultStandardSchemeFactory implements SchemeFactory {
      public findInterviewInfo_resultStandardScheme getScheme() {
        return new findInterviewInfo_resultStandardScheme();
      }
    }

    private static class findInterviewInfo_resultStandardScheme extends StandardScheme<findInterviewInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findInterviewInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new InterviewInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
                struct.applyException.read(iprot);
                struct.setApplyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findInterviewInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.applyException != null) {
          oprot.writeFieldBegin(APPLY_EXCEPTION_FIELD_DESC);
          struct.applyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findInterviewInfo_resultTupleSchemeFactory implements SchemeFactory {
      public findInterviewInfo_resultTupleScheme getScheme() {
        return new findInterviewInfo_resultTupleScheme();
      }
    }

    private static class findInterviewInfo_resultTupleScheme extends TupleScheme<findInterviewInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findInterviewInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetApplyException()) {
          struct.applyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findInterviewInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new InterviewInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
          struct.applyException.read(iprot);
          struct.setApplyExceptionIsSet(true);
        }
      }
    }

  }

  public static class listInterviewInfo_args implements org.apache.thrift.TBase<listInterviewInfo_args, listInterviewInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<listInterviewInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listInterviewInfo_args");

    private static final org.apache.thrift.protocol.TField LIST_INTERVIEW_INFO_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("listInterviewInfoParams", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listInterviewInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listInterviewInfo_argsTupleSchemeFactory());
    }

    public com.linyk3.thrift.apply.params.ListInterviewInfoParams listInterviewInfoParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIST_INTERVIEW_INFO_PARAMS((short)1, "listInterviewInfoParams");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIST_INTERVIEW_INFO_PARAMS
            return LIST_INTERVIEW_INFO_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIST_INTERVIEW_INFO_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("listInterviewInfoParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.linyk3.thrift.apply.params.ListInterviewInfoParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listInterviewInfo_args.class, metaDataMap);
    }

    public listInterviewInfo_args() {
    }

    public listInterviewInfo_args(
      com.linyk3.thrift.apply.params.ListInterviewInfoParams listInterviewInfoParams)
    {
      this();
      this.listInterviewInfoParams = listInterviewInfoParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listInterviewInfo_args(listInterviewInfo_args other) {
      if (other.isSetListInterviewInfoParams()) {
        this.listInterviewInfoParams = new com.linyk3.thrift.apply.params.ListInterviewInfoParams(other.listInterviewInfoParams);
      }
    }

    public listInterviewInfo_args deepCopy() {
      return new listInterviewInfo_args(this);
    }

    @Override
    public void clear() {
      this.listInterviewInfoParams = null;
    }

    public com.linyk3.thrift.apply.params.ListInterviewInfoParams getListInterviewInfoParams() {
      return this.listInterviewInfoParams;
    }

    public listInterviewInfo_args setListInterviewInfoParams(com.linyk3.thrift.apply.params.ListInterviewInfoParams listInterviewInfoParams) {
      this.listInterviewInfoParams = listInterviewInfoParams;
      return this;
    }

    public void unsetListInterviewInfoParams() {
      this.listInterviewInfoParams = null;
    }

    /** Returns true if field listInterviewInfoParams is set (has been assigned a value) and false otherwise */
    public boolean isSetListInterviewInfoParams() {
      return this.listInterviewInfoParams != null;
    }

    public void setListInterviewInfoParamsIsSet(boolean value) {
      if (!value) {
        this.listInterviewInfoParams = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIST_INTERVIEW_INFO_PARAMS:
        if (value == null) {
          unsetListInterviewInfoParams();
        } else {
          setListInterviewInfoParams((com.linyk3.thrift.apply.params.ListInterviewInfoParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIST_INTERVIEW_INFO_PARAMS:
        return getListInterviewInfoParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIST_INTERVIEW_INFO_PARAMS:
        return isSetListInterviewInfoParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listInterviewInfo_args)
        return this.equals((listInterviewInfo_args)that);
      return false;
    }

    public boolean equals(listInterviewInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_listInterviewInfoParams = true && this.isSetListInterviewInfoParams();
      boolean that_present_listInterviewInfoParams = true && that.isSetListInterviewInfoParams();
      if (this_present_listInterviewInfoParams || that_present_listInterviewInfoParams) {
        if (!(this_present_listInterviewInfoParams && that_present_listInterviewInfoParams))
          return false;
        if (!this.listInterviewInfoParams.equals(that.listInterviewInfoParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_listInterviewInfoParams = true && (isSetListInterviewInfoParams());
      list.add(present_listInterviewInfoParams);
      if (present_listInterviewInfoParams)
        list.add(listInterviewInfoParams);

      return list.hashCode();
    }

    @Override
    public int compareTo(listInterviewInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetListInterviewInfoParams()).compareTo(other.isSetListInterviewInfoParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListInterviewInfoParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listInterviewInfoParams, other.listInterviewInfoParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listInterviewInfo_args(");
      boolean first = true;

      sb.append("listInterviewInfoParams:");
      if (this.listInterviewInfoParams == null) {
        sb.append("null");
      } else {
        sb.append(this.listInterviewInfoParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (listInterviewInfoParams != null) {
        listInterviewInfoParams.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listInterviewInfo_argsStandardSchemeFactory implements SchemeFactory {
      public listInterviewInfo_argsStandardScheme getScheme() {
        return new listInterviewInfo_argsStandardScheme();
      }
    }

    private static class listInterviewInfo_argsStandardScheme extends StandardScheme<listInterviewInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listInterviewInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIST_INTERVIEW_INFO_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.listInterviewInfoParams = new com.linyk3.thrift.apply.params.ListInterviewInfoParams();
                struct.listInterviewInfoParams.read(iprot);
                struct.setListInterviewInfoParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listInterviewInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.listInterviewInfoParams != null) {
          oprot.writeFieldBegin(LIST_INTERVIEW_INFO_PARAMS_FIELD_DESC);
          struct.listInterviewInfoParams.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listInterviewInfo_argsTupleSchemeFactory implements SchemeFactory {
      public listInterviewInfo_argsTupleScheme getScheme() {
        return new listInterviewInfo_argsTupleScheme();
      }
    }

    private static class listInterviewInfo_argsTupleScheme extends TupleScheme<listInterviewInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listInterviewInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetListInterviewInfoParams()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetListInterviewInfoParams()) {
          struct.listInterviewInfoParams.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listInterviewInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.listInterviewInfoParams = new com.linyk3.thrift.apply.params.ListInterviewInfoParams();
          struct.listInterviewInfoParams.read(iprot);
          struct.setListInterviewInfoParamsIsSet(true);
        }
      }
    }

  }

  public static class listInterviewInfo_result implements org.apache.thrift.TBase<listInterviewInfo_result, listInterviewInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<listInterviewInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listInterviewInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField APPLY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listInterviewInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listInterviewInfo_resultTupleSchemeFactory());
    }

    public List<InterviewInfo> success; // required
    public com.linyk3.thrift.apply.exception.ApplyException applyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLY_EXCEPTION((short)1, "applyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLY_EXCEPTION
            return APPLY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InterviewInfo.class))));
      tmpMap.put(_Fields.APPLY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listInterviewInfo_result.class, metaDataMap);
    }

    public listInterviewInfo_result() {
    }

    public listInterviewInfo_result(
      List<InterviewInfo> success,
      com.linyk3.thrift.apply.exception.ApplyException applyException)
    {
      this();
      this.success = success;
      this.applyException = applyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listInterviewInfo_result(listInterviewInfo_result other) {
      if (other.isSetSuccess()) {
        List<InterviewInfo> __this__success = new ArrayList<InterviewInfo>(other.success.size());
        for (InterviewInfo other_element : other.success) {
          __this__success.add(new InterviewInfo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetApplyException()) {
        this.applyException = new com.linyk3.thrift.apply.exception.ApplyException(other.applyException);
      }
    }

    public listInterviewInfo_result deepCopy() {
      return new listInterviewInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applyException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<InterviewInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(InterviewInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<InterviewInfo>();
      }
      this.success.add(elem);
    }

    public List<InterviewInfo> getSuccess() {
      return this.success;
    }

    public listInterviewInfo_result setSuccess(List<InterviewInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.linyk3.thrift.apply.exception.ApplyException getApplyException() {
      return this.applyException;
    }

    public listInterviewInfo_result setApplyException(com.linyk3.thrift.apply.exception.ApplyException applyException) {
      this.applyException = applyException;
      return this;
    }

    public void unsetApplyException() {
      this.applyException = null;
    }

    /** Returns true if field applyException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyException() {
      return this.applyException != null;
    }

    public void setApplyExceptionIsSet(boolean value) {
      if (!value) {
        this.applyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<InterviewInfo>)value);
        }
        break;

      case APPLY_EXCEPTION:
        if (value == null) {
          unsetApplyException();
        } else {
          setApplyException((com.linyk3.thrift.apply.exception.ApplyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLY_EXCEPTION:
        return getApplyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLY_EXCEPTION:
        return isSetApplyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listInterviewInfo_result)
        return this.equals((listInterviewInfo_result)that);
      return false;
    }

    public boolean equals(listInterviewInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applyException = true && this.isSetApplyException();
      boolean that_present_applyException = true && that.isSetApplyException();
      if (this_present_applyException || that_present_applyException) {
        if (!(this_present_applyException && that_present_applyException))
          return false;
        if (!this.applyException.equals(that.applyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_applyException = true && (isSetApplyException());
      list.add(present_applyException);
      if (present_applyException)
        list.add(applyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(listInterviewInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyException()).compareTo(other.isSetApplyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyException, other.applyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listInterviewInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyException:");
      if (this.applyException == null) {
        sb.append("null");
      } else {
        sb.append(this.applyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listInterviewInfo_resultStandardSchemeFactory implements SchemeFactory {
      public listInterviewInfo_resultStandardScheme getScheme() {
        return new listInterviewInfo_resultStandardScheme();
      }
    }

    private static class listInterviewInfo_resultStandardScheme extends StandardScheme<listInterviewInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listInterviewInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list168 = iprot.readListBegin();
                  struct.success = new ArrayList<InterviewInfo>(_list168.size);
                  InterviewInfo _elem169;
                  for (int _i170 = 0; _i170 < _list168.size; ++_i170)
                  {
                    _elem169 = new InterviewInfo();
                    _elem169.read(iprot);
                    struct.success.add(_elem169);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
                struct.applyException.read(iprot);
                struct.setApplyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listInterviewInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (InterviewInfo _iter171 : struct.success)
            {
              _iter171.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.applyException != null) {
          oprot.writeFieldBegin(APPLY_EXCEPTION_FIELD_DESC);
          struct.applyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listInterviewInfo_resultTupleSchemeFactory implements SchemeFactory {
      public listInterviewInfo_resultTupleScheme getScheme() {
        return new listInterviewInfo_resultTupleScheme();
      }
    }

    private static class listInterviewInfo_resultTupleScheme extends TupleScheme<listInterviewInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listInterviewInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (InterviewInfo _iter172 : struct.success)
            {
              _iter172.write(oprot);
            }
          }
        }
        if (struct.isSetApplyException()) {
          struct.applyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listInterviewInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list173 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<InterviewInfo>(_list173.size);
            InterviewInfo _elem174;
            for (int _i175 = 0; _i175 < _list173.size; ++_i175)
            {
              _elem174 = new InterviewInfo();
              _elem174.read(iprot);
              struct.success.add(_elem174);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
          struct.applyException.read(iprot);
          struct.setApplyExceptionIsSet(true);
        }
      }
    }

  }

  public static class updateInterviewInfo_args implements org.apache.thrift.TBase<updateInterviewInfo_args, updateInterviewInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateInterviewInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateInterviewInfo_args");

    private static final org.apache.thrift.protocol.TField INTERVIEW_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("interviewInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateInterviewInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateInterviewInfo_argsTupleSchemeFactory());
    }

    public InterviewInfo interviewInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INTERVIEW_INFO((short)1, "interviewInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INTERVIEW_INFO
            return INTERVIEW_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INTERVIEW_INFO, new org.apache.thrift.meta_data.FieldMetaData("interviewInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InterviewInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateInterviewInfo_args.class, metaDataMap);
    }

    public updateInterviewInfo_args() {
    }

    public updateInterviewInfo_args(
      InterviewInfo interviewInfo)
    {
      this();
      this.interviewInfo = interviewInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateInterviewInfo_args(updateInterviewInfo_args other) {
      if (other.isSetInterviewInfo()) {
        this.interviewInfo = new InterviewInfo(other.interviewInfo);
      }
    }

    public updateInterviewInfo_args deepCopy() {
      return new updateInterviewInfo_args(this);
    }

    @Override
    public void clear() {
      this.interviewInfo = null;
    }

    public InterviewInfo getInterviewInfo() {
      return this.interviewInfo;
    }

    public updateInterviewInfo_args setInterviewInfo(InterviewInfo interviewInfo) {
      this.interviewInfo = interviewInfo;
      return this;
    }

    public void unsetInterviewInfo() {
      this.interviewInfo = null;
    }

    /** Returns true if field interviewInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetInterviewInfo() {
      return this.interviewInfo != null;
    }

    public void setInterviewInfoIsSet(boolean value) {
      if (!value) {
        this.interviewInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INTERVIEW_INFO:
        if (value == null) {
          unsetInterviewInfo();
        } else {
          setInterviewInfo((InterviewInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INTERVIEW_INFO:
        return getInterviewInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INTERVIEW_INFO:
        return isSetInterviewInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateInterviewInfo_args)
        return this.equals((updateInterviewInfo_args)that);
      return false;
    }

    public boolean equals(updateInterviewInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_interviewInfo = true && this.isSetInterviewInfo();
      boolean that_present_interviewInfo = true && that.isSetInterviewInfo();
      if (this_present_interviewInfo || that_present_interviewInfo) {
        if (!(this_present_interviewInfo && that_present_interviewInfo))
          return false;
        if (!this.interviewInfo.equals(that.interviewInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_interviewInfo = true && (isSetInterviewInfo());
      list.add(present_interviewInfo);
      if (present_interviewInfo)
        list.add(interviewInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateInterviewInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInterviewInfo()).compareTo(other.isSetInterviewInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInterviewInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interviewInfo, other.interviewInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateInterviewInfo_args(");
      boolean first = true;

      sb.append("interviewInfo:");
      if (this.interviewInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.interviewInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (interviewInfo != null) {
        interviewInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateInterviewInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateInterviewInfo_argsStandardScheme getScheme() {
        return new updateInterviewInfo_argsStandardScheme();
      }
    }

    private static class updateInterviewInfo_argsStandardScheme extends StandardScheme<updateInterviewInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateInterviewInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INTERVIEW_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.interviewInfo = new InterviewInfo();
                struct.interviewInfo.read(iprot);
                struct.setInterviewInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateInterviewInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.interviewInfo != null) {
          oprot.writeFieldBegin(INTERVIEW_INFO_FIELD_DESC);
          struct.interviewInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateInterviewInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateInterviewInfo_argsTupleScheme getScheme() {
        return new updateInterviewInfo_argsTupleScheme();
      }
    }

    private static class updateInterviewInfo_argsTupleScheme extends TupleScheme<updateInterviewInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateInterviewInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInterviewInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInterviewInfo()) {
          struct.interviewInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateInterviewInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.interviewInfo = new InterviewInfo();
          struct.interviewInfo.read(iprot);
          struct.setInterviewInfoIsSet(true);
        }
      }
    }

  }

  public static class updateInterviewInfo_result implements org.apache.thrift.TBase<updateInterviewInfo_result, updateInterviewInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateInterviewInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateInterviewInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField APPLY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateInterviewInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateInterviewInfo_resultTupleSchemeFactory());
    }

    public InterviewInfo success; // required
    public com.linyk3.thrift.apply.exception.ApplyException applyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLY_EXCEPTION((short)1, "applyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLY_EXCEPTION
            return APPLY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InterviewInfo.class)));
      tmpMap.put(_Fields.APPLY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateInterviewInfo_result.class, metaDataMap);
    }

    public updateInterviewInfo_result() {
    }

    public updateInterviewInfo_result(
      InterviewInfo success,
      com.linyk3.thrift.apply.exception.ApplyException applyException)
    {
      this();
      this.success = success;
      this.applyException = applyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateInterviewInfo_result(updateInterviewInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new InterviewInfo(other.success);
      }
      if (other.isSetApplyException()) {
        this.applyException = new com.linyk3.thrift.apply.exception.ApplyException(other.applyException);
      }
    }

    public updateInterviewInfo_result deepCopy() {
      return new updateInterviewInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applyException = null;
    }

    public InterviewInfo getSuccess() {
      return this.success;
    }

    public updateInterviewInfo_result setSuccess(InterviewInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.linyk3.thrift.apply.exception.ApplyException getApplyException() {
      return this.applyException;
    }

    public updateInterviewInfo_result setApplyException(com.linyk3.thrift.apply.exception.ApplyException applyException) {
      this.applyException = applyException;
      return this;
    }

    public void unsetApplyException() {
      this.applyException = null;
    }

    /** Returns true if field applyException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyException() {
      return this.applyException != null;
    }

    public void setApplyExceptionIsSet(boolean value) {
      if (!value) {
        this.applyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((InterviewInfo)value);
        }
        break;

      case APPLY_EXCEPTION:
        if (value == null) {
          unsetApplyException();
        } else {
          setApplyException((com.linyk3.thrift.apply.exception.ApplyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLY_EXCEPTION:
        return getApplyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLY_EXCEPTION:
        return isSetApplyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateInterviewInfo_result)
        return this.equals((updateInterviewInfo_result)that);
      return false;
    }

    public boolean equals(updateInterviewInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applyException = true && this.isSetApplyException();
      boolean that_present_applyException = true && that.isSetApplyException();
      if (this_present_applyException || that_present_applyException) {
        if (!(this_present_applyException && that_present_applyException))
          return false;
        if (!this.applyException.equals(that.applyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_applyException = true && (isSetApplyException());
      list.add(present_applyException);
      if (present_applyException)
        list.add(applyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateInterviewInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyException()).compareTo(other.isSetApplyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyException, other.applyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateInterviewInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyException:");
      if (this.applyException == null) {
        sb.append("null");
      } else {
        sb.append(this.applyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateInterviewInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateInterviewInfo_resultStandardScheme getScheme() {
        return new updateInterviewInfo_resultStandardScheme();
      }
    }

    private static class updateInterviewInfo_resultStandardScheme extends StandardScheme<updateInterviewInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateInterviewInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new InterviewInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
                struct.applyException.read(iprot);
                struct.setApplyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateInterviewInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.applyException != null) {
          oprot.writeFieldBegin(APPLY_EXCEPTION_FIELD_DESC);
          struct.applyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateInterviewInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateInterviewInfo_resultTupleScheme getScheme() {
        return new updateInterviewInfo_resultTupleScheme();
      }
    }

    private static class updateInterviewInfo_resultTupleScheme extends TupleScheme<updateInterviewInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateInterviewInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetApplyException()) {
          struct.applyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateInterviewInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new InterviewInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
          struct.applyException.read(iprot);
          struct.setApplyExceptionIsSet(true);
        }
      }
    }

  }

  public static class deleteInterviewInfo_args implements org.apache.thrift.TBase<deleteInterviewInfo_args, deleteInterviewInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteInterviewInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteInterviewInfo_args");

    private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteInterviewInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteInterviewInfo_argsTupleSchemeFactory());
    }

    public String _id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      _ID((short)1, "_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // _ID
            return _ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteInterviewInfo_args.class, metaDataMap);
    }

    public deleteInterviewInfo_args() {
    }

    public deleteInterviewInfo_args(
      String _id)
    {
      this();
      this._id = _id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteInterviewInfo_args(deleteInterviewInfo_args other) {
      if (other.isSet_id()) {
        this._id = other._id;
      }
    }

    public deleteInterviewInfo_args deepCopy() {
      return new deleteInterviewInfo_args(this);
    }

    @Override
    public void clear() {
      this._id = null;
    }

    public String get_id() {
      return this._id;
    }

    public deleteInterviewInfo_args set_id(String _id) {
      this._id = _id;
      return this;
    }

    public void unset_id() {
      this._id = null;
    }

    /** Returns true if field _id is set (has been assigned a value) and false otherwise */
    public boolean isSet_id() {
      return this._id != null;
    }

    public void set_idIsSet(boolean value) {
      if (!value) {
        this._id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case _ID:
        if (value == null) {
          unset_id();
        } else {
          set_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case _ID:
        return get_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case _ID:
        return isSet_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteInterviewInfo_args)
        return this.equals((deleteInterviewInfo_args)that);
      return false;
    }

    public boolean equals(deleteInterviewInfo_args that) {
      if (that == null)
        return false;

      boolean this_present__id = true && this.isSet_id();
      boolean that_present__id = true && that.isSet_id();
      if (this_present__id || that_present__id) {
        if (!(this_present__id && that_present__id))
          return false;
        if (!this._id.equals(that._id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present__id = true && (isSet_id());
      list.add(present__id);
      if (present__id)
        list.add(_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteInterviewInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSet_id()).compareTo(other.isSet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, other._id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteInterviewInfo_args(");
      boolean first = true;

      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteInterviewInfo_argsStandardSchemeFactory implements SchemeFactory {
      public deleteInterviewInfo_argsStandardScheme getScheme() {
        return new deleteInterviewInfo_argsStandardScheme();
      }
    }

    private static class deleteInterviewInfo_argsStandardScheme extends StandardScheme<deleteInterviewInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteInterviewInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // _ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct._id = iprot.readString();
                struct.set_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteInterviewInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct._id != null) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          oprot.writeString(struct._id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteInterviewInfo_argsTupleSchemeFactory implements SchemeFactory {
      public deleteInterviewInfo_argsTupleScheme getScheme() {
        return new deleteInterviewInfo_argsTupleScheme();
      }
    }

    private static class deleteInterviewInfo_argsTupleScheme extends TupleScheme<deleteInterviewInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteInterviewInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSet_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSet_id()) {
          oprot.writeString(struct._id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteInterviewInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct._id = iprot.readString();
          struct.set_idIsSet(true);
        }
      }
    }

  }

  public static class deleteInterviewInfo_result implements org.apache.thrift.TBase<deleteInterviewInfo_result, deleteInterviewInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteInterviewInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteInterviewInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField APPLY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("applyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteInterviewInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteInterviewInfo_resultTupleSchemeFactory());
    }

    public InterviewInfo success; // required
    public com.linyk3.thrift.apply.exception.ApplyException applyException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APPLY_EXCEPTION((short)1, "applyException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APPLY_EXCEPTION
            return APPLY_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InterviewInfo.class)));
      tmpMap.put(_Fields.APPLY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("applyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteInterviewInfo_result.class, metaDataMap);
    }

    public deleteInterviewInfo_result() {
    }

    public deleteInterviewInfo_result(
      InterviewInfo success,
      com.linyk3.thrift.apply.exception.ApplyException applyException)
    {
      this();
      this.success = success;
      this.applyException = applyException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteInterviewInfo_result(deleteInterviewInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new InterviewInfo(other.success);
      }
      if (other.isSetApplyException()) {
        this.applyException = new com.linyk3.thrift.apply.exception.ApplyException(other.applyException);
      }
    }

    public deleteInterviewInfo_result deepCopy() {
      return new deleteInterviewInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.applyException = null;
    }

    public InterviewInfo getSuccess() {
      return this.success;
    }

    public deleteInterviewInfo_result setSuccess(InterviewInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.linyk3.thrift.apply.exception.ApplyException getApplyException() {
      return this.applyException;
    }

    public deleteInterviewInfo_result setApplyException(com.linyk3.thrift.apply.exception.ApplyException applyException) {
      this.applyException = applyException;
      return this;
    }

    public void unsetApplyException() {
      this.applyException = null;
    }

    /** Returns true if field applyException is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyException() {
      return this.applyException != null;
    }

    public void setApplyExceptionIsSet(boolean value) {
      if (!value) {
        this.applyException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((InterviewInfo)value);
        }
        break;

      case APPLY_EXCEPTION:
        if (value == null) {
          unsetApplyException();
        } else {
          setApplyException((com.linyk3.thrift.apply.exception.ApplyException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APPLY_EXCEPTION:
        return getApplyException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APPLY_EXCEPTION:
        return isSetApplyException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteInterviewInfo_result)
        return this.equals((deleteInterviewInfo_result)that);
      return false;
    }

    public boolean equals(deleteInterviewInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_applyException = true && this.isSetApplyException();
      boolean that_present_applyException = true && that.isSetApplyException();
      if (this_present_applyException || that_present_applyException) {
        if (!(this_present_applyException && that_present_applyException))
          return false;
        if (!this.applyException.equals(that.applyException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_applyException = true && (isSetApplyException());
      list.add(present_applyException);
      if (present_applyException)
        list.add(applyException);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteInterviewInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplyException()).compareTo(other.isSetApplyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyException, other.applyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteInterviewInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyException:");
      if (this.applyException == null) {
        sb.append("null");
      } else {
        sb.append(this.applyException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteInterviewInfo_resultStandardSchemeFactory implements SchemeFactory {
      public deleteInterviewInfo_resultStandardScheme getScheme() {
        return new deleteInterviewInfo_resultStandardScheme();
      }
    }

    private static class deleteInterviewInfo_resultStandardScheme extends StandardScheme<deleteInterviewInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteInterviewInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new InterviewInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APPLY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
                struct.applyException.read(iprot);
                struct.setApplyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteInterviewInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.applyException != null) {
          oprot.writeFieldBegin(APPLY_EXCEPTION_FIELD_DESC);
          struct.applyException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteInterviewInfo_resultTupleSchemeFactory implements SchemeFactory {
      public deleteInterviewInfo_resultTupleScheme getScheme() {
        return new deleteInterviewInfo_resultTupleScheme();
      }
    }

    private static class deleteInterviewInfo_resultTupleScheme extends TupleScheme<deleteInterviewInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteInterviewInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetApplyException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetApplyException()) {
          struct.applyException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteInterviewInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new InterviewInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyException = new com.linyk3.thrift.apply.exception.ApplyException();
          struct.applyException.read(iprot);
          struct.setApplyExceptionIsSet(true);
        }
      }
    }

  }

}
