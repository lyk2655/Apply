/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.linyk3.thrift.apply;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-4-12")
public class CollectionInfo implements org.apache.thrift.TBase<CollectionInfo, CollectionInfo._Fields>, java.io.Serializable, Cloneable, Comparable<CollectionInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CollectionInfo");

  private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("companyIdList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField EMPLOY_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("employIdList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField APPLICATION_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationIdList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField TEACHIN_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("teachinIdList", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField EXAMINATION_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("examinationIdList", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField INTERVIEW_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("interviewIdList", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CollectionInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CollectionInfoTupleSchemeFactory());
  }

  public String _id; // required
  public List<String> companyIdList; // required
  public List<String> employIdList; // required
  public List<String> applicationIdList; // required
  public List<String> teachinIdList; // required
  public List<String> examinationIdList; // required
  public List<String> interviewIdList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _ID((short)1, "_id"),
    COMPANY_ID_LIST((short)2, "companyIdList"),
    EMPLOY_ID_LIST((short)3, "employIdList"),
    APPLICATION_ID_LIST((short)4, "applicationIdList"),
    TEACHIN_ID_LIST((short)5, "teachinIdList"),
    EXAMINATION_ID_LIST((short)6, "examinationIdList"),
    INTERVIEW_ID_LIST((short)7, "interviewIdList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _ID
          return _ID;
        case 2: // COMPANY_ID_LIST
          return COMPANY_ID_LIST;
        case 3: // EMPLOY_ID_LIST
          return EMPLOY_ID_LIST;
        case 4: // APPLICATION_ID_LIST
          return APPLICATION_ID_LIST;
        case 5: // TEACHIN_ID_LIST
          return TEACHIN_ID_LIST;
        case 6: // EXAMINATION_ID_LIST
          return EXAMINATION_ID_LIST;
        case 7: // INTERVIEW_ID_LIST
          return INTERVIEW_ID_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("companyIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.EMPLOY_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("employIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.APPLICATION_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("applicationIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TEACHIN_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("teachinIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.EXAMINATION_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("examinationIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.INTERVIEW_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("interviewIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CollectionInfo.class, metaDataMap);
  }

  public CollectionInfo() {
  }

  public CollectionInfo(
    String _id,
    List<String> companyIdList,
    List<String> employIdList,
    List<String> applicationIdList,
    List<String> teachinIdList,
    List<String> examinationIdList,
    List<String> interviewIdList)
  {
    this();
    this._id = _id;
    this.companyIdList = companyIdList;
    this.employIdList = employIdList;
    this.applicationIdList = applicationIdList;
    this.teachinIdList = teachinIdList;
    this.examinationIdList = examinationIdList;
    this.interviewIdList = interviewIdList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CollectionInfo(CollectionInfo other) {
    if (other.isSet_id()) {
      this._id = other._id;
    }
    if (other.isSetCompanyIdList()) {
      List<String> __this__companyIdList = new ArrayList<String>(other.companyIdList);
      this.companyIdList = __this__companyIdList;
    }
    if (other.isSetEmployIdList()) {
      List<String> __this__employIdList = new ArrayList<String>(other.employIdList);
      this.employIdList = __this__employIdList;
    }
    if (other.isSetApplicationIdList()) {
      List<String> __this__applicationIdList = new ArrayList<String>(other.applicationIdList);
      this.applicationIdList = __this__applicationIdList;
    }
    if (other.isSetTeachinIdList()) {
      List<String> __this__teachinIdList = new ArrayList<String>(other.teachinIdList);
      this.teachinIdList = __this__teachinIdList;
    }
    if (other.isSetExaminationIdList()) {
      List<String> __this__examinationIdList = new ArrayList<String>(other.examinationIdList);
      this.examinationIdList = __this__examinationIdList;
    }
    if (other.isSetInterviewIdList()) {
      List<String> __this__interviewIdList = new ArrayList<String>(other.interviewIdList);
      this.interviewIdList = __this__interviewIdList;
    }
  }

  public CollectionInfo deepCopy() {
    return new CollectionInfo(this);
  }

  @Override
  public void clear() {
    this._id = null;
    this.companyIdList = null;
    this.employIdList = null;
    this.applicationIdList = null;
    this.teachinIdList = null;
    this.examinationIdList = null;
    this.interviewIdList = null;
  }

  public String get_id() {
    return this._id;
  }

  public CollectionInfo set_id(String _id) {
    this._id = _id;
    return this;
  }

  public void unset_id() {
    this._id = null;
  }

  /** Returns true if field _id is set (has been assigned a value) and false otherwise */
  public boolean isSet_id() {
    return this._id != null;
  }

  public void set_idIsSet(boolean value) {
    if (!value) {
      this._id = null;
    }
  }

  public int getCompanyIdListSize() {
    return (this.companyIdList == null) ? 0 : this.companyIdList.size();
  }

  public java.util.Iterator<String> getCompanyIdListIterator() {
    return (this.companyIdList == null) ? null : this.companyIdList.iterator();
  }

  public void addToCompanyIdList(String elem) {
    if (this.companyIdList == null) {
      this.companyIdList = new ArrayList<String>();
    }
    this.companyIdList.add(elem);
  }

  public List<String> getCompanyIdList() {
    return this.companyIdList;
  }

  public CollectionInfo setCompanyIdList(List<String> companyIdList) {
    this.companyIdList = companyIdList;
    return this;
  }

  public void unsetCompanyIdList() {
    this.companyIdList = null;
  }

  /** Returns true if field companyIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyIdList() {
    return this.companyIdList != null;
  }

  public void setCompanyIdListIsSet(boolean value) {
    if (!value) {
      this.companyIdList = null;
    }
  }

  public int getEmployIdListSize() {
    return (this.employIdList == null) ? 0 : this.employIdList.size();
  }

  public java.util.Iterator<String> getEmployIdListIterator() {
    return (this.employIdList == null) ? null : this.employIdList.iterator();
  }

  public void addToEmployIdList(String elem) {
    if (this.employIdList == null) {
      this.employIdList = new ArrayList<String>();
    }
    this.employIdList.add(elem);
  }

  public List<String> getEmployIdList() {
    return this.employIdList;
  }

  public CollectionInfo setEmployIdList(List<String> employIdList) {
    this.employIdList = employIdList;
    return this;
  }

  public void unsetEmployIdList() {
    this.employIdList = null;
  }

  /** Returns true if field employIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetEmployIdList() {
    return this.employIdList != null;
  }

  public void setEmployIdListIsSet(boolean value) {
    if (!value) {
      this.employIdList = null;
    }
  }

  public int getApplicationIdListSize() {
    return (this.applicationIdList == null) ? 0 : this.applicationIdList.size();
  }

  public java.util.Iterator<String> getApplicationIdListIterator() {
    return (this.applicationIdList == null) ? null : this.applicationIdList.iterator();
  }

  public void addToApplicationIdList(String elem) {
    if (this.applicationIdList == null) {
      this.applicationIdList = new ArrayList<String>();
    }
    this.applicationIdList.add(elem);
  }

  public List<String> getApplicationIdList() {
    return this.applicationIdList;
  }

  public CollectionInfo setApplicationIdList(List<String> applicationIdList) {
    this.applicationIdList = applicationIdList;
    return this;
  }

  public void unsetApplicationIdList() {
    this.applicationIdList = null;
  }

  /** Returns true if field applicationIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationIdList() {
    return this.applicationIdList != null;
  }

  public void setApplicationIdListIsSet(boolean value) {
    if (!value) {
      this.applicationIdList = null;
    }
  }

  public int getTeachinIdListSize() {
    return (this.teachinIdList == null) ? 0 : this.teachinIdList.size();
  }

  public java.util.Iterator<String> getTeachinIdListIterator() {
    return (this.teachinIdList == null) ? null : this.teachinIdList.iterator();
  }

  public void addToTeachinIdList(String elem) {
    if (this.teachinIdList == null) {
      this.teachinIdList = new ArrayList<String>();
    }
    this.teachinIdList.add(elem);
  }

  public List<String> getTeachinIdList() {
    return this.teachinIdList;
  }

  public CollectionInfo setTeachinIdList(List<String> teachinIdList) {
    this.teachinIdList = teachinIdList;
    return this;
  }

  public void unsetTeachinIdList() {
    this.teachinIdList = null;
  }

  /** Returns true if field teachinIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetTeachinIdList() {
    return this.teachinIdList != null;
  }

  public void setTeachinIdListIsSet(boolean value) {
    if (!value) {
      this.teachinIdList = null;
    }
  }

  public int getExaminationIdListSize() {
    return (this.examinationIdList == null) ? 0 : this.examinationIdList.size();
  }

  public java.util.Iterator<String> getExaminationIdListIterator() {
    return (this.examinationIdList == null) ? null : this.examinationIdList.iterator();
  }

  public void addToExaminationIdList(String elem) {
    if (this.examinationIdList == null) {
      this.examinationIdList = new ArrayList<String>();
    }
    this.examinationIdList.add(elem);
  }

  public List<String> getExaminationIdList() {
    return this.examinationIdList;
  }

  public CollectionInfo setExaminationIdList(List<String> examinationIdList) {
    this.examinationIdList = examinationIdList;
    return this;
  }

  public void unsetExaminationIdList() {
    this.examinationIdList = null;
  }

  /** Returns true if field examinationIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetExaminationIdList() {
    return this.examinationIdList != null;
  }

  public void setExaminationIdListIsSet(boolean value) {
    if (!value) {
      this.examinationIdList = null;
    }
  }

  public int getInterviewIdListSize() {
    return (this.interviewIdList == null) ? 0 : this.interviewIdList.size();
  }

  public java.util.Iterator<String> getInterviewIdListIterator() {
    return (this.interviewIdList == null) ? null : this.interviewIdList.iterator();
  }

  public void addToInterviewIdList(String elem) {
    if (this.interviewIdList == null) {
      this.interviewIdList = new ArrayList<String>();
    }
    this.interviewIdList.add(elem);
  }

  public List<String> getInterviewIdList() {
    return this.interviewIdList;
  }

  public CollectionInfo setInterviewIdList(List<String> interviewIdList) {
    this.interviewIdList = interviewIdList;
    return this;
  }

  public void unsetInterviewIdList() {
    this.interviewIdList = null;
  }

  /** Returns true if field interviewIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetInterviewIdList() {
    return this.interviewIdList != null;
  }

  public void setInterviewIdListIsSet(boolean value) {
    if (!value) {
      this.interviewIdList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case _ID:
      if (value == null) {
        unset_id();
      } else {
        set_id((String)value);
      }
      break;

    case COMPANY_ID_LIST:
      if (value == null) {
        unsetCompanyIdList();
      } else {
        setCompanyIdList((List<String>)value);
      }
      break;

    case EMPLOY_ID_LIST:
      if (value == null) {
        unsetEmployIdList();
      } else {
        setEmployIdList((List<String>)value);
      }
      break;

    case APPLICATION_ID_LIST:
      if (value == null) {
        unsetApplicationIdList();
      } else {
        setApplicationIdList((List<String>)value);
      }
      break;

    case TEACHIN_ID_LIST:
      if (value == null) {
        unsetTeachinIdList();
      } else {
        setTeachinIdList((List<String>)value);
      }
      break;

    case EXAMINATION_ID_LIST:
      if (value == null) {
        unsetExaminationIdList();
      } else {
        setExaminationIdList((List<String>)value);
      }
      break;

    case INTERVIEW_ID_LIST:
      if (value == null) {
        unsetInterviewIdList();
      } else {
        setInterviewIdList((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case _ID:
      return get_id();

    case COMPANY_ID_LIST:
      return getCompanyIdList();

    case EMPLOY_ID_LIST:
      return getEmployIdList();

    case APPLICATION_ID_LIST:
      return getApplicationIdList();

    case TEACHIN_ID_LIST:
      return getTeachinIdList();

    case EXAMINATION_ID_LIST:
      return getExaminationIdList();

    case INTERVIEW_ID_LIST:
      return getInterviewIdList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case _ID:
      return isSet_id();
    case COMPANY_ID_LIST:
      return isSetCompanyIdList();
    case EMPLOY_ID_LIST:
      return isSetEmployIdList();
    case APPLICATION_ID_LIST:
      return isSetApplicationIdList();
    case TEACHIN_ID_LIST:
      return isSetTeachinIdList();
    case EXAMINATION_ID_LIST:
      return isSetExaminationIdList();
    case INTERVIEW_ID_LIST:
      return isSetInterviewIdList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CollectionInfo)
      return this.equals((CollectionInfo)that);
    return false;
  }

  public boolean equals(CollectionInfo that) {
    if (that == null)
      return false;

    boolean this_present__id = true && this.isSet_id();
    boolean that_present__id = true && that.isSet_id();
    if (this_present__id || that_present__id) {
      if (!(this_present__id && that_present__id))
        return false;
      if (!this._id.equals(that._id))
        return false;
    }

    boolean this_present_companyIdList = true && this.isSetCompanyIdList();
    boolean that_present_companyIdList = true && that.isSetCompanyIdList();
    if (this_present_companyIdList || that_present_companyIdList) {
      if (!(this_present_companyIdList && that_present_companyIdList))
        return false;
      if (!this.companyIdList.equals(that.companyIdList))
        return false;
    }

    boolean this_present_employIdList = true && this.isSetEmployIdList();
    boolean that_present_employIdList = true && that.isSetEmployIdList();
    if (this_present_employIdList || that_present_employIdList) {
      if (!(this_present_employIdList && that_present_employIdList))
        return false;
      if (!this.employIdList.equals(that.employIdList))
        return false;
    }

    boolean this_present_applicationIdList = true && this.isSetApplicationIdList();
    boolean that_present_applicationIdList = true && that.isSetApplicationIdList();
    if (this_present_applicationIdList || that_present_applicationIdList) {
      if (!(this_present_applicationIdList && that_present_applicationIdList))
        return false;
      if (!this.applicationIdList.equals(that.applicationIdList))
        return false;
    }

    boolean this_present_teachinIdList = true && this.isSetTeachinIdList();
    boolean that_present_teachinIdList = true && that.isSetTeachinIdList();
    if (this_present_teachinIdList || that_present_teachinIdList) {
      if (!(this_present_teachinIdList && that_present_teachinIdList))
        return false;
      if (!this.teachinIdList.equals(that.teachinIdList))
        return false;
    }

    boolean this_present_examinationIdList = true && this.isSetExaminationIdList();
    boolean that_present_examinationIdList = true && that.isSetExaminationIdList();
    if (this_present_examinationIdList || that_present_examinationIdList) {
      if (!(this_present_examinationIdList && that_present_examinationIdList))
        return false;
      if (!this.examinationIdList.equals(that.examinationIdList))
        return false;
    }

    boolean this_present_interviewIdList = true && this.isSetInterviewIdList();
    boolean that_present_interviewIdList = true && that.isSetInterviewIdList();
    if (this_present_interviewIdList || that_present_interviewIdList) {
      if (!(this_present_interviewIdList && that_present_interviewIdList))
        return false;
      if (!this.interviewIdList.equals(that.interviewIdList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present__id = true && (isSet_id());
    list.add(present__id);
    if (present__id)
      list.add(_id);

    boolean present_companyIdList = true && (isSetCompanyIdList());
    list.add(present_companyIdList);
    if (present_companyIdList)
      list.add(companyIdList);

    boolean present_employIdList = true && (isSetEmployIdList());
    list.add(present_employIdList);
    if (present_employIdList)
      list.add(employIdList);

    boolean present_applicationIdList = true && (isSetApplicationIdList());
    list.add(present_applicationIdList);
    if (present_applicationIdList)
      list.add(applicationIdList);

    boolean present_teachinIdList = true && (isSetTeachinIdList());
    list.add(present_teachinIdList);
    if (present_teachinIdList)
      list.add(teachinIdList);

    boolean present_examinationIdList = true && (isSetExaminationIdList());
    list.add(present_examinationIdList);
    if (present_examinationIdList)
      list.add(examinationIdList);

    boolean present_interviewIdList = true && (isSetInterviewIdList());
    list.add(present_interviewIdList);
    if (present_interviewIdList)
      list.add(interviewIdList);

    return list.hashCode();
  }

  @Override
  public int compareTo(CollectionInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSet_id()).compareTo(other.isSet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, other._id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyIdList()).compareTo(other.isSetCompanyIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyIdList, other.companyIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmployIdList()).compareTo(other.isSetEmployIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmployIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employIdList, other.employIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplicationIdList()).compareTo(other.isSetApplicationIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationIdList, other.applicationIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeachinIdList()).compareTo(other.isSetTeachinIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeachinIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teachinIdList, other.teachinIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExaminationIdList()).compareTo(other.isSetExaminationIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExaminationIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examinationIdList, other.examinationIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterviewIdList()).compareTo(other.isSetInterviewIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterviewIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interviewIdList, other.interviewIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CollectionInfo(");
    boolean first = true;

    sb.append("_id:");
    if (this._id == null) {
      sb.append("null");
    } else {
      sb.append(this._id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("companyIdList:");
    if (this.companyIdList == null) {
      sb.append("null");
    } else {
      sb.append(this.companyIdList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("employIdList:");
    if (this.employIdList == null) {
      sb.append("null");
    } else {
      sb.append(this.employIdList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applicationIdList:");
    if (this.applicationIdList == null) {
      sb.append("null");
    } else {
      sb.append(this.applicationIdList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teachinIdList:");
    if (this.teachinIdList == null) {
      sb.append("null");
    } else {
      sb.append(this.teachinIdList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("examinationIdList:");
    if (this.examinationIdList == null) {
      sb.append("null");
    } else {
      sb.append(this.examinationIdList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("interviewIdList:");
    if (this.interviewIdList == null) {
      sb.append("null");
    } else {
      sb.append(this.interviewIdList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CollectionInfoStandardSchemeFactory implements SchemeFactory {
    public CollectionInfoStandardScheme getScheme() {
      return new CollectionInfoStandardScheme();
    }
  }

  private static class CollectionInfoStandardScheme extends StandardScheme<CollectionInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CollectionInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._id = iprot.readString();
              struct.set_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPANY_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                struct.companyIdList = new ArrayList<String>(_list64.size);
                String _elem65;
                for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                {
                  _elem65 = iprot.readString();
                  struct.companyIdList.add(_elem65);
                }
                iprot.readListEnd();
              }
              struct.setCompanyIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EMPLOY_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list67 = iprot.readListBegin();
                struct.employIdList = new ArrayList<String>(_list67.size);
                String _elem68;
                for (int _i69 = 0; _i69 < _list67.size; ++_i69)
                {
                  _elem68 = iprot.readString();
                  struct.employIdList.add(_elem68);
                }
                iprot.readListEnd();
              }
              struct.setEmployIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // APPLICATION_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list70 = iprot.readListBegin();
                struct.applicationIdList = new ArrayList<String>(_list70.size);
                String _elem71;
                for (int _i72 = 0; _i72 < _list70.size; ++_i72)
                {
                  _elem71 = iprot.readString();
                  struct.applicationIdList.add(_elem71);
                }
                iprot.readListEnd();
              }
              struct.setApplicationIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TEACHIN_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list73 = iprot.readListBegin();
                struct.teachinIdList = new ArrayList<String>(_list73.size);
                String _elem74;
                for (int _i75 = 0; _i75 < _list73.size; ++_i75)
                {
                  _elem74 = iprot.readString();
                  struct.teachinIdList.add(_elem74);
                }
                iprot.readListEnd();
              }
              struct.setTeachinIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXAMINATION_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list76 = iprot.readListBegin();
                struct.examinationIdList = new ArrayList<String>(_list76.size);
                String _elem77;
                for (int _i78 = 0; _i78 < _list76.size; ++_i78)
                {
                  _elem77 = iprot.readString();
                  struct.examinationIdList.add(_elem77);
                }
                iprot.readListEnd();
              }
              struct.setExaminationIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INTERVIEW_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list79 = iprot.readListBegin();
                struct.interviewIdList = new ArrayList<String>(_list79.size);
                String _elem80;
                for (int _i81 = 0; _i81 < _list79.size; ++_i81)
                {
                  _elem80 = iprot.readString();
                  struct.interviewIdList.add(_elem80);
                }
                iprot.readListEnd();
              }
              struct.setInterviewIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CollectionInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct._id != null) {
        oprot.writeFieldBegin(_ID_FIELD_DESC);
        oprot.writeString(struct._id);
        oprot.writeFieldEnd();
      }
      if (struct.companyIdList != null) {
        oprot.writeFieldBegin(COMPANY_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.companyIdList.size()));
          for (String _iter82 : struct.companyIdList)
          {
            oprot.writeString(_iter82);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.employIdList != null) {
        oprot.writeFieldBegin(EMPLOY_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.employIdList.size()));
          for (String _iter83 : struct.employIdList)
          {
            oprot.writeString(_iter83);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.applicationIdList != null) {
        oprot.writeFieldBegin(APPLICATION_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.applicationIdList.size()));
          for (String _iter84 : struct.applicationIdList)
          {
            oprot.writeString(_iter84);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.teachinIdList != null) {
        oprot.writeFieldBegin(TEACHIN_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.teachinIdList.size()));
          for (String _iter85 : struct.teachinIdList)
          {
            oprot.writeString(_iter85);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.examinationIdList != null) {
        oprot.writeFieldBegin(EXAMINATION_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.examinationIdList.size()));
          for (String _iter86 : struct.examinationIdList)
          {
            oprot.writeString(_iter86);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.interviewIdList != null) {
        oprot.writeFieldBegin(INTERVIEW_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.interviewIdList.size()));
          for (String _iter87 : struct.interviewIdList)
          {
            oprot.writeString(_iter87);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CollectionInfoTupleSchemeFactory implements SchemeFactory {
    public CollectionInfoTupleScheme getScheme() {
      return new CollectionInfoTupleScheme();
    }
  }

  private static class CollectionInfoTupleScheme extends TupleScheme<CollectionInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CollectionInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSet_id()) {
        optionals.set(0);
      }
      if (struct.isSetCompanyIdList()) {
        optionals.set(1);
      }
      if (struct.isSetEmployIdList()) {
        optionals.set(2);
      }
      if (struct.isSetApplicationIdList()) {
        optionals.set(3);
      }
      if (struct.isSetTeachinIdList()) {
        optionals.set(4);
      }
      if (struct.isSetExaminationIdList()) {
        optionals.set(5);
      }
      if (struct.isSetInterviewIdList()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSet_id()) {
        oprot.writeString(struct._id);
      }
      if (struct.isSetCompanyIdList()) {
        {
          oprot.writeI32(struct.companyIdList.size());
          for (String _iter88 : struct.companyIdList)
          {
            oprot.writeString(_iter88);
          }
        }
      }
      if (struct.isSetEmployIdList()) {
        {
          oprot.writeI32(struct.employIdList.size());
          for (String _iter89 : struct.employIdList)
          {
            oprot.writeString(_iter89);
          }
        }
      }
      if (struct.isSetApplicationIdList()) {
        {
          oprot.writeI32(struct.applicationIdList.size());
          for (String _iter90 : struct.applicationIdList)
          {
            oprot.writeString(_iter90);
          }
        }
      }
      if (struct.isSetTeachinIdList()) {
        {
          oprot.writeI32(struct.teachinIdList.size());
          for (String _iter91 : struct.teachinIdList)
          {
            oprot.writeString(_iter91);
          }
        }
      }
      if (struct.isSetExaminationIdList()) {
        {
          oprot.writeI32(struct.examinationIdList.size());
          for (String _iter92 : struct.examinationIdList)
          {
            oprot.writeString(_iter92);
          }
        }
      }
      if (struct.isSetInterviewIdList()) {
        {
          oprot.writeI32(struct.interviewIdList.size());
          for (String _iter93 : struct.interviewIdList)
          {
            oprot.writeString(_iter93);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CollectionInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct._id = iprot.readString();
        struct.set_idIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list94 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.companyIdList = new ArrayList<String>(_list94.size);
          String _elem95;
          for (int _i96 = 0; _i96 < _list94.size; ++_i96)
          {
            _elem95 = iprot.readString();
            struct.companyIdList.add(_elem95);
          }
        }
        struct.setCompanyIdListIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list97 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.employIdList = new ArrayList<String>(_list97.size);
          String _elem98;
          for (int _i99 = 0; _i99 < _list97.size; ++_i99)
          {
            _elem98 = iprot.readString();
            struct.employIdList.add(_elem98);
          }
        }
        struct.setEmployIdListIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list100 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.applicationIdList = new ArrayList<String>(_list100.size);
          String _elem101;
          for (int _i102 = 0; _i102 < _list100.size; ++_i102)
          {
            _elem101 = iprot.readString();
            struct.applicationIdList.add(_elem101);
          }
        }
        struct.setApplicationIdListIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.teachinIdList = new ArrayList<String>(_list103.size);
          String _elem104;
          for (int _i105 = 0; _i105 < _list103.size; ++_i105)
          {
            _elem104 = iprot.readString();
            struct.teachinIdList.add(_elem104);
          }
        }
        struct.setTeachinIdListIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list106 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.examinationIdList = new ArrayList<String>(_list106.size);
          String _elem107;
          for (int _i108 = 0; _i108 < _list106.size; ++_i108)
          {
            _elem107 = iprot.readString();
            struct.examinationIdList.add(_elem107);
          }
        }
        struct.setExaminationIdListIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.interviewIdList = new ArrayList<String>(_list109.size);
          String _elem110;
          for (int _i111 = 0; _i111 < _list109.size; ++_i111)
          {
            _elem110 = iprot.readString();
            struct.interviewIdList.add(_elem110);
          }
        }
        struct.setInterviewIdListIsSet(true);
      }
    }
  }

}

