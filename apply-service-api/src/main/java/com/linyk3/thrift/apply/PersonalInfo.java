/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.linyk3.thrift.apply;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-4-12")
public class PersonalInfo implements org.apache.thrift.TBase<PersonalInfo, PersonalInfo._Fields>, java.io.Serializable, Cloneable, Comparable<PersonalInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PersonalInfo");

  private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BIRTHDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("birthday", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SCHOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("school", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DIPLOMA_FIELD_DESC = new org.apache.thrift.protocol.TField("diploma", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MAJOR_FIELD_DESC = new org.apache.thrift.protocol.TField("major", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MAJOR_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("majorCategory", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField LOCATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("locationId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField LOCATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("locationName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField POSITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("positions", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SALARY_FIELD_DESC = new org.apache.thrift.protocol.TField("salary", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField FAVOR_FIELD_DESC = new org.apache.thrift.protocol.TField("favor", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField IGNORE_FIELD_DESC = new org.apache.thrift.protocol.TField("ignore", org.apache.thrift.protocol.TType.STRUCT, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PersonalInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PersonalInfoTupleSchemeFactory());
  }

  public String _id; // required
  public String name; // required
  public String sex; // required
  public String birthday; // required
  public String school; // required
  public String diploma; // required
  public String major; // required
  public String majorCategory; // required
  public String locationId; // required
  public String locationName; // required
  public String positions; // required
  public int salary; // required
  public CollectionInfo favor; // required
  public CollectionInfo ignore; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _ID((short)1, "_id"),
    NAME((short)2, "name"),
    SEX((short)3, "sex"),
    BIRTHDAY((short)4, "birthday"),
    SCHOOL((short)5, "school"),
    DIPLOMA((short)6, "diploma"),
    MAJOR((short)7, "major"),
    MAJOR_CATEGORY((short)8, "majorCategory"),
    LOCATION_ID((short)9, "locationId"),
    LOCATION_NAME((short)10, "locationName"),
    POSITIONS((short)11, "positions"),
    SALARY((short)12, "salary"),
    FAVOR((short)13, "favor"),
    IGNORE((short)14, "ignore");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _ID
          return _ID;
        case 2: // NAME
          return NAME;
        case 3: // SEX
          return SEX;
        case 4: // BIRTHDAY
          return BIRTHDAY;
        case 5: // SCHOOL
          return SCHOOL;
        case 6: // DIPLOMA
          return DIPLOMA;
        case 7: // MAJOR
          return MAJOR;
        case 8: // MAJOR_CATEGORY
          return MAJOR_CATEGORY;
        case 9: // LOCATION_ID
          return LOCATION_ID;
        case 10: // LOCATION_NAME
          return LOCATION_NAME;
        case 11: // POSITIONS
          return POSITIONS;
        case 12: // SALARY
          return SALARY;
        case 13: // FAVOR
          return FAVOR;
        case 14: // IGNORE
          return IGNORE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SALARY_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIRTHDAY, new org.apache.thrift.meta_data.FieldMetaData("birthday", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCHOOL, new org.apache.thrift.meta_data.FieldMetaData("school", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DIPLOMA, new org.apache.thrift.meta_data.FieldMetaData("diploma", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAJOR, new org.apache.thrift.meta_data.FieldMetaData("major", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAJOR_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("majorCategory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCATION_ID, new org.apache.thrift.meta_data.FieldMetaData("locationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("locationName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSITIONS, new org.apache.thrift.meta_data.FieldMetaData("positions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SALARY, new org.apache.thrift.meta_data.FieldMetaData("salary", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FAVOR, new org.apache.thrift.meta_data.FieldMetaData("favor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollectionInfo.class)));
    tmpMap.put(_Fields.IGNORE, new org.apache.thrift.meta_data.FieldMetaData("ignore", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CollectionInfo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PersonalInfo.class, metaDataMap);
  }

  public PersonalInfo() {
  }

  public PersonalInfo(
    String _id,
    String name,
    String sex,
    String birthday,
    String school,
    String diploma,
    String major,
    String majorCategory,
    String locationId,
    String locationName,
    String positions,
    int salary,
    CollectionInfo favor,
    CollectionInfo ignore)
  {
    this();
    this._id = _id;
    this.name = name;
    this.sex = sex;
    this.birthday = birthday;
    this.school = school;
    this.diploma = diploma;
    this.major = major;
    this.majorCategory = majorCategory;
    this.locationId = locationId;
    this.locationName = locationName;
    this.positions = positions;
    this.salary = salary;
    setSalaryIsSet(true);
    this.favor = favor;
    this.ignore = ignore;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PersonalInfo(PersonalInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSet_id()) {
      this._id = other._id;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetSex()) {
      this.sex = other.sex;
    }
    if (other.isSetBirthday()) {
      this.birthday = other.birthday;
    }
    if (other.isSetSchool()) {
      this.school = other.school;
    }
    if (other.isSetDiploma()) {
      this.diploma = other.diploma;
    }
    if (other.isSetMajor()) {
      this.major = other.major;
    }
    if (other.isSetMajorCategory()) {
      this.majorCategory = other.majorCategory;
    }
    if (other.isSetLocationId()) {
      this.locationId = other.locationId;
    }
    if (other.isSetLocationName()) {
      this.locationName = other.locationName;
    }
    if (other.isSetPositions()) {
      this.positions = other.positions;
    }
    this.salary = other.salary;
    if (other.isSetFavor()) {
      this.favor = new CollectionInfo(other.favor);
    }
    if (other.isSetIgnore()) {
      this.ignore = new CollectionInfo(other.ignore);
    }
  }

  public PersonalInfo deepCopy() {
    return new PersonalInfo(this);
  }

  @Override
  public void clear() {
    this._id = null;
    this.name = null;
    this.sex = null;
    this.birthday = null;
    this.school = null;
    this.diploma = null;
    this.major = null;
    this.majorCategory = null;
    this.locationId = null;
    this.locationName = null;
    this.positions = null;
    setSalaryIsSet(false);
    this.salary = 0;
    this.favor = null;
    this.ignore = null;
  }

  public String get_id() {
    return this._id;
  }

  public PersonalInfo set_id(String _id) {
    this._id = _id;
    return this;
  }

  public void unset_id() {
    this._id = null;
  }

  /** Returns true if field _id is set (has been assigned a value) and false otherwise */
  public boolean isSet_id() {
    return this._id != null;
  }

  public void set_idIsSet(boolean value) {
    if (!value) {
      this._id = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public PersonalInfo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getSex() {
    return this.sex;
  }

  public PersonalInfo setSex(String sex) {
    this.sex = sex;
    return this;
  }

  public void unsetSex() {
    this.sex = null;
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return this.sex != null;
  }

  public void setSexIsSet(boolean value) {
    if (!value) {
      this.sex = null;
    }
  }

  public String getBirthday() {
    return this.birthday;
  }

  public PersonalInfo setBirthday(String birthday) {
    this.birthday = birthday;
    return this;
  }

  public void unsetBirthday() {
    this.birthday = null;
  }

  /** Returns true if field birthday is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthday() {
    return this.birthday != null;
  }

  public void setBirthdayIsSet(boolean value) {
    if (!value) {
      this.birthday = null;
    }
  }

  public String getSchool() {
    return this.school;
  }

  public PersonalInfo setSchool(String school) {
    this.school = school;
    return this;
  }

  public void unsetSchool() {
    this.school = null;
  }

  /** Returns true if field school is set (has been assigned a value) and false otherwise */
  public boolean isSetSchool() {
    return this.school != null;
  }

  public void setSchoolIsSet(boolean value) {
    if (!value) {
      this.school = null;
    }
  }

  public String getDiploma() {
    return this.diploma;
  }

  public PersonalInfo setDiploma(String diploma) {
    this.diploma = diploma;
    return this;
  }

  public void unsetDiploma() {
    this.diploma = null;
  }

  /** Returns true if field diploma is set (has been assigned a value) and false otherwise */
  public boolean isSetDiploma() {
    return this.diploma != null;
  }

  public void setDiplomaIsSet(boolean value) {
    if (!value) {
      this.diploma = null;
    }
  }

  public String getMajor() {
    return this.major;
  }

  public PersonalInfo setMajor(String major) {
    this.major = major;
    return this;
  }

  public void unsetMajor() {
    this.major = null;
  }

  /** Returns true if field major is set (has been assigned a value) and false otherwise */
  public boolean isSetMajor() {
    return this.major != null;
  }

  public void setMajorIsSet(boolean value) {
    if (!value) {
      this.major = null;
    }
  }

  public String getMajorCategory() {
    return this.majorCategory;
  }

  public PersonalInfo setMajorCategory(String majorCategory) {
    this.majorCategory = majorCategory;
    return this;
  }

  public void unsetMajorCategory() {
    this.majorCategory = null;
  }

  /** Returns true if field majorCategory is set (has been assigned a value) and false otherwise */
  public boolean isSetMajorCategory() {
    return this.majorCategory != null;
  }

  public void setMajorCategoryIsSet(boolean value) {
    if (!value) {
      this.majorCategory = null;
    }
  }

  public String getLocationId() {
    return this.locationId;
  }

  public PersonalInfo setLocationId(String locationId) {
    this.locationId = locationId;
    return this;
  }

  public void unsetLocationId() {
    this.locationId = null;
  }

  /** Returns true if field locationId is set (has been assigned a value) and false otherwise */
  public boolean isSetLocationId() {
    return this.locationId != null;
  }

  public void setLocationIdIsSet(boolean value) {
    if (!value) {
      this.locationId = null;
    }
  }

  public String getLocationName() {
    return this.locationName;
  }

  public PersonalInfo setLocationName(String locationName) {
    this.locationName = locationName;
    return this;
  }

  public void unsetLocationName() {
    this.locationName = null;
  }

  /** Returns true if field locationName is set (has been assigned a value) and false otherwise */
  public boolean isSetLocationName() {
    return this.locationName != null;
  }

  public void setLocationNameIsSet(boolean value) {
    if (!value) {
      this.locationName = null;
    }
  }

  public String getPositions() {
    return this.positions;
  }

  public PersonalInfo setPositions(String positions) {
    this.positions = positions;
    return this;
  }

  public void unsetPositions() {
    this.positions = null;
  }

  /** Returns true if field positions is set (has been assigned a value) and false otherwise */
  public boolean isSetPositions() {
    return this.positions != null;
  }

  public void setPositionsIsSet(boolean value) {
    if (!value) {
      this.positions = null;
    }
  }

  public int getSalary() {
    return this.salary;
  }

  public PersonalInfo setSalary(int salary) {
    this.salary = salary;
    setSalaryIsSet(true);
    return this;
  }

  public void unsetSalary() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SALARY_ISSET_ID);
  }

  /** Returns true if field salary is set (has been assigned a value) and false otherwise */
  public boolean isSetSalary() {
    return EncodingUtils.testBit(__isset_bitfield, __SALARY_ISSET_ID);
  }

  public void setSalaryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SALARY_ISSET_ID, value);
  }

  public CollectionInfo getFavor() {
    return this.favor;
  }

  public PersonalInfo setFavor(CollectionInfo favor) {
    this.favor = favor;
    return this;
  }

  public void unsetFavor() {
    this.favor = null;
  }

  /** Returns true if field favor is set (has been assigned a value) and false otherwise */
  public boolean isSetFavor() {
    return this.favor != null;
  }

  public void setFavorIsSet(boolean value) {
    if (!value) {
      this.favor = null;
    }
  }

  public CollectionInfo getIgnore() {
    return this.ignore;
  }

  public PersonalInfo setIgnore(CollectionInfo ignore) {
    this.ignore = ignore;
    return this;
  }

  public void unsetIgnore() {
    this.ignore = null;
  }

  /** Returns true if field ignore is set (has been assigned a value) and false otherwise */
  public boolean isSetIgnore() {
    return this.ignore != null;
  }

  public void setIgnoreIsSet(boolean value) {
    if (!value) {
      this.ignore = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case _ID:
      if (value == null) {
        unset_id();
      } else {
        set_id((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((String)value);
      }
      break;

    case BIRTHDAY:
      if (value == null) {
        unsetBirthday();
      } else {
        setBirthday((String)value);
      }
      break;

    case SCHOOL:
      if (value == null) {
        unsetSchool();
      } else {
        setSchool((String)value);
      }
      break;

    case DIPLOMA:
      if (value == null) {
        unsetDiploma();
      } else {
        setDiploma((String)value);
      }
      break;

    case MAJOR:
      if (value == null) {
        unsetMajor();
      } else {
        setMajor((String)value);
      }
      break;

    case MAJOR_CATEGORY:
      if (value == null) {
        unsetMajorCategory();
      } else {
        setMajorCategory((String)value);
      }
      break;

    case LOCATION_ID:
      if (value == null) {
        unsetLocationId();
      } else {
        setLocationId((String)value);
      }
      break;

    case LOCATION_NAME:
      if (value == null) {
        unsetLocationName();
      } else {
        setLocationName((String)value);
      }
      break;

    case POSITIONS:
      if (value == null) {
        unsetPositions();
      } else {
        setPositions((String)value);
      }
      break;

    case SALARY:
      if (value == null) {
        unsetSalary();
      } else {
        setSalary((Integer)value);
      }
      break;

    case FAVOR:
      if (value == null) {
        unsetFavor();
      } else {
        setFavor((CollectionInfo)value);
      }
      break;

    case IGNORE:
      if (value == null) {
        unsetIgnore();
      } else {
        setIgnore((CollectionInfo)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case _ID:
      return get_id();

    case NAME:
      return getName();

    case SEX:
      return getSex();

    case BIRTHDAY:
      return getBirthday();

    case SCHOOL:
      return getSchool();

    case DIPLOMA:
      return getDiploma();

    case MAJOR:
      return getMajor();

    case MAJOR_CATEGORY:
      return getMajorCategory();

    case LOCATION_ID:
      return getLocationId();

    case LOCATION_NAME:
      return getLocationName();

    case POSITIONS:
      return getPositions();

    case SALARY:
      return Integer.valueOf(getSalary());

    case FAVOR:
      return getFavor();

    case IGNORE:
      return getIgnore();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case _ID:
      return isSet_id();
    case NAME:
      return isSetName();
    case SEX:
      return isSetSex();
    case BIRTHDAY:
      return isSetBirthday();
    case SCHOOL:
      return isSetSchool();
    case DIPLOMA:
      return isSetDiploma();
    case MAJOR:
      return isSetMajor();
    case MAJOR_CATEGORY:
      return isSetMajorCategory();
    case LOCATION_ID:
      return isSetLocationId();
    case LOCATION_NAME:
      return isSetLocationName();
    case POSITIONS:
      return isSetPositions();
    case SALARY:
      return isSetSalary();
    case FAVOR:
      return isSetFavor();
    case IGNORE:
      return isSetIgnore();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PersonalInfo)
      return this.equals((PersonalInfo)that);
    return false;
  }

  public boolean equals(PersonalInfo that) {
    if (that == null)
      return false;

    boolean this_present__id = true && this.isSet_id();
    boolean that_present__id = true && that.isSet_id();
    if (this_present__id || that_present__id) {
      if (!(this_present__id && that_present__id))
        return false;
      if (!this._id.equals(that._id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_sex = true && this.isSetSex();
    boolean that_present_sex = true && that.isSetSex();
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (!this.sex.equals(that.sex))
        return false;
    }

    boolean this_present_birthday = true && this.isSetBirthday();
    boolean that_present_birthday = true && that.isSetBirthday();
    if (this_present_birthday || that_present_birthday) {
      if (!(this_present_birthday && that_present_birthday))
        return false;
      if (!this.birthday.equals(that.birthday))
        return false;
    }

    boolean this_present_school = true && this.isSetSchool();
    boolean that_present_school = true && that.isSetSchool();
    if (this_present_school || that_present_school) {
      if (!(this_present_school && that_present_school))
        return false;
      if (!this.school.equals(that.school))
        return false;
    }

    boolean this_present_diploma = true && this.isSetDiploma();
    boolean that_present_diploma = true && that.isSetDiploma();
    if (this_present_diploma || that_present_diploma) {
      if (!(this_present_diploma && that_present_diploma))
        return false;
      if (!this.diploma.equals(that.diploma))
        return false;
    }

    boolean this_present_major = true && this.isSetMajor();
    boolean that_present_major = true && that.isSetMajor();
    if (this_present_major || that_present_major) {
      if (!(this_present_major && that_present_major))
        return false;
      if (!this.major.equals(that.major))
        return false;
    }

    boolean this_present_majorCategory = true && this.isSetMajorCategory();
    boolean that_present_majorCategory = true && that.isSetMajorCategory();
    if (this_present_majorCategory || that_present_majorCategory) {
      if (!(this_present_majorCategory && that_present_majorCategory))
        return false;
      if (!this.majorCategory.equals(that.majorCategory))
        return false;
    }

    boolean this_present_locationId = true && this.isSetLocationId();
    boolean that_present_locationId = true && that.isSetLocationId();
    if (this_present_locationId || that_present_locationId) {
      if (!(this_present_locationId && that_present_locationId))
        return false;
      if (!this.locationId.equals(that.locationId))
        return false;
    }

    boolean this_present_locationName = true && this.isSetLocationName();
    boolean that_present_locationName = true && that.isSetLocationName();
    if (this_present_locationName || that_present_locationName) {
      if (!(this_present_locationName && that_present_locationName))
        return false;
      if (!this.locationName.equals(that.locationName))
        return false;
    }

    boolean this_present_positions = true && this.isSetPositions();
    boolean that_present_positions = true && that.isSetPositions();
    if (this_present_positions || that_present_positions) {
      if (!(this_present_positions && that_present_positions))
        return false;
      if (!this.positions.equals(that.positions))
        return false;
    }

    boolean this_present_salary = true;
    boolean that_present_salary = true;
    if (this_present_salary || that_present_salary) {
      if (!(this_present_salary && that_present_salary))
        return false;
      if (this.salary != that.salary)
        return false;
    }

    boolean this_present_favor = true && this.isSetFavor();
    boolean that_present_favor = true && that.isSetFavor();
    if (this_present_favor || that_present_favor) {
      if (!(this_present_favor && that_present_favor))
        return false;
      if (!this.favor.equals(that.favor))
        return false;
    }

    boolean this_present_ignore = true && this.isSetIgnore();
    boolean that_present_ignore = true && that.isSetIgnore();
    if (this_present_ignore || that_present_ignore) {
      if (!(this_present_ignore && that_present_ignore))
        return false;
      if (!this.ignore.equals(that.ignore))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present__id = true && (isSet_id());
    list.add(present__id);
    if (present__id)
      list.add(_id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_sex = true && (isSetSex());
    list.add(present_sex);
    if (present_sex)
      list.add(sex);

    boolean present_birthday = true && (isSetBirthday());
    list.add(present_birthday);
    if (present_birthday)
      list.add(birthday);

    boolean present_school = true && (isSetSchool());
    list.add(present_school);
    if (present_school)
      list.add(school);

    boolean present_diploma = true && (isSetDiploma());
    list.add(present_diploma);
    if (present_diploma)
      list.add(diploma);

    boolean present_major = true && (isSetMajor());
    list.add(present_major);
    if (present_major)
      list.add(major);

    boolean present_majorCategory = true && (isSetMajorCategory());
    list.add(present_majorCategory);
    if (present_majorCategory)
      list.add(majorCategory);

    boolean present_locationId = true && (isSetLocationId());
    list.add(present_locationId);
    if (present_locationId)
      list.add(locationId);

    boolean present_locationName = true && (isSetLocationName());
    list.add(present_locationName);
    if (present_locationName)
      list.add(locationName);

    boolean present_positions = true && (isSetPositions());
    list.add(present_positions);
    if (present_positions)
      list.add(positions);

    boolean present_salary = true;
    list.add(present_salary);
    if (present_salary)
      list.add(salary);

    boolean present_favor = true && (isSetFavor());
    list.add(present_favor);
    if (present_favor)
      list.add(favor);

    boolean present_ignore = true && (isSetIgnore());
    list.add(present_ignore);
    if (present_ignore)
      list.add(ignore);

    return list.hashCode();
  }

  @Override
  public int compareTo(PersonalInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSet_id()).compareTo(other.isSet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, other._id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(other.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, other.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirthday()).compareTo(other.isSetBirthday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthday, other.birthday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchool()).compareTo(other.isSetSchool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.school, other.school);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiploma()).compareTo(other.isSetDiploma());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiploma()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.diploma, other.diploma);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMajor()).compareTo(other.isSetMajor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMajor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.major, other.major);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMajorCategory()).compareTo(other.isSetMajorCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMajorCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.majorCategory, other.majorCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocationId()).compareTo(other.isSetLocationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationId, other.locationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocationName()).compareTo(other.isSetLocationName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationName, other.locationName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositions()).compareTo(other.isSetPositions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positions, other.positions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalary()).compareTo(other.isSetSalary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salary, other.salary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFavor()).compareTo(other.isSetFavor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFavor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.favor, other.favor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIgnore()).compareTo(other.isSetIgnore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIgnore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ignore, other.ignore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PersonalInfo(");
    boolean first = true;

    sb.append("_id:");
    if (this._id == null) {
      sb.append("null");
    } else {
      sb.append(this._id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sex:");
    if (this.sex == null) {
      sb.append("null");
    } else {
      sb.append(this.sex);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("birthday:");
    if (this.birthday == null) {
      sb.append("null");
    } else {
      sb.append(this.birthday);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("school:");
    if (this.school == null) {
      sb.append("null");
    } else {
      sb.append(this.school);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("diploma:");
    if (this.diploma == null) {
      sb.append("null");
    } else {
      sb.append(this.diploma);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("major:");
    if (this.major == null) {
      sb.append("null");
    } else {
      sb.append(this.major);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("majorCategory:");
    if (this.majorCategory == null) {
      sb.append("null");
    } else {
      sb.append(this.majorCategory);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("locationId:");
    if (this.locationId == null) {
      sb.append("null");
    } else {
      sb.append(this.locationId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("locationName:");
    if (this.locationName == null) {
      sb.append("null");
    } else {
      sb.append(this.locationName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("positions:");
    if (this.positions == null) {
      sb.append("null");
    } else {
      sb.append(this.positions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("salary:");
    sb.append(this.salary);
    first = false;
    if (!first) sb.append(", ");
    sb.append("favor:");
    if (this.favor == null) {
      sb.append("null");
    } else {
      sb.append(this.favor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ignore:");
    if (this.ignore == null) {
      sb.append("null");
    } else {
      sb.append(this.ignore);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (favor != null) {
      favor.validate();
    }
    if (ignore != null) {
      ignore.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PersonalInfoStandardSchemeFactory implements SchemeFactory {
    public PersonalInfoStandardScheme getScheme() {
      return new PersonalInfoStandardScheme();
    }
  }

  private static class PersonalInfoStandardScheme extends StandardScheme<PersonalInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PersonalInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._id = iprot.readString();
              struct.set_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sex = iprot.readString();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BIRTHDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.birthday = iprot.readString();
              struct.setBirthdayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SCHOOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.school = iprot.readString();
              struct.setSchoolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DIPLOMA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.diploma = iprot.readString();
              struct.setDiplomaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MAJOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.major = iprot.readString();
              struct.setMajorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MAJOR_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.majorCategory = iprot.readString();
              struct.setMajorCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LOCATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.locationId = iprot.readString();
              struct.setLocationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LOCATION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.locationName = iprot.readString();
              struct.setLocationNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // POSITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.positions = iprot.readString();
              struct.setPositionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SALARY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.salary = iprot.readI32();
              struct.setSalaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FAVOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.favor = new CollectionInfo();
              struct.favor.read(iprot);
              struct.setFavorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IGNORE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ignore = new CollectionInfo();
              struct.ignore.read(iprot);
              struct.setIgnoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PersonalInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct._id != null) {
        oprot.writeFieldBegin(_ID_FIELD_DESC);
        oprot.writeString(struct._id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.sex != null) {
        oprot.writeFieldBegin(SEX_FIELD_DESC);
        oprot.writeString(struct.sex);
        oprot.writeFieldEnd();
      }
      if (struct.birthday != null) {
        oprot.writeFieldBegin(BIRTHDAY_FIELD_DESC);
        oprot.writeString(struct.birthday);
        oprot.writeFieldEnd();
      }
      if (struct.school != null) {
        oprot.writeFieldBegin(SCHOOL_FIELD_DESC);
        oprot.writeString(struct.school);
        oprot.writeFieldEnd();
      }
      if (struct.diploma != null) {
        oprot.writeFieldBegin(DIPLOMA_FIELD_DESC);
        oprot.writeString(struct.diploma);
        oprot.writeFieldEnd();
      }
      if (struct.major != null) {
        oprot.writeFieldBegin(MAJOR_FIELD_DESC);
        oprot.writeString(struct.major);
        oprot.writeFieldEnd();
      }
      if (struct.majorCategory != null) {
        oprot.writeFieldBegin(MAJOR_CATEGORY_FIELD_DESC);
        oprot.writeString(struct.majorCategory);
        oprot.writeFieldEnd();
      }
      if (struct.locationId != null) {
        oprot.writeFieldBegin(LOCATION_ID_FIELD_DESC);
        oprot.writeString(struct.locationId);
        oprot.writeFieldEnd();
      }
      if (struct.locationName != null) {
        oprot.writeFieldBegin(LOCATION_NAME_FIELD_DESC);
        oprot.writeString(struct.locationName);
        oprot.writeFieldEnd();
      }
      if (struct.positions != null) {
        oprot.writeFieldBegin(POSITIONS_FIELD_DESC);
        oprot.writeString(struct.positions);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SALARY_FIELD_DESC);
      oprot.writeI32(struct.salary);
      oprot.writeFieldEnd();
      if (struct.favor != null) {
        oprot.writeFieldBegin(FAVOR_FIELD_DESC);
        struct.favor.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.ignore != null) {
        oprot.writeFieldBegin(IGNORE_FIELD_DESC);
        struct.ignore.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PersonalInfoTupleSchemeFactory implements SchemeFactory {
    public PersonalInfoTupleScheme getScheme() {
      return new PersonalInfoTupleScheme();
    }
  }

  private static class PersonalInfoTupleScheme extends TupleScheme<PersonalInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PersonalInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSet_id()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetSex()) {
        optionals.set(2);
      }
      if (struct.isSetBirthday()) {
        optionals.set(3);
      }
      if (struct.isSetSchool()) {
        optionals.set(4);
      }
      if (struct.isSetDiploma()) {
        optionals.set(5);
      }
      if (struct.isSetMajor()) {
        optionals.set(6);
      }
      if (struct.isSetMajorCategory()) {
        optionals.set(7);
      }
      if (struct.isSetLocationId()) {
        optionals.set(8);
      }
      if (struct.isSetLocationName()) {
        optionals.set(9);
      }
      if (struct.isSetPositions()) {
        optionals.set(10);
      }
      if (struct.isSetSalary()) {
        optionals.set(11);
      }
      if (struct.isSetFavor()) {
        optionals.set(12);
      }
      if (struct.isSetIgnore()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSet_id()) {
        oprot.writeString(struct._id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetSex()) {
        oprot.writeString(struct.sex);
      }
      if (struct.isSetBirthday()) {
        oprot.writeString(struct.birthday);
      }
      if (struct.isSetSchool()) {
        oprot.writeString(struct.school);
      }
      if (struct.isSetDiploma()) {
        oprot.writeString(struct.diploma);
      }
      if (struct.isSetMajor()) {
        oprot.writeString(struct.major);
      }
      if (struct.isSetMajorCategory()) {
        oprot.writeString(struct.majorCategory);
      }
      if (struct.isSetLocationId()) {
        oprot.writeString(struct.locationId);
      }
      if (struct.isSetLocationName()) {
        oprot.writeString(struct.locationName);
      }
      if (struct.isSetPositions()) {
        oprot.writeString(struct.positions);
      }
      if (struct.isSetSalary()) {
        oprot.writeI32(struct.salary);
      }
      if (struct.isSetFavor()) {
        struct.favor.write(oprot);
      }
      if (struct.isSetIgnore()) {
        struct.ignore.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PersonalInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct._id = iprot.readString();
        struct.set_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sex = iprot.readString();
        struct.setSexIsSet(true);
      }
      if (incoming.get(3)) {
        struct.birthday = iprot.readString();
        struct.setBirthdayIsSet(true);
      }
      if (incoming.get(4)) {
        struct.school = iprot.readString();
        struct.setSchoolIsSet(true);
      }
      if (incoming.get(5)) {
        struct.diploma = iprot.readString();
        struct.setDiplomaIsSet(true);
      }
      if (incoming.get(6)) {
        struct.major = iprot.readString();
        struct.setMajorIsSet(true);
      }
      if (incoming.get(7)) {
        struct.majorCategory = iprot.readString();
        struct.setMajorCategoryIsSet(true);
      }
      if (incoming.get(8)) {
        struct.locationId = iprot.readString();
        struct.setLocationIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.locationName = iprot.readString();
        struct.setLocationNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.positions = iprot.readString();
        struct.setPositionsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.salary = iprot.readI32();
        struct.setSalaryIsSet(true);
      }
      if (incoming.get(12)) {
        struct.favor = new CollectionInfo();
        struct.favor.read(iprot);
        struct.setFavorIsSet(true);
      }
      if (incoming.get(13)) {
        struct.ignore = new CollectionInfo();
        struct.ignore.read(iprot);
        struct.setIgnoreIsSet(true);
      }
    }
  }

}

