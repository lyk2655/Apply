/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.linyk3.thrift.apply;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-4-12")
public class CompanyInfo implements org.apache.thrift.TBase<CompanyInfo, CompanyInfo._Fields>, java.io.Serializable, Cloneable, Comparable<CompanyInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CompanyInfo");

  private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COMPANY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("companyType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField INTRO_FIELD_DESC = new org.apache.thrift.protocol.TField("intro", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TELPHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("telphone", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField WEBSITE_FIELD_DESC = new org.apache.thrift.protocol.TField("website", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField EMPLOY_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("employIdList", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField APPLICATION_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationIdList", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField TEACHIN_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("teachinIdList", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField EXAMINATION_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("examinationIdList", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField INTERVIEW_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("interviewIdList", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField PROGRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("progress", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField MARKS_FIELD_DESC = new org.apache.thrift.protocol.TField("marks", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField POSITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("positions", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CompanyInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CompanyInfoTupleSchemeFactory());
  }

  public String _id; // required
  public String name; // required
  public String companyType; // required
  public String intro; // required
  public String address; // required
  public String telphone; // required
  public String website; // required
  public List<String> employIdList; // required
  public List<String> applicationIdList; // required
  public List<String> teachinIdList; // required
  public List<String> examinationIdList; // required
  public List<String> interviewIdList; // required
  public String progress; // required
  public String marks; // required
  public String positions; // required
  public int status; // required
  public String type; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _ID((short)1, "_id"),
    NAME((short)2, "name"),
    COMPANY_TYPE((short)3, "companyType"),
    INTRO((short)4, "intro"),
    ADDRESS((short)5, "address"),
    TELPHONE((short)6, "telphone"),
    WEBSITE((short)7, "website"),
    EMPLOY_ID_LIST((short)8, "employIdList"),
    APPLICATION_ID_LIST((short)9, "applicationIdList"),
    TEACHIN_ID_LIST((short)10, "teachinIdList"),
    EXAMINATION_ID_LIST((short)11, "examinationIdList"),
    INTERVIEW_ID_LIST((short)12, "interviewIdList"),
    PROGRESS((short)13, "progress"),
    MARKS((short)14, "marks"),
    POSITIONS((short)15, "positions"),
    STATUS((short)16, "status"),
    TYPE((short)17, "type");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _ID
          return _ID;
        case 2: // NAME
          return NAME;
        case 3: // COMPANY_TYPE
          return COMPANY_TYPE;
        case 4: // INTRO
          return INTRO;
        case 5: // ADDRESS
          return ADDRESS;
        case 6: // TELPHONE
          return TELPHONE;
        case 7: // WEBSITE
          return WEBSITE;
        case 8: // EMPLOY_ID_LIST
          return EMPLOY_ID_LIST;
        case 9: // APPLICATION_ID_LIST
          return APPLICATION_ID_LIST;
        case 10: // TEACHIN_ID_LIST
          return TEACHIN_ID_LIST;
        case 11: // EXAMINATION_ID_LIST
          return EXAMINATION_ID_LIST;
        case 12: // INTERVIEW_ID_LIST
          return INTERVIEW_ID_LIST;
        case 13: // PROGRESS
          return PROGRESS;
        case 14: // MARKS
          return MARKS;
        case 15: // POSITIONS
          return POSITIONS;
        case 16: // STATUS
          return STATUS;
        case 17: // TYPE
          return TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("companyType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTRO, new org.apache.thrift.meta_data.FieldMetaData("intro", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TELPHONE, new org.apache.thrift.meta_data.FieldMetaData("telphone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WEBSITE, new org.apache.thrift.meta_data.FieldMetaData("website", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMPLOY_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("employIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.APPLICATION_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("applicationIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TEACHIN_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("teachinIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.EXAMINATION_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("examinationIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.INTERVIEW_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("interviewIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PROGRESS, new org.apache.thrift.meta_data.FieldMetaData("progress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MARKS, new org.apache.thrift.meta_data.FieldMetaData("marks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSITIONS, new org.apache.thrift.meta_data.FieldMetaData("positions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CompanyInfo.class, metaDataMap);
  }

  public CompanyInfo() {
  }

  public CompanyInfo(
    String _id,
    String name,
    String companyType,
    String intro,
    String address,
    String telphone,
    String website,
    List<String> employIdList,
    List<String> applicationIdList,
    List<String> teachinIdList,
    List<String> examinationIdList,
    List<String> interviewIdList,
    String progress,
    String marks,
    String positions,
    int status,
    String type)
  {
    this();
    this._id = _id;
    this.name = name;
    this.companyType = companyType;
    this.intro = intro;
    this.address = address;
    this.telphone = telphone;
    this.website = website;
    this.employIdList = employIdList;
    this.applicationIdList = applicationIdList;
    this.teachinIdList = teachinIdList;
    this.examinationIdList = examinationIdList;
    this.interviewIdList = interviewIdList;
    this.progress = progress;
    this.marks = marks;
    this.positions = positions;
    this.status = status;
    setStatusIsSet(true);
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CompanyInfo(CompanyInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSet_id()) {
      this._id = other._id;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetCompanyType()) {
      this.companyType = other.companyType;
    }
    if (other.isSetIntro()) {
      this.intro = other.intro;
    }
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetTelphone()) {
      this.telphone = other.telphone;
    }
    if (other.isSetWebsite()) {
      this.website = other.website;
    }
    if (other.isSetEmployIdList()) {
      List<String> __this__employIdList = new ArrayList<String>(other.employIdList);
      this.employIdList = __this__employIdList;
    }
    if (other.isSetApplicationIdList()) {
      List<String> __this__applicationIdList = new ArrayList<String>(other.applicationIdList);
      this.applicationIdList = __this__applicationIdList;
    }
    if (other.isSetTeachinIdList()) {
      List<String> __this__teachinIdList = new ArrayList<String>(other.teachinIdList);
      this.teachinIdList = __this__teachinIdList;
    }
    if (other.isSetExaminationIdList()) {
      List<String> __this__examinationIdList = new ArrayList<String>(other.examinationIdList);
      this.examinationIdList = __this__examinationIdList;
    }
    if (other.isSetInterviewIdList()) {
      List<String> __this__interviewIdList = new ArrayList<String>(other.interviewIdList);
      this.interviewIdList = __this__interviewIdList;
    }
    if (other.isSetProgress()) {
      this.progress = other.progress;
    }
    if (other.isSetMarks()) {
      this.marks = other.marks;
    }
    if (other.isSetPositions()) {
      this.positions = other.positions;
    }
    this.status = other.status;
    if (other.isSetType()) {
      this.type = other.type;
    }
  }

  public CompanyInfo deepCopy() {
    return new CompanyInfo(this);
  }

  @Override
  public void clear() {
    this._id = null;
    this.name = null;
    this.companyType = null;
    this.intro = null;
    this.address = null;
    this.telphone = null;
    this.website = null;
    this.employIdList = null;
    this.applicationIdList = null;
    this.teachinIdList = null;
    this.examinationIdList = null;
    this.interviewIdList = null;
    this.progress = null;
    this.marks = null;
    this.positions = null;
    setStatusIsSet(false);
    this.status = 0;
    this.type = null;
  }

  public String get_id() {
    return this._id;
  }

  public CompanyInfo set_id(String _id) {
    this._id = _id;
    return this;
  }

  public void unset_id() {
    this._id = null;
  }

  /** Returns true if field _id is set (has been assigned a value) and false otherwise */
  public boolean isSet_id() {
    return this._id != null;
  }

  public void set_idIsSet(boolean value) {
    if (!value) {
      this._id = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public CompanyInfo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getCompanyType() {
    return this.companyType;
  }

  public CompanyInfo setCompanyType(String companyType) {
    this.companyType = companyType;
    return this;
  }

  public void unsetCompanyType() {
    this.companyType = null;
  }

  /** Returns true if field companyType is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyType() {
    return this.companyType != null;
  }

  public void setCompanyTypeIsSet(boolean value) {
    if (!value) {
      this.companyType = null;
    }
  }

  public String getIntro() {
    return this.intro;
  }

  public CompanyInfo setIntro(String intro) {
    this.intro = intro;
    return this;
  }

  public void unsetIntro() {
    this.intro = null;
  }

  /** Returns true if field intro is set (has been assigned a value) and false otherwise */
  public boolean isSetIntro() {
    return this.intro != null;
  }

  public void setIntroIsSet(boolean value) {
    if (!value) {
      this.intro = null;
    }
  }

  public String getAddress() {
    return this.address;
  }

  public CompanyInfo setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public String getTelphone() {
    return this.telphone;
  }

  public CompanyInfo setTelphone(String telphone) {
    this.telphone = telphone;
    return this;
  }

  public void unsetTelphone() {
    this.telphone = null;
  }

  /** Returns true if field telphone is set (has been assigned a value) and false otherwise */
  public boolean isSetTelphone() {
    return this.telphone != null;
  }

  public void setTelphoneIsSet(boolean value) {
    if (!value) {
      this.telphone = null;
    }
  }

  public String getWebsite() {
    return this.website;
  }

  public CompanyInfo setWebsite(String website) {
    this.website = website;
    return this;
  }

  public void unsetWebsite() {
    this.website = null;
  }

  /** Returns true if field website is set (has been assigned a value) and false otherwise */
  public boolean isSetWebsite() {
    return this.website != null;
  }

  public void setWebsiteIsSet(boolean value) {
    if (!value) {
      this.website = null;
    }
  }

  public int getEmployIdListSize() {
    return (this.employIdList == null) ? 0 : this.employIdList.size();
  }

  public java.util.Iterator<String> getEmployIdListIterator() {
    return (this.employIdList == null) ? null : this.employIdList.iterator();
  }

  public void addToEmployIdList(String elem) {
    if (this.employIdList == null) {
      this.employIdList = new ArrayList<String>();
    }
    this.employIdList.add(elem);
  }

  public List<String> getEmployIdList() {
    return this.employIdList;
  }

  public CompanyInfo setEmployIdList(List<String> employIdList) {
    this.employIdList = employIdList;
    return this;
  }

  public void unsetEmployIdList() {
    this.employIdList = null;
  }

  /** Returns true if field employIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetEmployIdList() {
    return this.employIdList != null;
  }

  public void setEmployIdListIsSet(boolean value) {
    if (!value) {
      this.employIdList = null;
    }
  }

  public int getApplicationIdListSize() {
    return (this.applicationIdList == null) ? 0 : this.applicationIdList.size();
  }

  public java.util.Iterator<String> getApplicationIdListIterator() {
    return (this.applicationIdList == null) ? null : this.applicationIdList.iterator();
  }

  public void addToApplicationIdList(String elem) {
    if (this.applicationIdList == null) {
      this.applicationIdList = new ArrayList<String>();
    }
    this.applicationIdList.add(elem);
  }

  public List<String> getApplicationIdList() {
    return this.applicationIdList;
  }

  public CompanyInfo setApplicationIdList(List<String> applicationIdList) {
    this.applicationIdList = applicationIdList;
    return this;
  }

  public void unsetApplicationIdList() {
    this.applicationIdList = null;
  }

  /** Returns true if field applicationIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationIdList() {
    return this.applicationIdList != null;
  }

  public void setApplicationIdListIsSet(boolean value) {
    if (!value) {
      this.applicationIdList = null;
    }
  }

  public int getTeachinIdListSize() {
    return (this.teachinIdList == null) ? 0 : this.teachinIdList.size();
  }

  public java.util.Iterator<String> getTeachinIdListIterator() {
    return (this.teachinIdList == null) ? null : this.teachinIdList.iterator();
  }

  public void addToTeachinIdList(String elem) {
    if (this.teachinIdList == null) {
      this.teachinIdList = new ArrayList<String>();
    }
    this.teachinIdList.add(elem);
  }

  public List<String> getTeachinIdList() {
    return this.teachinIdList;
  }

  public CompanyInfo setTeachinIdList(List<String> teachinIdList) {
    this.teachinIdList = teachinIdList;
    return this;
  }

  public void unsetTeachinIdList() {
    this.teachinIdList = null;
  }

  /** Returns true if field teachinIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetTeachinIdList() {
    return this.teachinIdList != null;
  }

  public void setTeachinIdListIsSet(boolean value) {
    if (!value) {
      this.teachinIdList = null;
    }
  }

  public int getExaminationIdListSize() {
    return (this.examinationIdList == null) ? 0 : this.examinationIdList.size();
  }

  public java.util.Iterator<String> getExaminationIdListIterator() {
    return (this.examinationIdList == null) ? null : this.examinationIdList.iterator();
  }

  public void addToExaminationIdList(String elem) {
    if (this.examinationIdList == null) {
      this.examinationIdList = new ArrayList<String>();
    }
    this.examinationIdList.add(elem);
  }

  public List<String> getExaminationIdList() {
    return this.examinationIdList;
  }

  public CompanyInfo setExaminationIdList(List<String> examinationIdList) {
    this.examinationIdList = examinationIdList;
    return this;
  }

  public void unsetExaminationIdList() {
    this.examinationIdList = null;
  }

  /** Returns true if field examinationIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetExaminationIdList() {
    return this.examinationIdList != null;
  }

  public void setExaminationIdListIsSet(boolean value) {
    if (!value) {
      this.examinationIdList = null;
    }
  }

  public int getInterviewIdListSize() {
    return (this.interviewIdList == null) ? 0 : this.interviewIdList.size();
  }

  public java.util.Iterator<String> getInterviewIdListIterator() {
    return (this.interviewIdList == null) ? null : this.interviewIdList.iterator();
  }

  public void addToInterviewIdList(String elem) {
    if (this.interviewIdList == null) {
      this.interviewIdList = new ArrayList<String>();
    }
    this.interviewIdList.add(elem);
  }

  public List<String> getInterviewIdList() {
    return this.interviewIdList;
  }

  public CompanyInfo setInterviewIdList(List<String> interviewIdList) {
    this.interviewIdList = interviewIdList;
    return this;
  }

  public void unsetInterviewIdList() {
    this.interviewIdList = null;
  }

  /** Returns true if field interviewIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetInterviewIdList() {
    return this.interviewIdList != null;
  }

  public void setInterviewIdListIsSet(boolean value) {
    if (!value) {
      this.interviewIdList = null;
    }
  }

  public String getProgress() {
    return this.progress;
  }

  public CompanyInfo setProgress(String progress) {
    this.progress = progress;
    return this;
  }

  public void unsetProgress() {
    this.progress = null;
  }

  /** Returns true if field progress is set (has been assigned a value) and false otherwise */
  public boolean isSetProgress() {
    return this.progress != null;
  }

  public void setProgressIsSet(boolean value) {
    if (!value) {
      this.progress = null;
    }
  }

  public String getMarks() {
    return this.marks;
  }

  public CompanyInfo setMarks(String marks) {
    this.marks = marks;
    return this;
  }

  public void unsetMarks() {
    this.marks = null;
  }

  /** Returns true if field marks is set (has been assigned a value) and false otherwise */
  public boolean isSetMarks() {
    return this.marks != null;
  }

  public void setMarksIsSet(boolean value) {
    if (!value) {
      this.marks = null;
    }
  }

  public String getPositions() {
    return this.positions;
  }

  public CompanyInfo setPositions(String positions) {
    this.positions = positions;
    return this;
  }

  public void unsetPositions() {
    this.positions = null;
  }

  /** Returns true if field positions is set (has been assigned a value) and false otherwise */
  public boolean isSetPositions() {
    return this.positions != null;
  }

  public void setPositionsIsSet(boolean value) {
    if (!value) {
      this.positions = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public CompanyInfo setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getType() {
    return this.type;
  }

  public CompanyInfo setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case _ID:
      if (value == null) {
        unset_id();
      } else {
        set_id((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case COMPANY_TYPE:
      if (value == null) {
        unsetCompanyType();
      } else {
        setCompanyType((String)value);
      }
      break;

    case INTRO:
      if (value == null) {
        unsetIntro();
      } else {
        setIntro((String)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case TELPHONE:
      if (value == null) {
        unsetTelphone();
      } else {
        setTelphone((String)value);
      }
      break;

    case WEBSITE:
      if (value == null) {
        unsetWebsite();
      } else {
        setWebsite((String)value);
      }
      break;

    case EMPLOY_ID_LIST:
      if (value == null) {
        unsetEmployIdList();
      } else {
        setEmployIdList((List<String>)value);
      }
      break;

    case APPLICATION_ID_LIST:
      if (value == null) {
        unsetApplicationIdList();
      } else {
        setApplicationIdList((List<String>)value);
      }
      break;

    case TEACHIN_ID_LIST:
      if (value == null) {
        unsetTeachinIdList();
      } else {
        setTeachinIdList((List<String>)value);
      }
      break;

    case EXAMINATION_ID_LIST:
      if (value == null) {
        unsetExaminationIdList();
      } else {
        setExaminationIdList((List<String>)value);
      }
      break;

    case INTERVIEW_ID_LIST:
      if (value == null) {
        unsetInterviewIdList();
      } else {
        setInterviewIdList((List<String>)value);
      }
      break;

    case PROGRESS:
      if (value == null) {
        unsetProgress();
      } else {
        setProgress((String)value);
      }
      break;

    case MARKS:
      if (value == null) {
        unsetMarks();
      } else {
        setMarks((String)value);
      }
      break;

    case POSITIONS:
      if (value == null) {
        unsetPositions();
      } else {
        setPositions((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case _ID:
      return get_id();

    case NAME:
      return getName();

    case COMPANY_TYPE:
      return getCompanyType();

    case INTRO:
      return getIntro();

    case ADDRESS:
      return getAddress();

    case TELPHONE:
      return getTelphone();

    case WEBSITE:
      return getWebsite();

    case EMPLOY_ID_LIST:
      return getEmployIdList();

    case APPLICATION_ID_LIST:
      return getApplicationIdList();

    case TEACHIN_ID_LIST:
      return getTeachinIdList();

    case EXAMINATION_ID_LIST:
      return getExaminationIdList();

    case INTERVIEW_ID_LIST:
      return getInterviewIdList();

    case PROGRESS:
      return getProgress();

    case MARKS:
      return getMarks();

    case POSITIONS:
      return getPositions();

    case STATUS:
      return Integer.valueOf(getStatus());

    case TYPE:
      return getType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case _ID:
      return isSet_id();
    case NAME:
      return isSetName();
    case COMPANY_TYPE:
      return isSetCompanyType();
    case INTRO:
      return isSetIntro();
    case ADDRESS:
      return isSetAddress();
    case TELPHONE:
      return isSetTelphone();
    case WEBSITE:
      return isSetWebsite();
    case EMPLOY_ID_LIST:
      return isSetEmployIdList();
    case APPLICATION_ID_LIST:
      return isSetApplicationIdList();
    case TEACHIN_ID_LIST:
      return isSetTeachinIdList();
    case EXAMINATION_ID_LIST:
      return isSetExaminationIdList();
    case INTERVIEW_ID_LIST:
      return isSetInterviewIdList();
    case PROGRESS:
      return isSetProgress();
    case MARKS:
      return isSetMarks();
    case POSITIONS:
      return isSetPositions();
    case STATUS:
      return isSetStatus();
    case TYPE:
      return isSetType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CompanyInfo)
      return this.equals((CompanyInfo)that);
    return false;
  }

  public boolean equals(CompanyInfo that) {
    if (that == null)
      return false;

    boolean this_present__id = true && this.isSet_id();
    boolean that_present__id = true && that.isSet_id();
    if (this_present__id || that_present__id) {
      if (!(this_present__id && that_present__id))
        return false;
      if (!this._id.equals(that._id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_companyType = true && this.isSetCompanyType();
    boolean that_present_companyType = true && that.isSetCompanyType();
    if (this_present_companyType || that_present_companyType) {
      if (!(this_present_companyType && that_present_companyType))
        return false;
      if (!this.companyType.equals(that.companyType))
        return false;
    }

    boolean this_present_intro = true && this.isSetIntro();
    boolean that_present_intro = true && that.isSetIntro();
    if (this_present_intro || that_present_intro) {
      if (!(this_present_intro && that_present_intro))
        return false;
      if (!this.intro.equals(that.intro))
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_telphone = true && this.isSetTelphone();
    boolean that_present_telphone = true && that.isSetTelphone();
    if (this_present_telphone || that_present_telphone) {
      if (!(this_present_telphone && that_present_telphone))
        return false;
      if (!this.telphone.equals(that.telphone))
        return false;
    }

    boolean this_present_website = true && this.isSetWebsite();
    boolean that_present_website = true && that.isSetWebsite();
    if (this_present_website || that_present_website) {
      if (!(this_present_website && that_present_website))
        return false;
      if (!this.website.equals(that.website))
        return false;
    }

    boolean this_present_employIdList = true && this.isSetEmployIdList();
    boolean that_present_employIdList = true && that.isSetEmployIdList();
    if (this_present_employIdList || that_present_employIdList) {
      if (!(this_present_employIdList && that_present_employIdList))
        return false;
      if (!this.employIdList.equals(that.employIdList))
        return false;
    }

    boolean this_present_applicationIdList = true && this.isSetApplicationIdList();
    boolean that_present_applicationIdList = true && that.isSetApplicationIdList();
    if (this_present_applicationIdList || that_present_applicationIdList) {
      if (!(this_present_applicationIdList && that_present_applicationIdList))
        return false;
      if (!this.applicationIdList.equals(that.applicationIdList))
        return false;
    }

    boolean this_present_teachinIdList = true && this.isSetTeachinIdList();
    boolean that_present_teachinIdList = true && that.isSetTeachinIdList();
    if (this_present_teachinIdList || that_present_teachinIdList) {
      if (!(this_present_teachinIdList && that_present_teachinIdList))
        return false;
      if (!this.teachinIdList.equals(that.teachinIdList))
        return false;
    }

    boolean this_present_examinationIdList = true && this.isSetExaminationIdList();
    boolean that_present_examinationIdList = true && that.isSetExaminationIdList();
    if (this_present_examinationIdList || that_present_examinationIdList) {
      if (!(this_present_examinationIdList && that_present_examinationIdList))
        return false;
      if (!this.examinationIdList.equals(that.examinationIdList))
        return false;
    }

    boolean this_present_interviewIdList = true && this.isSetInterviewIdList();
    boolean that_present_interviewIdList = true && that.isSetInterviewIdList();
    if (this_present_interviewIdList || that_present_interviewIdList) {
      if (!(this_present_interviewIdList && that_present_interviewIdList))
        return false;
      if (!this.interviewIdList.equals(that.interviewIdList))
        return false;
    }

    boolean this_present_progress = true && this.isSetProgress();
    boolean that_present_progress = true && that.isSetProgress();
    if (this_present_progress || that_present_progress) {
      if (!(this_present_progress && that_present_progress))
        return false;
      if (!this.progress.equals(that.progress))
        return false;
    }

    boolean this_present_marks = true && this.isSetMarks();
    boolean that_present_marks = true && that.isSetMarks();
    if (this_present_marks || that_present_marks) {
      if (!(this_present_marks && that_present_marks))
        return false;
      if (!this.marks.equals(that.marks))
        return false;
    }

    boolean this_present_positions = true && this.isSetPositions();
    boolean that_present_positions = true && that.isSetPositions();
    if (this_present_positions || that_present_positions) {
      if (!(this_present_positions && that_present_positions))
        return false;
      if (!this.positions.equals(that.positions))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present__id = true && (isSet_id());
    list.add(present__id);
    if (present__id)
      list.add(_id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_companyType = true && (isSetCompanyType());
    list.add(present_companyType);
    if (present_companyType)
      list.add(companyType);

    boolean present_intro = true && (isSetIntro());
    list.add(present_intro);
    if (present_intro)
      list.add(intro);

    boolean present_address = true && (isSetAddress());
    list.add(present_address);
    if (present_address)
      list.add(address);

    boolean present_telphone = true && (isSetTelphone());
    list.add(present_telphone);
    if (present_telphone)
      list.add(telphone);

    boolean present_website = true && (isSetWebsite());
    list.add(present_website);
    if (present_website)
      list.add(website);

    boolean present_employIdList = true && (isSetEmployIdList());
    list.add(present_employIdList);
    if (present_employIdList)
      list.add(employIdList);

    boolean present_applicationIdList = true && (isSetApplicationIdList());
    list.add(present_applicationIdList);
    if (present_applicationIdList)
      list.add(applicationIdList);

    boolean present_teachinIdList = true && (isSetTeachinIdList());
    list.add(present_teachinIdList);
    if (present_teachinIdList)
      list.add(teachinIdList);

    boolean present_examinationIdList = true && (isSetExaminationIdList());
    list.add(present_examinationIdList);
    if (present_examinationIdList)
      list.add(examinationIdList);

    boolean present_interviewIdList = true && (isSetInterviewIdList());
    list.add(present_interviewIdList);
    if (present_interviewIdList)
      list.add(interviewIdList);

    boolean present_progress = true && (isSetProgress());
    list.add(present_progress);
    if (present_progress)
      list.add(progress);

    boolean present_marks = true && (isSetMarks());
    list.add(present_marks);
    if (present_marks)
      list.add(marks);

    boolean present_positions = true && (isSetPositions());
    list.add(present_positions);
    if (present_positions)
      list.add(positions);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    return list.hashCode();
  }

  @Override
  public int compareTo(CompanyInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSet_id()).compareTo(other.isSet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, other._id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyType()).compareTo(other.isSetCompanyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyType, other.companyType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntro()).compareTo(other.isSetIntro());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntro()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intro, other.intro);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTelphone()).compareTo(other.isSetTelphone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTelphone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.telphone, other.telphone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWebsite()).compareTo(other.isSetWebsite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWebsite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.website, other.website);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmployIdList()).compareTo(other.isSetEmployIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmployIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employIdList, other.employIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplicationIdList()).compareTo(other.isSetApplicationIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationIdList, other.applicationIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeachinIdList()).compareTo(other.isSetTeachinIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeachinIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teachinIdList, other.teachinIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExaminationIdList()).compareTo(other.isSetExaminationIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExaminationIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examinationIdList, other.examinationIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterviewIdList()).compareTo(other.isSetInterviewIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterviewIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interviewIdList, other.interviewIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProgress()).compareTo(other.isSetProgress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.progress, other.progress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarks()).compareTo(other.isSetMarks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marks, other.marks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositions()).compareTo(other.isSetPositions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positions, other.positions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CompanyInfo(");
    boolean first = true;

    sb.append("_id:");
    if (this._id == null) {
      sb.append("null");
    } else {
      sb.append(this._id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("companyType:");
    if (this.companyType == null) {
      sb.append("null");
    } else {
      sb.append(this.companyType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("intro:");
    if (this.intro == null) {
      sb.append("null");
    } else {
      sb.append(this.intro);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      sb.append(this.address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("telphone:");
    if (this.telphone == null) {
      sb.append("null");
    } else {
      sb.append(this.telphone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("website:");
    if (this.website == null) {
      sb.append("null");
    } else {
      sb.append(this.website);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("employIdList:");
    if (this.employIdList == null) {
      sb.append("null");
    } else {
      sb.append(this.employIdList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applicationIdList:");
    if (this.applicationIdList == null) {
      sb.append("null");
    } else {
      sb.append(this.applicationIdList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teachinIdList:");
    if (this.teachinIdList == null) {
      sb.append("null");
    } else {
      sb.append(this.teachinIdList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("examinationIdList:");
    if (this.examinationIdList == null) {
      sb.append("null");
    } else {
      sb.append(this.examinationIdList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("interviewIdList:");
    if (this.interviewIdList == null) {
      sb.append("null");
    } else {
      sb.append(this.interviewIdList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("progress:");
    if (this.progress == null) {
      sb.append("null");
    } else {
      sb.append(this.progress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("marks:");
    if (this.marks == null) {
      sb.append("null");
    } else {
      sb.append(this.marks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("positions:");
    if (this.positions == null) {
      sb.append("null");
    } else {
      sb.append(this.positions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CompanyInfoStandardSchemeFactory implements SchemeFactory {
    public CompanyInfoStandardScheme getScheme() {
      return new CompanyInfoStandardScheme();
    }
  }

  private static class CompanyInfoStandardScheme extends StandardScheme<CompanyInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CompanyInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._id = iprot.readString();
              struct.set_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPANY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.companyType = iprot.readString();
              struct.setCompanyTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INTRO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.intro = iprot.readString();
              struct.setIntroIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TELPHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.telphone = iprot.readString();
              struct.setTelphoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // WEBSITE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.website = iprot.readString();
              struct.setWebsiteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EMPLOY_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.employIdList = new ArrayList<String>(_list24.size);
                String _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = iprot.readString();
                  struct.employIdList.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setEmployIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // APPLICATION_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                struct.applicationIdList = new ArrayList<String>(_list27.size);
                String _elem28;
                for (int _i29 = 0; _i29 < _list27.size; ++_i29)
                {
                  _elem28 = iprot.readString();
                  struct.applicationIdList.add(_elem28);
                }
                iprot.readListEnd();
              }
              struct.setApplicationIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TEACHIN_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                struct.teachinIdList = new ArrayList<String>(_list30.size);
                String _elem31;
                for (int _i32 = 0; _i32 < _list30.size; ++_i32)
                {
                  _elem31 = iprot.readString();
                  struct.teachinIdList.add(_elem31);
                }
                iprot.readListEnd();
              }
              struct.setTeachinIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // EXAMINATION_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list33 = iprot.readListBegin();
                struct.examinationIdList = new ArrayList<String>(_list33.size);
                String _elem34;
                for (int _i35 = 0; _i35 < _list33.size; ++_i35)
                {
                  _elem34 = iprot.readString();
                  struct.examinationIdList.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setExaminationIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // INTERVIEW_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                struct.interviewIdList = new ArrayList<String>(_list36.size);
                String _elem37;
                for (int _i38 = 0; _i38 < _list36.size; ++_i38)
                {
                  _elem37 = iprot.readString();
                  struct.interviewIdList.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.setInterviewIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PROGRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.progress = iprot.readString();
              struct.setProgressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // MARKS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.marks = iprot.readString();
              struct.setMarksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // POSITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.positions = iprot.readString();
              struct.setPositionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CompanyInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct._id != null) {
        oprot.writeFieldBegin(_ID_FIELD_DESC);
        oprot.writeString(struct._id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.companyType != null) {
        oprot.writeFieldBegin(COMPANY_TYPE_FIELD_DESC);
        oprot.writeString(struct.companyType);
        oprot.writeFieldEnd();
      }
      if (struct.intro != null) {
        oprot.writeFieldBegin(INTRO_FIELD_DESC);
        oprot.writeString(struct.intro);
        oprot.writeFieldEnd();
      }
      if (struct.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        oprot.writeString(struct.address);
        oprot.writeFieldEnd();
      }
      if (struct.telphone != null) {
        oprot.writeFieldBegin(TELPHONE_FIELD_DESC);
        oprot.writeString(struct.telphone);
        oprot.writeFieldEnd();
      }
      if (struct.website != null) {
        oprot.writeFieldBegin(WEBSITE_FIELD_DESC);
        oprot.writeString(struct.website);
        oprot.writeFieldEnd();
      }
      if (struct.employIdList != null) {
        oprot.writeFieldBegin(EMPLOY_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.employIdList.size()));
          for (String _iter39 : struct.employIdList)
          {
            oprot.writeString(_iter39);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.applicationIdList != null) {
        oprot.writeFieldBegin(APPLICATION_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.applicationIdList.size()));
          for (String _iter40 : struct.applicationIdList)
          {
            oprot.writeString(_iter40);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.teachinIdList != null) {
        oprot.writeFieldBegin(TEACHIN_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.teachinIdList.size()));
          for (String _iter41 : struct.teachinIdList)
          {
            oprot.writeString(_iter41);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.examinationIdList != null) {
        oprot.writeFieldBegin(EXAMINATION_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.examinationIdList.size()));
          for (String _iter42 : struct.examinationIdList)
          {
            oprot.writeString(_iter42);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.interviewIdList != null) {
        oprot.writeFieldBegin(INTERVIEW_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.interviewIdList.size()));
          for (String _iter43 : struct.interviewIdList)
          {
            oprot.writeString(_iter43);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.progress != null) {
        oprot.writeFieldBegin(PROGRESS_FIELD_DESC);
        oprot.writeString(struct.progress);
        oprot.writeFieldEnd();
      }
      if (struct.marks != null) {
        oprot.writeFieldBegin(MARKS_FIELD_DESC);
        oprot.writeString(struct.marks);
        oprot.writeFieldEnd();
      }
      if (struct.positions != null) {
        oprot.writeFieldBegin(POSITIONS_FIELD_DESC);
        oprot.writeString(struct.positions);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CompanyInfoTupleSchemeFactory implements SchemeFactory {
    public CompanyInfoTupleScheme getScheme() {
      return new CompanyInfoTupleScheme();
    }
  }

  private static class CompanyInfoTupleScheme extends TupleScheme<CompanyInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CompanyInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSet_id()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetCompanyType()) {
        optionals.set(2);
      }
      if (struct.isSetIntro()) {
        optionals.set(3);
      }
      if (struct.isSetAddress()) {
        optionals.set(4);
      }
      if (struct.isSetTelphone()) {
        optionals.set(5);
      }
      if (struct.isSetWebsite()) {
        optionals.set(6);
      }
      if (struct.isSetEmployIdList()) {
        optionals.set(7);
      }
      if (struct.isSetApplicationIdList()) {
        optionals.set(8);
      }
      if (struct.isSetTeachinIdList()) {
        optionals.set(9);
      }
      if (struct.isSetExaminationIdList()) {
        optionals.set(10);
      }
      if (struct.isSetInterviewIdList()) {
        optionals.set(11);
      }
      if (struct.isSetProgress()) {
        optionals.set(12);
      }
      if (struct.isSetMarks()) {
        optionals.set(13);
      }
      if (struct.isSetPositions()) {
        optionals.set(14);
      }
      if (struct.isSetStatus()) {
        optionals.set(15);
      }
      if (struct.isSetType()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSet_id()) {
        oprot.writeString(struct._id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetCompanyType()) {
        oprot.writeString(struct.companyType);
      }
      if (struct.isSetIntro()) {
        oprot.writeString(struct.intro);
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
      if (struct.isSetTelphone()) {
        oprot.writeString(struct.telphone);
      }
      if (struct.isSetWebsite()) {
        oprot.writeString(struct.website);
      }
      if (struct.isSetEmployIdList()) {
        {
          oprot.writeI32(struct.employIdList.size());
          for (String _iter44 : struct.employIdList)
          {
            oprot.writeString(_iter44);
          }
        }
      }
      if (struct.isSetApplicationIdList()) {
        {
          oprot.writeI32(struct.applicationIdList.size());
          for (String _iter45 : struct.applicationIdList)
          {
            oprot.writeString(_iter45);
          }
        }
      }
      if (struct.isSetTeachinIdList()) {
        {
          oprot.writeI32(struct.teachinIdList.size());
          for (String _iter46 : struct.teachinIdList)
          {
            oprot.writeString(_iter46);
          }
        }
      }
      if (struct.isSetExaminationIdList()) {
        {
          oprot.writeI32(struct.examinationIdList.size());
          for (String _iter47 : struct.examinationIdList)
          {
            oprot.writeString(_iter47);
          }
        }
      }
      if (struct.isSetInterviewIdList()) {
        {
          oprot.writeI32(struct.interviewIdList.size());
          for (String _iter48 : struct.interviewIdList)
          {
            oprot.writeString(_iter48);
          }
        }
      }
      if (struct.isSetProgress()) {
        oprot.writeString(struct.progress);
      }
      if (struct.isSetMarks()) {
        oprot.writeString(struct.marks);
      }
      if (struct.isSetPositions()) {
        oprot.writeString(struct.positions);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CompanyInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct._id = iprot.readString();
        struct.set_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.companyType = iprot.readString();
        struct.setCompanyTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.intro = iprot.readString();
        struct.setIntroIsSet(true);
      }
      if (incoming.get(4)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(5)) {
        struct.telphone = iprot.readString();
        struct.setTelphoneIsSet(true);
      }
      if (incoming.get(6)) {
        struct.website = iprot.readString();
        struct.setWebsiteIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list49 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.employIdList = new ArrayList<String>(_list49.size);
          String _elem50;
          for (int _i51 = 0; _i51 < _list49.size; ++_i51)
          {
            _elem50 = iprot.readString();
            struct.employIdList.add(_elem50);
          }
        }
        struct.setEmployIdListIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list52 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.applicationIdList = new ArrayList<String>(_list52.size);
          String _elem53;
          for (int _i54 = 0; _i54 < _list52.size; ++_i54)
          {
            _elem53 = iprot.readString();
            struct.applicationIdList.add(_elem53);
          }
        }
        struct.setApplicationIdListIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.teachinIdList = new ArrayList<String>(_list55.size);
          String _elem56;
          for (int _i57 = 0; _i57 < _list55.size; ++_i57)
          {
            _elem56 = iprot.readString();
            struct.teachinIdList.add(_elem56);
          }
        }
        struct.setTeachinIdListIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.examinationIdList = new ArrayList<String>(_list58.size);
          String _elem59;
          for (int _i60 = 0; _i60 < _list58.size; ++_i60)
          {
            _elem59 = iprot.readString();
            struct.examinationIdList.add(_elem59);
          }
        }
        struct.setExaminationIdListIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.interviewIdList = new ArrayList<String>(_list61.size);
          String _elem62;
          for (int _i63 = 0; _i63 < _list61.size; ++_i63)
          {
            _elem62 = iprot.readString();
            struct.interviewIdList.add(_elem62);
          }
        }
        struct.setInterviewIdListIsSet(true);
      }
      if (incoming.get(12)) {
        struct.progress = iprot.readString();
        struct.setProgressIsSet(true);
      }
      if (incoming.get(13)) {
        struct.marks = iprot.readString();
        struct.setMarksIsSet(true);
      }
      if (incoming.get(14)) {
        struct.positions = iprot.readString();
        struct.setPositionsIsSet(true);
      }
      if (incoming.get(15)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(16)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
    }
  }

}

