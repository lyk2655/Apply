/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.linyk3.thrift.apply.params;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-4-12")
public class ListTeachinInfoParams implements org.apache.thrift.TBase<ListTeachinInfoParams, ListTeachinInfoParams._Fields>, java.io.Serializable, Cloneable, Comparable<ListTeachinInfoParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ListTeachinInfoParams");

  private static final org.apache.thrift.protocol.TField TEACHIN_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("teachinIdList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("companyIdList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField SCHOOL_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("schoolList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField STATUS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("statusList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField BEGIN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("beginDate", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ListTeachinInfoParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ListTeachinInfoParamsTupleSchemeFactory());
  }

  /**
   * 宣讲会Id列表 选填
   */
  public List<String> teachinIdList; // required
  /**
   * 公司Id列表 选填
   */
  public List<String> companyIdList; // required
  /**
   * 学校列表 选填
   */
  public List<String> schoolList; // required
  /**
   * 宣讲会状态列表 选填
   */
  public List<Integer> statusList; // required
  /**
   * 宣讲会开始日期 选填
   */
  public String beginDate; // required
  /**
   * 宣讲会结束日期 选填
   */
  public String endDate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 宣讲会Id列表 选填
     */
    TEACHIN_ID_LIST((short)1, "teachinIdList"),
    /**
     * 公司Id列表 选填
     */
    COMPANY_ID_LIST((short)2, "companyIdList"),
    /**
     * 学校列表 选填
     */
    SCHOOL_LIST((short)3, "schoolList"),
    /**
     * 宣讲会状态列表 选填
     */
    STATUS_LIST((short)4, "statusList"),
    /**
     * 宣讲会开始日期 选填
     */
    BEGIN_DATE((short)5, "beginDate"),
    /**
     * 宣讲会结束日期 选填
     */
    END_DATE((short)6, "endDate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEACHIN_ID_LIST
          return TEACHIN_ID_LIST;
        case 2: // COMPANY_ID_LIST
          return COMPANY_ID_LIST;
        case 3: // SCHOOL_LIST
          return SCHOOL_LIST;
        case 4: // STATUS_LIST
          return STATUS_LIST;
        case 5: // BEGIN_DATE
          return BEGIN_DATE;
        case 6: // END_DATE
          return END_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEACHIN_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("teachinIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COMPANY_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("companyIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SCHOOL_LIST, new org.apache.thrift.meta_data.FieldMetaData("schoolList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.STATUS_LIST, new org.apache.thrift.meta_data.FieldMetaData("statusList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.BEGIN_DATE, new org.apache.thrift.meta_data.FieldMetaData("beginDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ListTeachinInfoParams.class, metaDataMap);
  }

  public ListTeachinInfoParams() {
  }

  public ListTeachinInfoParams(
    List<String> teachinIdList,
    List<String> companyIdList,
    List<String> schoolList,
    List<Integer> statusList,
    String beginDate,
    String endDate)
  {
    this();
    this.teachinIdList = teachinIdList;
    this.companyIdList = companyIdList;
    this.schoolList = schoolList;
    this.statusList = statusList;
    this.beginDate = beginDate;
    this.endDate = endDate;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ListTeachinInfoParams(ListTeachinInfoParams other) {
    if (other.isSetTeachinIdList()) {
      List<String> __this__teachinIdList = new ArrayList<String>(other.teachinIdList);
      this.teachinIdList = __this__teachinIdList;
    }
    if (other.isSetCompanyIdList()) {
      List<String> __this__companyIdList = new ArrayList<String>(other.companyIdList);
      this.companyIdList = __this__companyIdList;
    }
    if (other.isSetSchoolList()) {
      List<String> __this__schoolList = new ArrayList<String>(other.schoolList);
      this.schoolList = __this__schoolList;
    }
    if (other.isSetStatusList()) {
      List<Integer> __this__statusList = new ArrayList<Integer>(other.statusList);
      this.statusList = __this__statusList;
    }
    if (other.isSetBeginDate()) {
      this.beginDate = other.beginDate;
    }
    if (other.isSetEndDate()) {
      this.endDate = other.endDate;
    }
  }

  public ListTeachinInfoParams deepCopy() {
    return new ListTeachinInfoParams(this);
  }

  @Override
  public void clear() {
    this.teachinIdList = null;
    this.companyIdList = null;
    this.schoolList = null;
    this.statusList = null;
    this.beginDate = null;
    this.endDate = null;
  }

  public int getTeachinIdListSize() {
    return (this.teachinIdList == null) ? 0 : this.teachinIdList.size();
  }

  public java.util.Iterator<String> getTeachinIdListIterator() {
    return (this.teachinIdList == null) ? null : this.teachinIdList.iterator();
  }

  public void addToTeachinIdList(String elem) {
    if (this.teachinIdList == null) {
      this.teachinIdList = new ArrayList<String>();
    }
    this.teachinIdList.add(elem);
  }

  /**
   * 宣讲会Id列表 选填
   */
  public List<String> getTeachinIdList() {
    return this.teachinIdList;
  }

  /**
   * 宣讲会Id列表 选填
   */
  public ListTeachinInfoParams setTeachinIdList(List<String> teachinIdList) {
    this.teachinIdList = teachinIdList;
    return this;
  }

  public void unsetTeachinIdList() {
    this.teachinIdList = null;
  }

  /** Returns true if field teachinIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetTeachinIdList() {
    return this.teachinIdList != null;
  }

  public void setTeachinIdListIsSet(boolean value) {
    if (!value) {
      this.teachinIdList = null;
    }
  }

  public int getCompanyIdListSize() {
    return (this.companyIdList == null) ? 0 : this.companyIdList.size();
  }

  public java.util.Iterator<String> getCompanyIdListIterator() {
    return (this.companyIdList == null) ? null : this.companyIdList.iterator();
  }

  public void addToCompanyIdList(String elem) {
    if (this.companyIdList == null) {
      this.companyIdList = new ArrayList<String>();
    }
    this.companyIdList.add(elem);
  }

  /**
   * 公司Id列表 选填
   */
  public List<String> getCompanyIdList() {
    return this.companyIdList;
  }

  /**
   * 公司Id列表 选填
   */
  public ListTeachinInfoParams setCompanyIdList(List<String> companyIdList) {
    this.companyIdList = companyIdList;
    return this;
  }

  public void unsetCompanyIdList() {
    this.companyIdList = null;
  }

  /** Returns true if field companyIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyIdList() {
    return this.companyIdList != null;
  }

  public void setCompanyIdListIsSet(boolean value) {
    if (!value) {
      this.companyIdList = null;
    }
  }

  public int getSchoolListSize() {
    return (this.schoolList == null) ? 0 : this.schoolList.size();
  }

  public java.util.Iterator<String> getSchoolListIterator() {
    return (this.schoolList == null) ? null : this.schoolList.iterator();
  }

  public void addToSchoolList(String elem) {
    if (this.schoolList == null) {
      this.schoolList = new ArrayList<String>();
    }
    this.schoolList.add(elem);
  }

  /**
   * 学校列表 选填
   */
  public List<String> getSchoolList() {
    return this.schoolList;
  }

  /**
   * 学校列表 选填
   */
  public ListTeachinInfoParams setSchoolList(List<String> schoolList) {
    this.schoolList = schoolList;
    return this;
  }

  public void unsetSchoolList() {
    this.schoolList = null;
  }

  /** Returns true if field schoolList is set (has been assigned a value) and false otherwise */
  public boolean isSetSchoolList() {
    return this.schoolList != null;
  }

  public void setSchoolListIsSet(boolean value) {
    if (!value) {
      this.schoolList = null;
    }
  }

  public int getStatusListSize() {
    return (this.statusList == null) ? 0 : this.statusList.size();
  }

  public java.util.Iterator<Integer> getStatusListIterator() {
    return (this.statusList == null) ? null : this.statusList.iterator();
  }

  public void addToStatusList(int elem) {
    if (this.statusList == null) {
      this.statusList = new ArrayList<Integer>();
    }
    this.statusList.add(elem);
  }

  /**
   * 宣讲会状态列表 选填
   */
  public List<Integer> getStatusList() {
    return this.statusList;
  }

  /**
   * 宣讲会状态列表 选填
   */
  public ListTeachinInfoParams setStatusList(List<Integer> statusList) {
    this.statusList = statusList;
    return this;
  }

  public void unsetStatusList() {
    this.statusList = null;
  }

  /** Returns true if field statusList is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusList() {
    return this.statusList != null;
  }

  public void setStatusListIsSet(boolean value) {
    if (!value) {
      this.statusList = null;
    }
  }

  /**
   * 宣讲会开始日期 选填
   */
  public String getBeginDate() {
    return this.beginDate;
  }

  /**
   * 宣讲会开始日期 选填
   */
  public ListTeachinInfoParams setBeginDate(String beginDate) {
    this.beginDate = beginDate;
    return this;
  }

  public void unsetBeginDate() {
    this.beginDate = null;
  }

  /** Returns true if field beginDate is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginDate() {
    return this.beginDate != null;
  }

  public void setBeginDateIsSet(boolean value) {
    if (!value) {
      this.beginDate = null;
    }
  }

  /**
   * 宣讲会结束日期 选填
   */
  public String getEndDate() {
    return this.endDate;
  }

  /**
   * 宣讲会结束日期 选填
   */
  public ListTeachinInfoParams setEndDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  public void unsetEndDate() {
    this.endDate = null;
  }

  /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDate() {
    return this.endDate != null;
  }

  public void setEndDateIsSet(boolean value) {
    if (!value) {
      this.endDate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TEACHIN_ID_LIST:
      if (value == null) {
        unsetTeachinIdList();
      } else {
        setTeachinIdList((List<String>)value);
      }
      break;

    case COMPANY_ID_LIST:
      if (value == null) {
        unsetCompanyIdList();
      } else {
        setCompanyIdList((List<String>)value);
      }
      break;

    case SCHOOL_LIST:
      if (value == null) {
        unsetSchoolList();
      } else {
        setSchoolList((List<String>)value);
      }
      break;

    case STATUS_LIST:
      if (value == null) {
        unsetStatusList();
      } else {
        setStatusList((List<Integer>)value);
      }
      break;

    case BEGIN_DATE:
      if (value == null) {
        unsetBeginDate();
      } else {
        setBeginDate((String)value);
      }
      break;

    case END_DATE:
      if (value == null) {
        unsetEndDate();
      } else {
        setEndDate((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TEACHIN_ID_LIST:
      return getTeachinIdList();

    case COMPANY_ID_LIST:
      return getCompanyIdList();

    case SCHOOL_LIST:
      return getSchoolList();

    case STATUS_LIST:
      return getStatusList();

    case BEGIN_DATE:
      return getBeginDate();

    case END_DATE:
      return getEndDate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TEACHIN_ID_LIST:
      return isSetTeachinIdList();
    case COMPANY_ID_LIST:
      return isSetCompanyIdList();
    case SCHOOL_LIST:
      return isSetSchoolList();
    case STATUS_LIST:
      return isSetStatusList();
    case BEGIN_DATE:
      return isSetBeginDate();
    case END_DATE:
      return isSetEndDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ListTeachinInfoParams)
      return this.equals((ListTeachinInfoParams)that);
    return false;
  }

  public boolean equals(ListTeachinInfoParams that) {
    if (that == null)
      return false;

    boolean this_present_teachinIdList = true && this.isSetTeachinIdList();
    boolean that_present_teachinIdList = true && that.isSetTeachinIdList();
    if (this_present_teachinIdList || that_present_teachinIdList) {
      if (!(this_present_teachinIdList && that_present_teachinIdList))
        return false;
      if (!this.teachinIdList.equals(that.teachinIdList))
        return false;
    }

    boolean this_present_companyIdList = true && this.isSetCompanyIdList();
    boolean that_present_companyIdList = true && that.isSetCompanyIdList();
    if (this_present_companyIdList || that_present_companyIdList) {
      if (!(this_present_companyIdList && that_present_companyIdList))
        return false;
      if (!this.companyIdList.equals(that.companyIdList))
        return false;
    }

    boolean this_present_schoolList = true && this.isSetSchoolList();
    boolean that_present_schoolList = true && that.isSetSchoolList();
    if (this_present_schoolList || that_present_schoolList) {
      if (!(this_present_schoolList && that_present_schoolList))
        return false;
      if (!this.schoolList.equals(that.schoolList))
        return false;
    }

    boolean this_present_statusList = true && this.isSetStatusList();
    boolean that_present_statusList = true && that.isSetStatusList();
    if (this_present_statusList || that_present_statusList) {
      if (!(this_present_statusList && that_present_statusList))
        return false;
      if (!this.statusList.equals(that.statusList))
        return false;
    }

    boolean this_present_beginDate = true && this.isSetBeginDate();
    boolean that_present_beginDate = true && that.isSetBeginDate();
    if (this_present_beginDate || that_present_beginDate) {
      if (!(this_present_beginDate && that_present_beginDate))
        return false;
      if (!this.beginDate.equals(that.beginDate))
        return false;
    }

    boolean this_present_endDate = true && this.isSetEndDate();
    boolean that_present_endDate = true && that.isSetEndDate();
    if (this_present_endDate || that_present_endDate) {
      if (!(this_present_endDate && that_present_endDate))
        return false;
      if (!this.endDate.equals(that.endDate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_teachinIdList = true && (isSetTeachinIdList());
    list.add(present_teachinIdList);
    if (present_teachinIdList)
      list.add(teachinIdList);

    boolean present_companyIdList = true && (isSetCompanyIdList());
    list.add(present_companyIdList);
    if (present_companyIdList)
      list.add(companyIdList);

    boolean present_schoolList = true && (isSetSchoolList());
    list.add(present_schoolList);
    if (present_schoolList)
      list.add(schoolList);

    boolean present_statusList = true && (isSetStatusList());
    list.add(present_statusList);
    if (present_statusList)
      list.add(statusList);

    boolean present_beginDate = true && (isSetBeginDate());
    list.add(present_beginDate);
    if (present_beginDate)
      list.add(beginDate);

    boolean present_endDate = true && (isSetEndDate());
    list.add(present_endDate);
    if (present_endDate)
      list.add(endDate);

    return list.hashCode();
  }

  @Override
  public int compareTo(ListTeachinInfoParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTeachinIdList()).compareTo(other.isSetTeachinIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeachinIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teachinIdList, other.teachinIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyIdList()).compareTo(other.isSetCompanyIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyIdList, other.companyIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchoolList()).compareTo(other.isSetSchoolList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchoolList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schoolList, other.schoolList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusList()).compareTo(other.isSetStatusList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusList, other.statusList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeginDate()).compareTo(other.isSetBeginDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginDate, other.beginDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(other.isSetEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, other.endDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ListTeachinInfoParams(");
    boolean first = true;

    sb.append("teachinIdList:");
    if (this.teachinIdList == null) {
      sb.append("null");
    } else {
      sb.append(this.teachinIdList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("companyIdList:");
    if (this.companyIdList == null) {
      sb.append("null");
    } else {
      sb.append(this.companyIdList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("schoolList:");
    if (this.schoolList == null) {
      sb.append("null");
    } else {
      sb.append(this.schoolList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("statusList:");
    if (this.statusList == null) {
      sb.append("null");
    } else {
      sb.append(this.statusList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("beginDate:");
    if (this.beginDate == null) {
      sb.append("null");
    } else {
      sb.append(this.beginDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endDate:");
    if (this.endDate == null) {
      sb.append("null");
    } else {
      sb.append(this.endDate);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ListTeachinInfoParamsStandardSchemeFactory implements SchemeFactory {
    public ListTeachinInfoParamsStandardScheme getScheme() {
      return new ListTeachinInfoParamsStandardScheme();
    }
  }

  private static class ListTeachinInfoParamsStandardScheme extends StandardScheme<ListTeachinInfoParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ListTeachinInfoParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TEACHIN_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                struct.teachinIdList = new ArrayList<String>(_list96.size);
                String _elem97;
                for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                {
                  _elem97 = iprot.readString();
                  struct.teachinIdList.add(_elem97);
                }
                iprot.readListEnd();
              }
              struct.setTeachinIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPANY_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list99 = iprot.readListBegin();
                struct.companyIdList = new ArrayList<String>(_list99.size);
                String _elem100;
                for (int _i101 = 0; _i101 < _list99.size; ++_i101)
                {
                  _elem100 = iprot.readString();
                  struct.companyIdList.add(_elem100);
                }
                iprot.readListEnd();
              }
              struct.setCompanyIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SCHOOL_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list102 = iprot.readListBegin();
                struct.schoolList = new ArrayList<String>(_list102.size);
                String _elem103;
                for (int _i104 = 0; _i104 < _list102.size; ++_i104)
                {
                  _elem103 = iprot.readString();
                  struct.schoolList.add(_elem103);
                }
                iprot.readListEnd();
              }
              struct.setSchoolListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATUS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list105 = iprot.readListBegin();
                struct.statusList = new ArrayList<Integer>(_list105.size);
                int _elem106;
                for (int _i107 = 0; _i107 < _list105.size; ++_i107)
                {
                  _elem106 = iprot.readI32();
                  struct.statusList.add(_elem106);
                }
                iprot.readListEnd();
              }
              struct.setStatusListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BEGIN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.beginDate = iprot.readString();
              struct.setBeginDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endDate = iprot.readString();
              struct.setEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ListTeachinInfoParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.teachinIdList != null) {
        oprot.writeFieldBegin(TEACHIN_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.teachinIdList.size()));
          for (String _iter108 : struct.teachinIdList)
          {
            oprot.writeString(_iter108);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.companyIdList != null) {
        oprot.writeFieldBegin(COMPANY_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.companyIdList.size()));
          for (String _iter109 : struct.companyIdList)
          {
            oprot.writeString(_iter109);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.schoolList != null) {
        oprot.writeFieldBegin(SCHOOL_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.schoolList.size()));
          for (String _iter110 : struct.schoolList)
          {
            oprot.writeString(_iter110);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.statusList != null) {
        oprot.writeFieldBegin(STATUS_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.statusList.size()));
          for (int _iter111 : struct.statusList)
          {
            oprot.writeI32(_iter111);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.beginDate != null) {
        oprot.writeFieldBegin(BEGIN_DATE_FIELD_DESC);
        oprot.writeString(struct.beginDate);
        oprot.writeFieldEnd();
      }
      if (struct.endDate != null) {
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeString(struct.endDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ListTeachinInfoParamsTupleSchemeFactory implements SchemeFactory {
    public ListTeachinInfoParamsTupleScheme getScheme() {
      return new ListTeachinInfoParamsTupleScheme();
    }
  }

  private static class ListTeachinInfoParamsTupleScheme extends TupleScheme<ListTeachinInfoParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ListTeachinInfoParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTeachinIdList()) {
        optionals.set(0);
      }
      if (struct.isSetCompanyIdList()) {
        optionals.set(1);
      }
      if (struct.isSetSchoolList()) {
        optionals.set(2);
      }
      if (struct.isSetStatusList()) {
        optionals.set(3);
      }
      if (struct.isSetBeginDate()) {
        optionals.set(4);
      }
      if (struct.isSetEndDate()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetTeachinIdList()) {
        {
          oprot.writeI32(struct.teachinIdList.size());
          for (String _iter112 : struct.teachinIdList)
          {
            oprot.writeString(_iter112);
          }
        }
      }
      if (struct.isSetCompanyIdList()) {
        {
          oprot.writeI32(struct.companyIdList.size());
          for (String _iter113 : struct.companyIdList)
          {
            oprot.writeString(_iter113);
          }
        }
      }
      if (struct.isSetSchoolList()) {
        {
          oprot.writeI32(struct.schoolList.size());
          for (String _iter114 : struct.schoolList)
          {
            oprot.writeString(_iter114);
          }
        }
      }
      if (struct.isSetStatusList()) {
        {
          oprot.writeI32(struct.statusList.size());
          for (int _iter115 : struct.statusList)
          {
            oprot.writeI32(_iter115);
          }
        }
      }
      if (struct.isSetBeginDate()) {
        oprot.writeString(struct.beginDate);
      }
      if (struct.isSetEndDate()) {
        oprot.writeString(struct.endDate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ListTeachinInfoParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list116 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.teachinIdList = new ArrayList<String>(_list116.size);
          String _elem117;
          for (int _i118 = 0; _i118 < _list116.size; ++_i118)
          {
            _elem117 = iprot.readString();
            struct.teachinIdList.add(_elem117);
          }
        }
        struct.setTeachinIdListIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list119 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.companyIdList = new ArrayList<String>(_list119.size);
          String _elem120;
          for (int _i121 = 0; _i121 < _list119.size; ++_i121)
          {
            _elem120 = iprot.readString();
            struct.companyIdList.add(_elem120);
          }
        }
        struct.setCompanyIdListIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list122 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.schoolList = new ArrayList<String>(_list122.size);
          String _elem123;
          for (int _i124 = 0; _i124 < _list122.size; ++_i124)
          {
            _elem123 = iprot.readString();
            struct.schoolList.add(_elem123);
          }
        }
        struct.setSchoolListIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.statusList = new ArrayList<Integer>(_list125.size);
          int _elem126;
          for (int _i127 = 0; _i127 < _list125.size; ++_i127)
          {
            _elem126 = iprot.readI32();
            struct.statusList.add(_elem126);
          }
        }
        struct.setStatusListIsSet(true);
      }
      if (incoming.get(4)) {
        struct.beginDate = iprot.readString();
        struct.setBeginDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.endDate = iprot.readString();
        struct.setEndDateIsSet(true);
      }
    }
  }

}

