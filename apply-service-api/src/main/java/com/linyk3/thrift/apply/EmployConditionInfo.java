/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.linyk3.thrift.apply;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-4-12")
public class EmployConditionInfo implements org.apache.thrift.TBase<EmployConditionInfo, EmployConditionInfo._Fields>, java.io.Serializable, Cloneable, Comparable<EmployConditionInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EmployConditionInfo");

  private static final org.apache.thrift.protocol.TField DIPLOMAS_FIELD_DESC = new org.apache.thrift.protocol.TField("diplomas", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SCHOOLS_FIELD_DESC = new org.apache.thrift.protocol.TField("schools", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField MAJORS_FIELD_DESC = new org.apache.thrift.protocol.TField("majors", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField OTHERS_FIELD_DESC = new org.apache.thrift.protocol.TField("others", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EmployConditionInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EmployConditionInfoTupleSchemeFactory());
  }

  public List<String> diplomas; // required
  public List<String> schools; // required
  public List<String> majors; // required
  public String others; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DIPLOMAS((short)1, "diplomas"),
    SCHOOLS((short)2, "schools"),
    MAJORS((short)3, "majors"),
    OTHERS((short)4, "others");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DIPLOMAS
          return DIPLOMAS;
        case 2: // SCHOOLS
          return SCHOOLS;
        case 3: // MAJORS
          return MAJORS;
        case 4: // OTHERS
          return OTHERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DIPLOMAS, new org.apache.thrift.meta_data.FieldMetaData("diplomas", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SCHOOLS, new org.apache.thrift.meta_data.FieldMetaData("schools", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MAJORS, new org.apache.thrift.meta_data.FieldMetaData("majors", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.OTHERS, new org.apache.thrift.meta_data.FieldMetaData("others", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EmployConditionInfo.class, metaDataMap);
  }

  public EmployConditionInfo() {
  }

  public EmployConditionInfo(
    List<String> diplomas,
    List<String> schools,
    List<String> majors,
    String others)
  {
    this();
    this.diplomas = diplomas;
    this.schools = schools;
    this.majors = majors;
    this.others = others;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EmployConditionInfo(EmployConditionInfo other) {
    if (other.isSetDiplomas()) {
      List<String> __this__diplomas = new ArrayList<String>(other.diplomas);
      this.diplomas = __this__diplomas;
    }
    if (other.isSetSchools()) {
      List<String> __this__schools = new ArrayList<String>(other.schools);
      this.schools = __this__schools;
    }
    if (other.isSetMajors()) {
      List<String> __this__majors = new ArrayList<String>(other.majors);
      this.majors = __this__majors;
    }
    if (other.isSetOthers()) {
      this.others = other.others;
    }
  }

  public EmployConditionInfo deepCopy() {
    return new EmployConditionInfo(this);
  }

  @Override
  public void clear() {
    this.diplomas = null;
    this.schools = null;
    this.majors = null;
    this.others = null;
  }

  public int getDiplomasSize() {
    return (this.diplomas == null) ? 0 : this.diplomas.size();
  }

  public java.util.Iterator<String> getDiplomasIterator() {
    return (this.diplomas == null) ? null : this.diplomas.iterator();
  }

  public void addToDiplomas(String elem) {
    if (this.diplomas == null) {
      this.diplomas = new ArrayList<String>();
    }
    this.diplomas.add(elem);
  }

  public List<String> getDiplomas() {
    return this.diplomas;
  }

  public EmployConditionInfo setDiplomas(List<String> diplomas) {
    this.diplomas = diplomas;
    return this;
  }

  public void unsetDiplomas() {
    this.diplomas = null;
  }

  /** Returns true if field diplomas is set (has been assigned a value) and false otherwise */
  public boolean isSetDiplomas() {
    return this.diplomas != null;
  }

  public void setDiplomasIsSet(boolean value) {
    if (!value) {
      this.diplomas = null;
    }
  }

  public int getSchoolsSize() {
    return (this.schools == null) ? 0 : this.schools.size();
  }

  public java.util.Iterator<String> getSchoolsIterator() {
    return (this.schools == null) ? null : this.schools.iterator();
  }

  public void addToSchools(String elem) {
    if (this.schools == null) {
      this.schools = new ArrayList<String>();
    }
    this.schools.add(elem);
  }

  public List<String> getSchools() {
    return this.schools;
  }

  public EmployConditionInfo setSchools(List<String> schools) {
    this.schools = schools;
    return this;
  }

  public void unsetSchools() {
    this.schools = null;
  }

  /** Returns true if field schools is set (has been assigned a value) and false otherwise */
  public boolean isSetSchools() {
    return this.schools != null;
  }

  public void setSchoolsIsSet(boolean value) {
    if (!value) {
      this.schools = null;
    }
  }

  public int getMajorsSize() {
    return (this.majors == null) ? 0 : this.majors.size();
  }

  public java.util.Iterator<String> getMajorsIterator() {
    return (this.majors == null) ? null : this.majors.iterator();
  }

  public void addToMajors(String elem) {
    if (this.majors == null) {
      this.majors = new ArrayList<String>();
    }
    this.majors.add(elem);
  }

  public List<String> getMajors() {
    return this.majors;
  }

  public EmployConditionInfo setMajors(List<String> majors) {
    this.majors = majors;
    return this;
  }

  public void unsetMajors() {
    this.majors = null;
  }

  /** Returns true if field majors is set (has been assigned a value) and false otherwise */
  public boolean isSetMajors() {
    return this.majors != null;
  }

  public void setMajorsIsSet(boolean value) {
    if (!value) {
      this.majors = null;
    }
  }

  public String getOthers() {
    return this.others;
  }

  public EmployConditionInfo setOthers(String others) {
    this.others = others;
    return this;
  }

  public void unsetOthers() {
    this.others = null;
  }

  /** Returns true if field others is set (has been assigned a value) and false otherwise */
  public boolean isSetOthers() {
    return this.others != null;
  }

  public void setOthersIsSet(boolean value) {
    if (!value) {
      this.others = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DIPLOMAS:
      if (value == null) {
        unsetDiplomas();
      } else {
        setDiplomas((List<String>)value);
      }
      break;

    case SCHOOLS:
      if (value == null) {
        unsetSchools();
      } else {
        setSchools((List<String>)value);
      }
      break;

    case MAJORS:
      if (value == null) {
        unsetMajors();
      } else {
        setMajors((List<String>)value);
      }
      break;

    case OTHERS:
      if (value == null) {
        unsetOthers();
      } else {
        setOthers((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DIPLOMAS:
      return getDiplomas();

    case SCHOOLS:
      return getSchools();

    case MAJORS:
      return getMajors();

    case OTHERS:
      return getOthers();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DIPLOMAS:
      return isSetDiplomas();
    case SCHOOLS:
      return isSetSchools();
    case MAJORS:
      return isSetMajors();
    case OTHERS:
      return isSetOthers();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EmployConditionInfo)
      return this.equals((EmployConditionInfo)that);
    return false;
  }

  public boolean equals(EmployConditionInfo that) {
    if (that == null)
      return false;

    boolean this_present_diplomas = true && this.isSetDiplomas();
    boolean that_present_diplomas = true && that.isSetDiplomas();
    if (this_present_diplomas || that_present_diplomas) {
      if (!(this_present_diplomas && that_present_diplomas))
        return false;
      if (!this.diplomas.equals(that.diplomas))
        return false;
    }

    boolean this_present_schools = true && this.isSetSchools();
    boolean that_present_schools = true && that.isSetSchools();
    if (this_present_schools || that_present_schools) {
      if (!(this_present_schools && that_present_schools))
        return false;
      if (!this.schools.equals(that.schools))
        return false;
    }

    boolean this_present_majors = true && this.isSetMajors();
    boolean that_present_majors = true && that.isSetMajors();
    if (this_present_majors || that_present_majors) {
      if (!(this_present_majors && that_present_majors))
        return false;
      if (!this.majors.equals(that.majors))
        return false;
    }

    boolean this_present_others = true && this.isSetOthers();
    boolean that_present_others = true && that.isSetOthers();
    if (this_present_others || that_present_others) {
      if (!(this_present_others && that_present_others))
        return false;
      if (!this.others.equals(that.others))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_diplomas = true && (isSetDiplomas());
    list.add(present_diplomas);
    if (present_diplomas)
      list.add(diplomas);

    boolean present_schools = true && (isSetSchools());
    list.add(present_schools);
    if (present_schools)
      list.add(schools);

    boolean present_majors = true && (isSetMajors());
    list.add(present_majors);
    if (present_majors)
      list.add(majors);

    boolean present_others = true && (isSetOthers());
    list.add(present_others);
    if (present_others)
      list.add(others);

    return list.hashCode();
  }

  @Override
  public int compareTo(EmployConditionInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDiplomas()).compareTo(other.isSetDiplomas());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiplomas()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.diplomas, other.diplomas);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchools()).compareTo(other.isSetSchools());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchools()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schools, other.schools);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMajors()).compareTo(other.isSetMajors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMajors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.majors, other.majors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOthers()).compareTo(other.isSetOthers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOthers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.others, other.others);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EmployConditionInfo(");
    boolean first = true;

    sb.append("diplomas:");
    if (this.diplomas == null) {
      sb.append("null");
    } else {
      sb.append(this.diplomas);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("schools:");
    if (this.schools == null) {
      sb.append("null");
    } else {
      sb.append(this.schools);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("majors:");
    if (this.majors == null) {
      sb.append("null");
    } else {
      sb.append(this.majors);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("others:");
    if (this.others == null) {
      sb.append("null");
    } else {
      sb.append(this.others);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EmployConditionInfoStandardSchemeFactory implements SchemeFactory {
    public EmployConditionInfoStandardScheme getScheme() {
      return new EmployConditionInfoStandardScheme();
    }
  }

  private static class EmployConditionInfoStandardScheme extends StandardScheme<EmployConditionInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EmployConditionInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DIPLOMAS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.diplomas = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.diplomas.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setDiplomasIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCHOOLS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.schools = new ArrayList<String>(_list3.size);
                String _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.schools.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setSchoolsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAJORS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.majors = new ArrayList<String>(_list6.size);
                String _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readString();
                  struct.majors.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setMajorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OTHERS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.others = iprot.readString();
              struct.setOthersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EmployConditionInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.diplomas != null) {
        oprot.writeFieldBegin(DIPLOMAS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.diplomas.size()));
          for (String _iter9 : struct.diplomas)
          {
            oprot.writeString(_iter9);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.schools != null) {
        oprot.writeFieldBegin(SCHOOLS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.schools.size()));
          for (String _iter10 : struct.schools)
          {
            oprot.writeString(_iter10);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.majors != null) {
        oprot.writeFieldBegin(MAJORS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.majors.size()));
          for (String _iter11 : struct.majors)
          {
            oprot.writeString(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.others != null) {
        oprot.writeFieldBegin(OTHERS_FIELD_DESC);
        oprot.writeString(struct.others);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EmployConditionInfoTupleSchemeFactory implements SchemeFactory {
    public EmployConditionInfoTupleScheme getScheme() {
      return new EmployConditionInfoTupleScheme();
    }
  }

  private static class EmployConditionInfoTupleScheme extends TupleScheme<EmployConditionInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EmployConditionInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDiplomas()) {
        optionals.set(0);
      }
      if (struct.isSetSchools()) {
        optionals.set(1);
      }
      if (struct.isSetMajors()) {
        optionals.set(2);
      }
      if (struct.isSetOthers()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetDiplomas()) {
        {
          oprot.writeI32(struct.diplomas.size());
          for (String _iter12 : struct.diplomas)
          {
            oprot.writeString(_iter12);
          }
        }
      }
      if (struct.isSetSchools()) {
        {
          oprot.writeI32(struct.schools.size());
          for (String _iter13 : struct.schools)
          {
            oprot.writeString(_iter13);
          }
        }
      }
      if (struct.isSetMajors()) {
        {
          oprot.writeI32(struct.majors.size());
          for (String _iter14 : struct.majors)
          {
            oprot.writeString(_iter14);
          }
        }
      }
      if (struct.isSetOthers()) {
        oprot.writeString(struct.others);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EmployConditionInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.diplomas = new ArrayList<String>(_list15.size);
          String _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = iprot.readString();
            struct.diplomas.add(_elem16);
          }
        }
        struct.setDiplomasIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.schools = new ArrayList<String>(_list18.size);
          String _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = iprot.readString();
            struct.schools.add(_elem19);
          }
        }
        struct.setSchoolsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.majors = new ArrayList<String>(_list21.size);
          String _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readString();
            struct.majors.add(_elem22);
          }
        }
        struct.setMajorsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.others = iprot.readString();
        struct.setOthersIsSet(true);
      }
    }
  }

}

