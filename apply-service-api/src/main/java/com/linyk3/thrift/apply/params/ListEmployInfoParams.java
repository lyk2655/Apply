/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.linyk3.thrift.apply.params;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-4-12")
public class ListEmployInfoParams implements org.apache.thrift.TBase<ListEmployInfoParams, ListEmployInfoParams._Fields>, java.io.Serializable, Cloneable, Comparable<ListEmployInfoParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ListEmployInfoParams");

  private static final org.apache.thrift.protocol.TField EMPLOY_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("employIdList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("companyIdList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField EMPLOY_POSITION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("employPositionList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField SALARY_MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("salary_min", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SALARY_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("salary_max", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ListEmployInfoParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ListEmployInfoParamsTupleSchemeFactory());
  }

  /**
   * 招聘信息Id列表 选填
   */
  public List<String> employIdList; // required
  /**
   * 公司Id列表 选填
   */
  public List<String> companyIdList; // required
  /**
   * 招聘岗位列表 选填
   */
  public List<String> employPositionList; // required
  /**
   * 最低薪酬 选填
   */
  public int salary_min; // required
  /**
   * 最高薪酬 选填
   */
  public int salary_max; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 招聘信息Id列表 选填
     */
    EMPLOY_ID_LIST((short)1, "employIdList"),
    /**
     * 公司Id列表 选填
     */
    COMPANY_ID_LIST((short)2, "companyIdList"),
    /**
     * 招聘岗位列表 选填
     */
    EMPLOY_POSITION_LIST((short)3, "employPositionList"),
    /**
     * 最低薪酬 选填
     */
    SALARY_MIN((short)4, "salary_min"),
    /**
     * 最高薪酬 选填
     */
    SALARY_MAX((short)5, "salary_max");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EMPLOY_ID_LIST
          return EMPLOY_ID_LIST;
        case 2: // COMPANY_ID_LIST
          return COMPANY_ID_LIST;
        case 3: // EMPLOY_POSITION_LIST
          return EMPLOY_POSITION_LIST;
        case 4: // SALARY_MIN
          return SALARY_MIN;
        case 5: // SALARY_MAX
          return SALARY_MAX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SALARY_MIN_ISSET_ID = 0;
  private static final int __SALARY_MAX_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EMPLOY_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("employIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COMPANY_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("companyIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.EMPLOY_POSITION_LIST, new org.apache.thrift.meta_data.FieldMetaData("employPositionList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SALARY_MIN, new org.apache.thrift.meta_data.FieldMetaData("salary_min", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SALARY_MAX, new org.apache.thrift.meta_data.FieldMetaData("salary_max", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ListEmployInfoParams.class, metaDataMap);
  }

  public ListEmployInfoParams() {
  }

  public ListEmployInfoParams(
    List<String> employIdList,
    List<String> companyIdList,
    List<String> employPositionList,
    int salary_min,
    int salary_max)
  {
    this();
    this.employIdList = employIdList;
    this.companyIdList = companyIdList;
    this.employPositionList = employPositionList;
    this.salary_min = salary_min;
    setSalary_minIsSet(true);
    this.salary_max = salary_max;
    setSalary_maxIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ListEmployInfoParams(ListEmployInfoParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetEmployIdList()) {
      List<String> __this__employIdList = new ArrayList<String>(other.employIdList);
      this.employIdList = __this__employIdList;
    }
    if (other.isSetCompanyIdList()) {
      List<String> __this__companyIdList = new ArrayList<String>(other.companyIdList);
      this.companyIdList = __this__companyIdList;
    }
    if (other.isSetEmployPositionList()) {
      List<String> __this__employPositionList = new ArrayList<String>(other.employPositionList);
      this.employPositionList = __this__employPositionList;
    }
    this.salary_min = other.salary_min;
    this.salary_max = other.salary_max;
  }

  public ListEmployInfoParams deepCopy() {
    return new ListEmployInfoParams(this);
  }

  @Override
  public void clear() {
    this.employIdList = null;
    this.companyIdList = null;
    this.employPositionList = null;
    setSalary_minIsSet(false);
    this.salary_min = 0;
    setSalary_maxIsSet(false);
    this.salary_max = 0;
  }

  public int getEmployIdListSize() {
    return (this.employIdList == null) ? 0 : this.employIdList.size();
  }

  public java.util.Iterator<String> getEmployIdListIterator() {
    return (this.employIdList == null) ? null : this.employIdList.iterator();
  }

  public void addToEmployIdList(String elem) {
    if (this.employIdList == null) {
      this.employIdList = new ArrayList<String>();
    }
    this.employIdList.add(elem);
  }

  /**
   * 招聘信息Id列表 选填
   */
  public List<String> getEmployIdList() {
    return this.employIdList;
  }

  /**
   * 招聘信息Id列表 选填
   */
  public ListEmployInfoParams setEmployIdList(List<String> employIdList) {
    this.employIdList = employIdList;
    return this;
  }

  public void unsetEmployIdList() {
    this.employIdList = null;
  }

  /** Returns true if field employIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetEmployIdList() {
    return this.employIdList != null;
  }

  public void setEmployIdListIsSet(boolean value) {
    if (!value) {
      this.employIdList = null;
    }
  }

  public int getCompanyIdListSize() {
    return (this.companyIdList == null) ? 0 : this.companyIdList.size();
  }

  public java.util.Iterator<String> getCompanyIdListIterator() {
    return (this.companyIdList == null) ? null : this.companyIdList.iterator();
  }

  public void addToCompanyIdList(String elem) {
    if (this.companyIdList == null) {
      this.companyIdList = new ArrayList<String>();
    }
    this.companyIdList.add(elem);
  }

  /**
   * 公司Id列表 选填
   */
  public List<String> getCompanyIdList() {
    return this.companyIdList;
  }

  /**
   * 公司Id列表 选填
   */
  public ListEmployInfoParams setCompanyIdList(List<String> companyIdList) {
    this.companyIdList = companyIdList;
    return this;
  }

  public void unsetCompanyIdList() {
    this.companyIdList = null;
  }

  /** Returns true if field companyIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyIdList() {
    return this.companyIdList != null;
  }

  public void setCompanyIdListIsSet(boolean value) {
    if (!value) {
      this.companyIdList = null;
    }
  }

  public int getEmployPositionListSize() {
    return (this.employPositionList == null) ? 0 : this.employPositionList.size();
  }

  public java.util.Iterator<String> getEmployPositionListIterator() {
    return (this.employPositionList == null) ? null : this.employPositionList.iterator();
  }

  public void addToEmployPositionList(String elem) {
    if (this.employPositionList == null) {
      this.employPositionList = new ArrayList<String>();
    }
    this.employPositionList.add(elem);
  }

  /**
   * 招聘岗位列表 选填
   */
  public List<String> getEmployPositionList() {
    return this.employPositionList;
  }

  /**
   * 招聘岗位列表 选填
   */
  public ListEmployInfoParams setEmployPositionList(List<String> employPositionList) {
    this.employPositionList = employPositionList;
    return this;
  }

  public void unsetEmployPositionList() {
    this.employPositionList = null;
  }

  /** Returns true if field employPositionList is set (has been assigned a value) and false otherwise */
  public boolean isSetEmployPositionList() {
    return this.employPositionList != null;
  }

  public void setEmployPositionListIsSet(boolean value) {
    if (!value) {
      this.employPositionList = null;
    }
  }

  /**
   * 最低薪酬 选填
   */
  public int getSalary_min() {
    return this.salary_min;
  }

  /**
   * 最低薪酬 选填
   */
  public ListEmployInfoParams setSalary_min(int salary_min) {
    this.salary_min = salary_min;
    setSalary_minIsSet(true);
    return this;
  }

  public void unsetSalary_min() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SALARY_MIN_ISSET_ID);
  }

  /** Returns true if field salary_min is set (has been assigned a value) and false otherwise */
  public boolean isSetSalary_min() {
    return EncodingUtils.testBit(__isset_bitfield, __SALARY_MIN_ISSET_ID);
  }

  public void setSalary_minIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SALARY_MIN_ISSET_ID, value);
  }

  /**
   * 最高薪酬 选填
   */
  public int getSalary_max() {
    return this.salary_max;
  }

  /**
   * 最高薪酬 选填
   */
  public ListEmployInfoParams setSalary_max(int salary_max) {
    this.salary_max = salary_max;
    setSalary_maxIsSet(true);
    return this;
  }

  public void unsetSalary_max() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SALARY_MAX_ISSET_ID);
  }

  /** Returns true if field salary_max is set (has been assigned a value) and false otherwise */
  public boolean isSetSalary_max() {
    return EncodingUtils.testBit(__isset_bitfield, __SALARY_MAX_ISSET_ID);
  }

  public void setSalary_maxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SALARY_MAX_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EMPLOY_ID_LIST:
      if (value == null) {
        unsetEmployIdList();
      } else {
        setEmployIdList((List<String>)value);
      }
      break;

    case COMPANY_ID_LIST:
      if (value == null) {
        unsetCompanyIdList();
      } else {
        setCompanyIdList((List<String>)value);
      }
      break;

    case EMPLOY_POSITION_LIST:
      if (value == null) {
        unsetEmployPositionList();
      } else {
        setEmployPositionList((List<String>)value);
      }
      break;

    case SALARY_MIN:
      if (value == null) {
        unsetSalary_min();
      } else {
        setSalary_min((Integer)value);
      }
      break;

    case SALARY_MAX:
      if (value == null) {
        unsetSalary_max();
      } else {
        setSalary_max((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EMPLOY_ID_LIST:
      return getEmployIdList();

    case COMPANY_ID_LIST:
      return getCompanyIdList();

    case EMPLOY_POSITION_LIST:
      return getEmployPositionList();

    case SALARY_MIN:
      return Integer.valueOf(getSalary_min());

    case SALARY_MAX:
      return Integer.valueOf(getSalary_max());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EMPLOY_ID_LIST:
      return isSetEmployIdList();
    case COMPANY_ID_LIST:
      return isSetCompanyIdList();
    case EMPLOY_POSITION_LIST:
      return isSetEmployPositionList();
    case SALARY_MIN:
      return isSetSalary_min();
    case SALARY_MAX:
      return isSetSalary_max();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ListEmployInfoParams)
      return this.equals((ListEmployInfoParams)that);
    return false;
  }

  public boolean equals(ListEmployInfoParams that) {
    if (that == null)
      return false;

    boolean this_present_employIdList = true && this.isSetEmployIdList();
    boolean that_present_employIdList = true && that.isSetEmployIdList();
    if (this_present_employIdList || that_present_employIdList) {
      if (!(this_present_employIdList && that_present_employIdList))
        return false;
      if (!this.employIdList.equals(that.employIdList))
        return false;
    }

    boolean this_present_companyIdList = true && this.isSetCompanyIdList();
    boolean that_present_companyIdList = true && that.isSetCompanyIdList();
    if (this_present_companyIdList || that_present_companyIdList) {
      if (!(this_present_companyIdList && that_present_companyIdList))
        return false;
      if (!this.companyIdList.equals(that.companyIdList))
        return false;
    }

    boolean this_present_employPositionList = true && this.isSetEmployPositionList();
    boolean that_present_employPositionList = true && that.isSetEmployPositionList();
    if (this_present_employPositionList || that_present_employPositionList) {
      if (!(this_present_employPositionList && that_present_employPositionList))
        return false;
      if (!this.employPositionList.equals(that.employPositionList))
        return false;
    }

    boolean this_present_salary_min = true;
    boolean that_present_salary_min = true;
    if (this_present_salary_min || that_present_salary_min) {
      if (!(this_present_salary_min && that_present_salary_min))
        return false;
      if (this.salary_min != that.salary_min)
        return false;
    }

    boolean this_present_salary_max = true;
    boolean that_present_salary_max = true;
    if (this_present_salary_max || that_present_salary_max) {
      if (!(this_present_salary_max && that_present_salary_max))
        return false;
      if (this.salary_max != that.salary_max)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_employIdList = true && (isSetEmployIdList());
    list.add(present_employIdList);
    if (present_employIdList)
      list.add(employIdList);

    boolean present_companyIdList = true && (isSetCompanyIdList());
    list.add(present_companyIdList);
    if (present_companyIdList)
      list.add(companyIdList);

    boolean present_employPositionList = true && (isSetEmployPositionList());
    list.add(present_employPositionList);
    if (present_employPositionList)
      list.add(employPositionList);

    boolean present_salary_min = true;
    list.add(present_salary_min);
    if (present_salary_min)
      list.add(salary_min);

    boolean present_salary_max = true;
    list.add(present_salary_max);
    if (present_salary_max)
      list.add(salary_max);

    return list.hashCode();
  }

  @Override
  public int compareTo(ListEmployInfoParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEmployIdList()).compareTo(other.isSetEmployIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmployIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employIdList, other.employIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyIdList()).compareTo(other.isSetCompanyIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyIdList, other.companyIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmployPositionList()).compareTo(other.isSetEmployPositionList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmployPositionList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employPositionList, other.employPositionList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalary_min()).compareTo(other.isSetSalary_min());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalary_min()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salary_min, other.salary_min);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalary_max()).compareTo(other.isSetSalary_max());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalary_max()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salary_max, other.salary_max);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ListEmployInfoParams(");
    boolean first = true;

    sb.append("employIdList:");
    if (this.employIdList == null) {
      sb.append("null");
    } else {
      sb.append(this.employIdList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("companyIdList:");
    if (this.companyIdList == null) {
      sb.append("null");
    } else {
      sb.append(this.companyIdList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("employPositionList:");
    if (this.employPositionList == null) {
      sb.append("null");
    } else {
      sb.append(this.employPositionList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("salary_min:");
    sb.append(this.salary_min);
    first = false;
    if (!first) sb.append(", ");
    sb.append("salary_max:");
    sb.append(this.salary_max);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ListEmployInfoParamsStandardSchemeFactory implements SchemeFactory {
    public ListEmployInfoParamsStandardScheme getScheme() {
      return new ListEmployInfoParamsStandardScheme();
    }
  }

  private static class ListEmployInfoParamsStandardScheme extends StandardScheme<ListEmployInfoParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ListEmployInfoParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EMPLOY_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.employIdList = new ArrayList<String>(_list48.size);
                String _elem49;
                for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                {
                  _elem49 = iprot.readString();
                  struct.employIdList.add(_elem49);
                }
                iprot.readListEnd();
              }
              struct.setEmployIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPANY_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list51 = iprot.readListBegin();
                struct.companyIdList = new ArrayList<String>(_list51.size);
                String _elem52;
                for (int _i53 = 0; _i53 < _list51.size; ++_i53)
                {
                  _elem52 = iprot.readString();
                  struct.companyIdList.add(_elem52);
                }
                iprot.readListEnd();
              }
              struct.setCompanyIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EMPLOY_POSITION_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list54 = iprot.readListBegin();
                struct.employPositionList = new ArrayList<String>(_list54.size);
                String _elem55;
                for (int _i56 = 0; _i56 < _list54.size; ++_i56)
                {
                  _elem55 = iprot.readString();
                  struct.employPositionList.add(_elem55);
                }
                iprot.readListEnd();
              }
              struct.setEmployPositionListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SALARY_MIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.salary_min = iprot.readI32();
              struct.setSalary_minIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SALARY_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.salary_max = iprot.readI32();
              struct.setSalary_maxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ListEmployInfoParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.employIdList != null) {
        oprot.writeFieldBegin(EMPLOY_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.employIdList.size()));
          for (String _iter57 : struct.employIdList)
          {
            oprot.writeString(_iter57);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.companyIdList != null) {
        oprot.writeFieldBegin(COMPANY_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.companyIdList.size()));
          for (String _iter58 : struct.companyIdList)
          {
            oprot.writeString(_iter58);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.employPositionList != null) {
        oprot.writeFieldBegin(EMPLOY_POSITION_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.employPositionList.size()));
          for (String _iter59 : struct.employPositionList)
          {
            oprot.writeString(_iter59);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SALARY_MIN_FIELD_DESC);
      oprot.writeI32(struct.salary_min);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SALARY_MAX_FIELD_DESC);
      oprot.writeI32(struct.salary_max);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ListEmployInfoParamsTupleSchemeFactory implements SchemeFactory {
    public ListEmployInfoParamsTupleScheme getScheme() {
      return new ListEmployInfoParamsTupleScheme();
    }
  }

  private static class ListEmployInfoParamsTupleScheme extends TupleScheme<ListEmployInfoParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ListEmployInfoParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetEmployIdList()) {
        optionals.set(0);
      }
      if (struct.isSetCompanyIdList()) {
        optionals.set(1);
      }
      if (struct.isSetEmployPositionList()) {
        optionals.set(2);
      }
      if (struct.isSetSalary_min()) {
        optionals.set(3);
      }
      if (struct.isSetSalary_max()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetEmployIdList()) {
        {
          oprot.writeI32(struct.employIdList.size());
          for (String _iter60 : struct.employIdList)
          {
            oprot.writeString(_iter60);
          }
        }
      }
      if (struct.isSetCompanyIdList()) {
        {
          oprot.writeI32(struct.companyIdList.size());
          for (String _iter61 : struct.companyIdList)
          {
            oprot.writeString(_iter61);
          }
        }
      }
      if (struct.isSetEmployPositionList()) {
        {
          oprot.writeI32(struct.employPositionList.size());
          for (String _iter62 : struct.employPositionList)
          {
            oprot.writeString(_iter62);
          }
        }
      }
      if (struct.isSetSalary_min()) {
        oprot.writeI32(struct.salary_min);
      }
      if (struct.isSetSalary_max()) {
        oprot.writeI32(struct.salary_max);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ListEmployInfoParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.employIdList = new ArrayList<String>(_list63.size);
          String _elem64;
          for (int _i65 = 0; _i65 < _list63.size; ++_i65)
          {
            _elem64 = iprot.readString();
            struct.employIdList.add(_elem64);
          }
        }
        struct.setEmployIdListIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list66 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.companyIdList = new ArrayList<String>(_list66.size);
          String _elem67;
          for (int _i68 = 0; _i68 < _list66.size; ++_i68)
          {
            _elem67 = iprot.readString();
            struct.companyIdList.add(_elem67);
          }
        }
        struct.setCompanyIdListIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.employPositionList = new ArrayList<String>(_list69.size);
          String _elem70;
          for (int _i71 = 0; _i71 < _list69.size; ++_i71)
          {
            _elem70 = iprot.readString();
            struct.employPositionList.add(_elem70);
          }
        }
        struct.setEmployPositionListIsSet(true);
      }
      if (incoming.get(3)) {
        struct.salary_min = iprot.readI32();
        struct.setSalary_minIsSet(true);
      }
      if (incoming.get(4)) {
        struct.salary_max = iprot.readI32();
        struct.setSalary_maxIsSet(true);
      }
    }
  }

}

